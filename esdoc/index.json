[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx",
    "content": "import React, { Component } from 'react';\nimport Dali from './../../../core/main';\n/** *\n * Component for auto-saving the state of the application periodically and avoid losing changes\n */\nexport default class AutoSave extends Component {\n    /**\n     * Constructor\n     * @param props React component props\n     */\n    constructor(props) {\n        super(props);\n        /** *\n         * Component's initial state\n         * @type {{displaySave: boolean Info displayed to user}}\n         */\n        this.state = { displaySave: false };\n    }\n\n    /**\n     * After component mounts\n     * Sets up timer for autosaving\n     */\n    componentDidMount() {\n        /** *\n         * Timer function set up\n         * @type {js timer}\n         */\n        this.intervalId = setInterval(this.timer.bind(this), Dali.Config.autosave_time);\n    }\n\n    /**\n     * Before component unmounts\n     * Clears timer\n     */\n    componentWillUnmount() {\n        // use intervalId from the state to clear the interval\n        clearInterval(this.intervalId);\n    }\n\n    /**\n     * Before component receives props\n     * Displays message to user for 2 seconds\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.isBusy.value) {\n            this.setState({ displaySave: true });\n            setTimeout(() => {\n                this.setState({ displaySave: false });\n            }, 2000);\n        }\n    }\n\n    /**\n     * Function run when time is up. It saves changes.\n     */\n    timer() {\n        if(!this.props.visorVisible) {\n            this.props.save();\n        }\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code} React rendered component\n     */\n    render() {\n        return(\n            <div className=\"savingLabel\"\n                style={{ display: this.state.displaySave ? 'block' : 'none' }}>{'Guardando...'}\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/autosave/AutoSave.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "AutoSave",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/autosave/AutoSave.jsx",
    "importStyle": "AutoSave",
    "description": "Component for auto-saving the state of the application periodically and avoid losing changes",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React component props"
      }
    ]
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "{displaySave: boolean Info displayed to user}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#componentDidMount",
    "access": "public",
    "description": "After component mounts\nSets up timer for autosaving",
    "lineNumber": 24,
    "params": [],
    "return": null
  },
  {
    "__docId__": 5,
    "kind": "member",
    "name": "intervalId",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#intervalId",
    "access": "public",
    "description": "Timer function set up",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "js timer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts\nClears timer",
    "lineNumber": 36,
    "params": [],
    "return": null
  },
  {
    "__docId__": 7,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#componentWillReceiveProps",
    "access": "public",
    "description": "Before component receives props\nDisplays message to user for 2 seconds",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "timer",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#timer",
    "access": "public",
    "description": "Function run when time is up. It saves changes.",
    "lineNumber": 58,
    "params": [],
    "return": null
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/autosave/AutoSave.jsx~AutoSave#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code} React rendered component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": "React rendered component"
    },
    "params": []
  },
  {
    "__docId__": 10,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport MarkCreator from '../../rich_plugins/mark_creator/MarkCreator';\nimport interact from 'interact.js';\nimport PluginPlaceholder from '../plugin_placeholder/PluginPlaceholder';\nimport { ADD_BOX, UPDATE_BOX, RESIZE_BOX, EDIT_PLUGIN_TEXT, IMPORT_STATE } from '../../../../common/actions';\nimport Dali from './../../../../core/main';\nimport i18n from 'i18next';\nimport { isSortableBox, isSortableContainer, isAncestorOrSibling, isContainedView } from '../../../../common/utils';\n\nrequire('./_daliBox.scss');\n\n/**\n * Dali Box component.\n * @desc It is the main and more complex component by far. It is the one in charge of painting a plugin's template and therefore it has many parts conditioned to the type of plugin.\n */\nexport default class DaliBox extends Component {\n    /**\n     * Constructor\n     * @param props React component props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Box border size\n         * @type {number}\n         */\n        this.borderSize = 2;\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code} React rendered component\n     */\n    render() {\n\n        let cornerSize = 15;\n        let box = this.props.boxes[this.props.id];\n\n        let toolbar = this.props.toolbars[this.props.id];\n        let vis = this.props.boxSelected === this.props.id;\n        let style = {\n            visibility: (toolbar.showTextEditor ? 'hidden' : 'visible'),\n        };\n\n        let textareaStyle = {\n            height: (toolbar.showTextEditor ? '100%' : '100%'),\n            // border: 'dashed black 1px',\n            display: (toolbar.showTextEditor ? 'block' : 'none'),\n        };\n        let attrs = {};\n        let width;\n        let height;\n        let classNames = \"\";\n\n        if (toolbar.config.needsTextEdition) {\n            textareaStyle.textAlign = \"left\";\n            style.textAlign = \"left\";\n        }\n\n        for (let tabKey in toolbar.controls) {\n            for (let accordionKey in toolbar.controls[tabKey].accordions) {\n                let button;\n                for (let buttonKey in toolbar.controls[tabKey].accordions[accordionKey].buttons) {\n                    button = toolbar.controls[tabKey].accordions[accordionKey].buttons[buttonKey];\n                    if (!button.isAttribute) {\n                        if (button.autoManaged) {\n                            if (buttonKey === 'className' && button.value) {\n                                classNames += button.value;\n                            } else if (buttonKey === '__width') {\n                                width = button.displayValue + (button.type === \"number\" ? button.units : \"\");\n                            } else if (buttonKey === '__height') {\n                                height = button.displayValue + (button.type === \"number\" ? button.units : \"\");\n                            } else {\n                                style[buttonKey] = button.value;\n                            }\n                        }\n                    } else {\n                        attrs['data-' + buttonKey] = button.value;\n                    }\n\n                    /* Unused */\n                    if (buttonKey === 'fontSize') {\n                        textareaStyle.fontSize = button.value;\n                        if (button.units) {\n                            textareaStyle.fontSize += button.units;\n                        }\n                    } else if (buttonKey === 'color') {\n                        textareaStyle.color = button.value;\n                    }\n                }\n                if (toolbar.controls[tabKey].accordions[accordionKey].accordions) {\n                    for (let accordionKey2 in toolbar.controls[tabKey].accordions[accordionKey].accordions) {\n                        for (let buttonKey in toolbar.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons) {\n                            button = toolbar.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons[buttonKey];\n                            if (!button.isAttribute) {\n                                if (button.autoManaged) {\n                                    if (buttonKey === 'className' && button.value) {\n                                        classNames += button.value;\n                                    } else {\n                                        style[buttonKey] = button.value;\n                                    }\n                                }\n                            } else {\n                                attrs['data-' + buttonKey] = button.value;\n                            }\n                            if (buttonKey === 'fontSize') {\n                                textareaStyle.fontSize = button.value;\n                                if (button.units) {\n                                    textareaStyle.fontSize += button.units;\n                                }\n                            } else if (buttonKey === 'color') {\n                                textareaStyle.color = button.value;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        Object.assign(textareaStyle, style);\n        textareaStyle.visibility = 'visible';\n        let rotate = 'rotate(0deg)';\n        if (!(this.props.markCreatorId && this.props.id === this.props.boxSelected)) {\n            if (toolbar.controls.main.accordions.__sortable.buttons.__rotate && toolbar.controls.main.accordions.__sortable.buttons.__rotate.value) {\n                rotate = 'rotate(' + toolbar.controls.main.accordions.__sortable.buttons.__rotate.value + 'deg)';\n            }\n        }\n        style.transform = style.WebkitTransform = style.MsTransform = rotate;\n        let content = toolbar.config.flavor === \"react\" ? (\n            <div style={style} {...attrs} className={\"boxStyle \" + classNames} ref={\"content\"}>\n                {box.content}\n            </div>\n        ) : (\n            <div style={style} {...attrs} className={\"boxStyle \" + classNames} ref={\"content\"}>\n                {this.renderChildren(box.content)}\n            </div>\n        );\n        let border = (\n            <div style={{ visibility: (vis ? 'visible' : 'hidden') }}>\n                <div style={{\n                    position: 'absolute',\n                    top: -(this.borderSize),\n                    left: -(this.borderSize),\n                    width: '100%',\n                    height: '100%',\n                    boxSizing: 'content-box',\n                }} />\n                <div style={{ display: box.resizable ? 'initial' : 'none' }}>\n                    <div className=\"helpersResizable\"\n                        style={{ left: -cornerSize / 2, top: -cornerSize / 2, width: cornerSize, height: cornerSize, cursor: (!isSortableContainer(box.container) ? 'nw-resize' : 'move') }} />\n                    <div className=\"helpersResizable\"\n                        style={{ right: -cornerSize / 2, top: -cornerSize / 2, width: cornerSize, height: cornerSize, cursor: (!isSortableContainer(box.container) ? 'ne-resize' : 'move') }} />\n                    <div className=\"helpersResizable\"\n                        style={{ left: -cornerSize / 2, bottom: -cornerSize / 2, width: cornerSize, height: cornerSize, cursor: (!isSortableContainer(box.container) ? 'sw-resize' : 'move') }} />\n                    <div className=\"helpersResizable\"\n                        style={{ right: -cornerSize / 2, bottom: -cornerSize / 2, width: cornerSize, height: cornerSize, cursor: (!isSortableContainer(box.container) ? 'se-resize' : 'move') }} />\n                </div>\n            </div>\n        );\n\n        let classes = \"wholebox\";\n        if (box.container) {\n            classes += \" dnd\" + box.container;\n        }\n        if (this.props.id === this.props.boxSelected) {\n            classes += \" selectedBox\";\n        }\n        if (box.height === 'auto') {\n            classes += \" automaticallySizedBox\";\n        }\n\n        let showOverlay = \"none\";\n        // If current level selected is bigger than this box's and it has no children, show overlay\n        if (this.props.boxLevelSelected > box.level && box.children.length === 0) {\n            showOverlay = \"initial\";\n        // If current level selected is the same but this box belongs to another \"tree\" of boxes, show overlay\n        } else if (this.props.boxLevelSelected === box.level &&\n                   box.level !== 0 &&\n                   !isAncestorOrSibling(this.props.boxSelected, this.props.id, this.props.boxes)) {\n            showOverlay = \"initial\";\n        }\n        let verticalAlign = \"top\";\n        if (isSortableBox(box.container)) {\n            if (toolbar.controls.main.accordions.__sortable.buttons.__verticalAlign && toolbar.controls.main.accordions.__sortable.buttons.__verticalAlign.value) {\n                verticalAlign = toolbar.controls.main.accordions.__sortable.buttons.__verticalAlign.value;\n            } else {\n                verticalAlign = 'top';\n            }\n        }\n\n        /* <MarkCreator/>*/\n        return (\n            <div className={classes} id={'box-' + this.props.id}\n                onClick={e => {\n                    // If there's no box selected and current's level is 0 (otherwise, it would select a deeper box)\n                    // or -1 (only DaliBoxSortable can have level -1)\n                    if((this.props.boxSelected === -1 || this.props.boxLevelSelected === -1) && box.level === 0) {\n                        this.props.onBoxSelected(this.props.id);\n                        e.stopPropagation();\n                        return;\n                    }\n                    // Last parent has to be the same, otherwise all boxes with same level would be selectable\n                    if(this.props.boxLevelSelected === box.level &&\n                       isAncestorOrSibling(this.props.boxSelected, this.props.id, this.props.boxes)) {\n                        if(e.nativeEvent.ctrlKey && box.children.length !== 0) {\n                            this.props.onBoxLevelIncreased();\n                        }else if(this.props.boxSelected !== this.props.id) {\n                            this.props.onBoxSelected(this.props.id);\n                        }\n                    }\n                    if(this.props.boxSelected !== -1 && this.props.boxLevelSelected === 0) {\n                        this.props.onBoxSelected(this.props.id);\n                        e.stopPropagation();\n                    }\n                    if(box.level === 0) {\n                        e.stopPropagation();\n                    }\n                }}\n                onDoubleClick={(e)=> {\n                    if(toolbar.config && toolbar.config.needsTextEdition && this.props.id === this.props.boxSelected) {\n                        this.props.onTextEditorToggled(this.props.id, true);\n                        this.refs.textarea.focus();\n                        // Elimina el placeholder \"Introduzca texto aquí\" cuando se va a editar\n                        // Código duplicado en DaliBox, DaliShortcuts y PluginToolbar. Extraer a common_tools?\n                        let CKstring = CKEDITOR.instances[this.props.id].getData();\n                        let initString = \"<p>\" + i18n.t(\"text_here\") + \"</p>\\n\";\n                        if(CKstring === initString) {\n                            CKEDITOR.instances[this.props.id].setData(\"\");\n                        }\n                    }\n                }}\n                style={{\n                    position: box.position.type,\n                    left: box.position.x ? box.position.x : \"\",\n                    top: box.position.y ? box.position.y : \"\",\n                    width: width,\n                    height: height,\n                    verticalAlign: verticalAlign,\n                    touchAction: 'none',\n                    msTouchAction: 'none',\n                    cursor: vis ? 'inherit' : 'default', // esto evita que aparezcan los cursores de move y resize cuando la caja no está seleccionada\n                }}>\n                {border}\n                {/* content */}\n                {/* The previous line was changed for the next one in order to make the box grow when text grows while editing.\n                 To disable this, you also have to change the textareastyle to an absolute position div, and remove the float property*/}\n                {toolbar.showTextEditor ? null : content }\n                {toolbar.state.__text ?\n                    <div id={box.id}\n                        ref={\"textarea\"}\n                        className={classNames + \" textAreaStyle\"}\n                        contentEditable\n                        style={textareaStyle} /> :\n                    null\n                }\n                <div className=\"boxOverlay\" style={{ display: showOverlay }} />\n                <MarkCreator\n                    addMarkShortcut={this.props.addMarkShortcut}\n                    onBoxAdded={this.props.onBoxAdded}\n                    boxSelected={this.props.boxSelected}\n                    content={this.refs.content}\n                    containedViews={this.props.containedViews}\n                    toolbar={toolbar ? toolbar : {}}\n                    deleteMarkCreator={this.props.deleteMarkCreator}\n                    parseRichMarkInput={Dali.Plugins.get(toolbar.config.name).parseRichMarkInput}\n                    markCreatorId={this.props.markCreatorId}\n                    currentId={this.props.id}\n                    pageType={this.props.pageType}\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Renders box children\n     * @param markup Content\n     * @param key Unique React key\n     * @returns {children} React components for the box children\n     */\n    renderChildren(markup, key) {\n        let component;\n        let props = {};\n        let children = null;\n        switch (markup.node) {\n        case 'element':\n            if (markup.attr) {\n                props = markup.attr;\n            }\n            props.key = key;\n            if (markup.tag === 'plugin') {\n                component = PluginPlaceholder;\n                let resizable = markup.attr.hasOwnProperty(\"plugin-data-resizable\");\n                props = Object.assign({}, props, {\n                    pluginContainer: markup.attr[\"plugin-data-id\"],\n                    resizable: resizable,\n                    parentBox: this.props.boxes[this.props.id],\n                    boxes: this.props.boxes,\n                    boxSelected: this.props.boxSelected,\n                    boxLevelSelected: this.props.boxLevelSelected,\n                    toolbars: this.props.toolbars,\n                    lastActionDispatched: this.props.lastActionDispatched,\n                    onBoxSelected: this.props.onBoxSelected,\n                    onBoxLevelIncreased: this.props.onBoxLevelIncreased,\n                    containedViewSelected: this.props.containedViewSelected,\n                    onBoxMoved: this.props.onBoxMoved,\n                    onBoxResized: this.props.onBoxResized,\n                    onSortableContainerResized: this.props.onSortableContainerResized,\n                    onBoxDeleted: this.props.onBoxDeleted,\n                    onBoxDropped: this.props.onBoxDropped,\n                    onVerticallyAlignBox: this.props.onVerticallyAlignBox,\n                    onBoxModalToggled: this.props.onBoxModalToggled,\n                    onBoxesInsideSortableReorder: this.props.onBoxesInsideSortableReorder,\n                    onTextEditorToggled: this.props.onTextEditorToggled,\n                });\n            } else {\n                component = markup.tag;\n            }\n            break;\n        case 'text':\n            component = \"span\";\n            props = { key: key };\n            children = [decodeURI(markup.text)];\n            break;\n        case 'root':\n            component = \"div\";\n            props = { style: { width: '100%', height: '100%' } };\n            break;\n        }\n\n        Object.keys(props).forEach(prop => {\n            if (prop.startsWith(\"on\")) {\n                let value = props[prop];\n                if (typeof value === \"string\") {\n                    props[prop] = function() {\n                    };\n                }\n            }\n        });\n\n        if (markup.child) {\n            if (markup.child.length === 1 && markup.child[0].node === \"text\") {\n                props.dangerouslySetInnerHTML = {\n                    __html: decodeURI(markup.child[0].text),\n                };\n            } else {\n                children = [];\n                markup.child.forEach((child, index) => {\n                    children.push(this.renderChildren(child, index));\n                });\n            }\n        }\n        return React.createElement(component, props, children);\n    }\n\n    /**\n     * Blurs text area and saves data\n     */\n    blurTextarea() {\n        this.props.onTextEditorToggled(this.props.id, false);\n        let toolbar = this.props.toolbars[this.props.id];\n        let data = CKEDITOR.instances[this.props.id].getData();\n        if(data.length === 0) {\n            data = i18n.t(\"text_here\");\n            CKEDITOR.instances[this.props.id].setData(i18n.t(\"text_here\"));\n        }\n        Dali.Plugins.get(toolbar.config.name).forceUpdate(Object.assign({}, toolbar.state, {\n            __text: toolbar.config.extraTextConfig ? data : encodeURI(data),\n        }), this.props.id, EDIT_PLUGIN_TEXT);\n    }\n\n    /**\n     * Before component updates\n     * Blurs CKEditor area\n     * @param nextProps React next props\n     * @param nextState React next state\n     */\n    componentWillUpdate(nextProps, nextState) {\n        if ((this.props.boxSelected === this.props.id) && (nextProps.boxSelected !== this.props.id) && this.props.toolbars[this.props.id].showTextEditor) {\n            CKEDITOR.instances[this.props.id].focusManager.blur(true);\n            this.blurTextarea();\n        }\n    }\n\n    /**\n     * Checks if aspect ratio should be kept when resizing the box\n     * @returns {boolean} true if aspect ratio shoud be kept, false otherwise\n     */\n    checkAspectRatioValue() {\n        let toolbar = this.props.toolbars[this.props.id];\n        let box = this.props.boxes[this.props.id];\n        if (box && box.height && box.height === 'auto') {\n            return true;\n        }\n        if (toolbar.config.aspectRatioButtonConfig) {\n            let arb = toolbar.config.aspectRatioButtonConfig;\n            if (arb.location.length === 2) {\n                let comp = toolbar.controls[arb.location[0]].accordions[arb.location[1]].buttons.__aspectRatio;\n                if (comp) {\n                    return comp.checked;\n                }\n                return false;\n\n            }\n            let comp = toolbar.controls[arb.location[0]].accordions[arb.location[1]].accordions[arb.location[2]].buttons.__aspectRatio;\n            if (comp) {\n                return comp.checked;\n            }\n            return false;\n\n        }\n\n        return false;\n    }\n\n    /**\n     * After component updates\n     * Update CKEditor and interact objects bases on updates\n     * @param prevProps React previous props\n     * @param prevState React previous state\n     */\n    componentDidUpdate(prevProps, prevState) {\n        let toolbar = this.props.toolbars[this.props.id];\n        let box = this.props.boxes[this.props.id];\n        let node = ReactDOM.findDOMNode(this);\n\n        if (toolbar.showTextEditor) {\n            this.refs.textarea.focus();\n\n        }\n        if (prevProps.toolbars[this.props.id] && (toolbar.showTextEditor !== prevProps.toolbars[this.props.id].showTextEditor) && box.draggable) {\n            interact(node).draggable({ enabled: !toolbar.showTextEditor });\n        }\n\n        if (box.resizable) {\n            interact(node).resizable({ preserveAspectRatio: this.checkAspectRatioValue() });\n        }\n\n        if ((box.level > this.props.boxLevelSelected) && this.props.boxLevelSelected !== -1) {\n            interact(node).draggable({ enabled: false });\n        } else {\n            interact(node).draggable({ enabled: box.draggable });\n        }\n\n        let action = this.props.lastActionDispatched;\n\n        if ((action.type === \"@@redux-undo/UNDO\" || action.type === \"@@redux-undo/REDO\") && this.props.toolbars[this.props.id].config.needsTextEdition) {\n            CKEDITOR.instances[this.props.id].setData(decodeURI(this.props.toolbars[this.props.id].state.__text));\n        }\n\n        if (action.type === \"DELETE_BOX\" && this.props.toolbars[this.props.id].config.needsTextEdition) {\n            for (let instance in CKEDITOR.instances) {\n                CKEDITOR.instances[instance].destroy();\n            }\n            CKEDITOR.inlineAll();\n            for (let editor in CKEDITOR.instances) {\n                if (this.props.toolbars[editor].state.__text) {\n                    CKEDITOR.instances[editor].setData(decodeURI(this.props.toolbars[editor].state.__text));\n                }\n            }\n        }\n        if(this.props.toolbars[this.props.id].config.needsTextEdition) {\n            window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n        }\n        if (action.type === \"@@redux-undo/UNDO\") {\n            Dali.Plugins.get(toolbar.config.name).afterRender(this.refs.content, toolbar.state);\n\n        }\n        if ((action.type === ADD_BOX || action.type === UPDATE_BOX || action.type === RESIZE_BOX || action.type === IMPORT_STATE) &&\n            ((action.payload.id || action.payload.ids.id) === this.props.id)) {\n            Dali.Plugins.get(toolbar.config.name).afterRender(this.refs.content, toolbar.state);\n        }\n\n    }\n\n    /**\n     * After component mounts\n     * Get CKEditor instances and set interact listeners for box manipulation\n     */\n    componentDidMount() {\n        let toolbar = this.props.toolbars[this.props.id];\n        let box = this.props.boxes[this.props.id];\n        if (toolbar.config && toolbar.config.needsTextEdition) {\n            CKEDITOR.disableAutoInline = true;\n            for (let key in toolbar.config.extraTextConfig) {\n                CKEDITOR.config[key] += toolbar.config.extraTextConfig[key] + \",\";\n            }\n            let editor = CKEDITOR.inline(this.refs.textarea);\n            if (toolbar.state.__text) {\n                editor.setData(decodeURI(toolbar.state.__text));\n            }\n        }\n        let offsetEl = document.getElementById('maincontent') ? document.getElementById('maincontent').getBoundingClientRect() : {};\n        let leftO = offsetEl.left || 0;\n        let topO = offsetEl.top || 0;\n        offsetEl;\n        let gridTarget = interact.createSnapGrid({ x: 10, y: 10, range: 7.1, offset: { x: leftO, y: topO } });\n        Dali.Plugins.get(toolbar.config.name).afterRender(this.refs.content, toolbar.state);\n        let dragRestrictionSelector = isSortableContainer(box.container) ? \".daliBoxSortableContainer, .drg\" + box.container : \"parent\";\n        interact(ReactDOM.findDOMNode(this))\n            /* .snap({\n                actions     : ['resizex', 'resizey', 'resizexy', 'resize', 'drag'],\n                mode        : 'grid'\n            })*/\n            .draggable({\n                /* snap: {\n                    targets: [gridTarget],\n                    relativePoints: [{ x: 0, y: 0 }]\n                },*/\n                enabled: box.draggable,\n                restrict: {\n                    restriction: dragRestrictionSelector,\n                    elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n                },\n                autoScroll: true,\n                onstart: (event) => {\n                    // If contained in smth different from ContainedCanvas (sortableContainer || PluginPlaceHolder), clone the node and hide the original\n                    if (isSortableContainer(box.container)) {\n                        let original = event.target;\n                        let parent = original;\n                        // Find real parent to append clone\n                        let iterate = true;\n                        while (iterate) {\n                            parent = parent.parentNode;\n                            if (parent.className && (parent.className.indexOf(\"daliBoxSortableContainer\") !== -1 || parent.className.indexOf(\"drg\" + box.container) !== -1)) {\n                                iterate = false;\n                            }\n                        }\n                        // Clone, assign values and hide original\n                        let clone = original.cloneNode(true);\n                        let originalRect = original.getBoundingClientRect();\n                        let parentRect = parent.getBoundingClientRect();\n                        let x = originalRect.left - parentRect.left;\n                        let y = originalRect.top - parentRect.top;\n                        clone.setAttribute(\"id\", \"clone\");\n                        clone.setAttribute('data-x', x);\n                        clone.setAttribute('data-y', y);\n                        clone.style.left = 0 + 'px';\n                        clone.style.top = 0 + 'px';\n                        original.setAttribute('data-x', x);\n                        original.setAttribute('data-y', y);\n                        clone.style.position = 'absolute';\n                        parent.appendChild(clone);\n                        clone.style.WebkitTransform = clone.style.transform = 'translate(' + (x) + 'px, ' + (y) + 'px)';\n                        clone.style.height = originalRect.height + \"px\";\n                        clone.style.width = originalRect.width + \"px\";\n                        clone.style.border = \"1px dashed #555\";\n\n                        original.style.opacity = 0;\n                    } else if (isContainedView(box.container)) {\n                        let target = event.target;\n                        target.style.left = this.getElementPositionFromLeft(target.style.left, target.parentElement.offsetWidth) + \"px\";\n                        target.style.top = target.parentElement.offsetHeight * (parseFloat(target.style.top) / 100) + \"px\";\n                    } else {\n                        let target = event.target;\n                        let topInPix = target.parentElement.offsetHeight * (parseFloat(target.style.top) / 100);\n                        let leftInPix = target.parentElement.offsetWidth * (parseFloat(target.style.left) / 100);\n\n                        target.style.top = topInPix + \"px\";\n                        target.style.left = leftInPix + \"px\";\n\n                    }\n                },\n                onmove: (event) => {\n                    if (this.props.boxSelected !== this.props.id) {\n                        this.props.onBoxSelected(this.props.id);\n                    }\n\n                    // Hide DaliShortcuts\n                    let bar = this.props.containedViewSelected === 0 ?\n                        document.getElementById('daliBoxIcons') :\n                        document.getElementById('contained_daliBoxIcons');\n                    bar.classList.add('hidden');\n\n                    // Level has to be the same to drag a box, unless a sortableContainer is selected, then it should allow level 0 boxes\n                    if ((box.level - this.props.boxLevelSelected) === 0 || (box.level === 0 && this.props.boxLevelSelected === -1)) {\n                        // If box not in a sortableContainer or PluginPlaceHolder, just drag\n                        if (!isSortableContainer(box.container)) {\n                            let target = event.target;\n                            target.style.left = (parseInt(target.style.left, 10) || 0) + event.dx + 'px';\n                            target.style.top = (parseInt(target.style.top, 10) || 0) + event.dy + 'px';\n                            target.style.zIndex = '9999';\n\n                            // Else, drag the clone and update values in attributes in both elements\n                        } else {\n                            let target = document.getElementById('clone');\n                            let original = document.getElementById('box-' + this.props.id);\n                            let x = (parseFloat(target.getAttribute('data-x'), 10) || 0) + event.dx;\n                            let y = (parseFloat(target.getAttribute('data-y'), 10) || 0) + event.dy;\n                            target.style.webkitTransform =\n                                target.style.transform =\n                                    'translate(' + (x) + 'px, ' + (y) + 'px)';\n                            target.style.zIndex = '9999';\n\n                            target.setAttribute('data-x', x);\n                            target.setAttribute('data-y', y);\n                            original.setAttribute('data-x', x);\n                            original.setAttribute('data-y', y);\n                        }\n                    }\n                },\n                onend: (event) => {\n                    if (this.props.boxSelected !== this.props.id) {\n                        return;\n                    }\n\n                    let target = event.target;\n                    if (!target.parentElement) {\n                        return;\n                    }\n\n                    // Get position and if contained in sortableContainer || PluginPlaceHolder, convert to %\n                    let pos = this.props.boxes[this.props.id].position.type;\n                    let actualLeft = pos === 'relative' ? target.style.left : target.getAttribute('data-x');\n                    let actualTop = pos === 'relative' ? target.style.top : target.getAttribute('data-y');\n                    let absoluteLeft = (((parseFloat(target.style.left) * 100) / target.parentElement.offsetWidth) > 100) ?\n                        ((target.parentElement.offsetWidth - (parseFloat(target.style.width))) / target.parentElement.offsetWidth) * 100 + \"%\" :\n                        ((parseFloat(target.style.left) * 100) / target.parentElement.offsetWidth) + \"%\";\n                    /* let absoluteTop = target.getAttribute('data-y') + Math.max(parseInt(target.style.top, 10), 0) >0 ?\n                        (target.getAttribute('data-y') + Math.max(parseInt(target.style.top, 10), 0))/ target.parentElement.offsetHeight * 100 + \"%\" :\n                        \"0%\";*/\n                    let absoluteTop = (parseFloat(target.style.top) * 100) / target.parentElement.offsetHeight + \"%\";\n                    let left = Math.max(Math.min(Math.floor(parseFloat(actualLeft) / target.parentElement.offsetWidth * 100), 100), 0) + '%';\n                    let top = Math.max(Math.min(Math.floor(parseFloat(actualTop) / target.parentElement.offsetHeight * 100), 100), 0) + '%';\n\n                    if (isSortableContainer(box.container)) {\n                        target.style.left = left;\n                        target.style.top = top;\n                    } else {\n                        target.style.left = absoluteLeft;\n                        target.style.top = absoluteTop;\n                    }\n\n                    target.style.zIndex = 'initial';\n\n                    // Delete clone and unhide original\n                    if (isSortableContainer(box.container)) {\n                        let clone = document.getElementById('clone');\n                        if (clone) {\n                            clone.parentElement.removeChild(clone);\n                        }\n                        target.style.opacity = 1;\n                    }\n\n                    this.props.onBoxMoved(\n                        this.props.id,\n                        isSortableContainer(box.container) ? left : absoluteLeft,\n                        isSortableContainer(box.container) ? top : absoluteTop,\n                        this.props.boxes[this.props.id].position.type,\n                        box.parent,\n                        box.container\n                    );\n\n                    // Stuff to reorder boxes when position is relative\n                    // TODO: learn how it works\n                    let releaseClick = document.elementFromPoint(event.clientX, event.clientY);\n                    if (releaseClick) {\n                        // Get element that has been clicked\n                        let release = releaseClick.getAttribute('id') || \"noid\";\n                        let counter = 7;\n                        // Check recursively the parent of the element clicked to check if any of them is a box\n                        while (release && release.indexOf('box-bo') === -1 && counter > 0 && releaseClick.parentNode) {\n                            releaseClick = releaseClick.parentNode;\n                            if (releaseClick) {\n                                release = releaseClick.getAttribute('id') || \"noid\";\n                            } else {\n                                counter = 0;\n                                break;\n                            }\n                            counter--;\n                        }\n                        if (counter > 0 && release && release.indexOf('box-bo') !== -1) {\n                            let partialID = release.split('box-');\n                            if (partialID && partialID.length > 0) {\n                                let hoverID = partialID[1];\n                                let boxOb = this.props.boxes[this.props.id];\n                                if (boxOb && isSortableContainer(boxOb.container)) {\n                                    let children = this.props.boxes[boxOb.parent].sortableContainers[boxOb.container].children;\n                                    if (children.indexOf(hoverID) !== -1) {\n                                        let newOrder = Object.assign([], children);\n                                        newOrder.splice(newOrder.indexOf(hoverID), 0, newOrder.splice(newOrder.indexOf(boxOb.id), 1)[0]);\n                                        this.props.onBoxesInsideSortableReorder(boxOb.parent, boxOb.container, newOrder);\n                                    }\n                                }\n                            }\n\n                        }\n                    }\n\n                    // Unhide DaliShortcuts\n\n                    let bar = this.props.containedViewSelected === 0 ?\n                        document.getElementById('daliBoxIcons') :\n                        document.getElementById('contained_daliBoxIcons');\n                    bar.classList.remove('hidden');\n\n                    event.stopPropagation();\n                },\n            })\n            .ignoreFrom('input, textarea, .textAreaStyle,  a, .pointerEventsEnabled')\n            .resizable({\n                /* snap: { targets: [gridTarget] },*/\n                preserveAspectRatio: this.checkAspectRatioValue(),\n                enabled: (box.resizable),\n                restrict: {\n                    restriction: \"parent\",\n                    elementRect: { top: 0, left: 0, bottom: 1, right: 1 },\n                },\n                edges: { left: true, right: true, bottom: true, top: true },\n                onstart: (event) => {\n                    // Hide DaliShortcuts\n                    let bar = this.props.containedViewSelected === 0 ?\n                        document.getElementById('daliBoxIcons') :\n                        document.getElementById('contained_daliBoxIcons');\n                    bar.classList.add('hidden');\n\n                    // Append textbox with actual size\n                    let sb = document.getElementsByClassName('selectedBox');\n                    if (sb && ('box-' + this.props.boxSelected) === sb[0].getAttribute('id')) {\n                        let span = document.createElement(\"span\");\n                        span.setAttribute(\"id\", \"sizing\");\n                        let t = document.createTextNode(\" \");\n                        sb[0].appendChild(span);\n\n                    }\n                },\n                onmove: (event) => {\n                    if (this.props.boxSelected !== this.props.id) {\n                        return;\n                    }\n\n                    let target = event.target;\n                    let x = (parseFloat(target.getAttribute('data-x'), 10) || 0);\n                    let y = (parseFloat(target.getAttribute('data-y'), 10) || 0);\n\n                    // update the element's style\n                    target.style.width = event.rect.width + 'px';\n                    target.style.height = event.rect.height + 'px';\n\n                    // translate when resizing from top or left edges\n                    x += event.deltaRect.left;\n                    y += event.deltaRect.top;\n\n                    target.style.webkitTransform = target.style.transform =\n                        'translate(' + x + 'px,' + y + 'px)';\n\n                    target.setAttribute('data-x', x);\n                    target.setAttribute('data-y', y);\n\n                    // Update size in textbox\n                    let span = document.getElementById('sizing');\n                    if (span) {\n                        span.innerHTML = parseInt(target.style.width, 10) + \" × \" + parseInt(target.style.height, 10);\n                    }\n                },\n                onend: (event) => {\n                    if (this.props.boxSelected !== this.props.id) {\n                        return;\n                    }\n                    // Calculate new button values\n                    let target = event.target;\n                    let widthButton = Object.assign({}, this.props.toolbars[this.props.id].controls.main.accordions.__sortable.buttons.__width);\n                    let heightButton = Object.assign({}, this.props.toolbars[this.props.id].controls.main.accordions.__sortable.buttons.__height);\n\n                    // Units can be either % or px\n                    if (widthButton.units === \"%\") {\n                        let newWidth = Math.min(Math.floor(parseFloat(target.style.width) / target.parentElement.offsetWidth * 100), 100);\n                        // Update display value if it's not \"auto\"\n                        if (widthButton.displayValue !== \"auto\") {\n                            widthButton.displayValue = newWidth;\n                        }\n                        widthButton.value = newWidth;\n                    } else {\n                        if (widthButton.displayValue !== \"auto\") {\n                            widthButton.displayValue = parseFloat(target.style.width);\n                        }\n                        widthButton.value = parseFloat(target.style.width);\n                    }\n\n                    if (heightButton.units === \"%\") {\n                        let newHeight = Math.min(Math.floor(parseFloat(target.style.height) / target.parentElement.offsetHeight * 100), 100);\n                        if (heightButton.displayValue !== \"auto\") {\n                            heightButton.displayValue = newHeight;\n                            heightButton.value = newHeight;\n                        }\n                    } else if (heightButton.displayValue !== \"auto\") {\n                        heightButton.displayValue = parseFloat(target.style.height);\n                        heightButton.value = parseFloat(target.style.height);\n                    }\n\n                    target.style.width = widthButton.displayValue === 'auto' ? 'auto' : widthButton.value + widthButton.units;\n                    target.style.height = heightButton.displayValue === 'auto' ? 'auto' : heightButton.value + heightButton.units;\n                    this.props.onBoxResized(this.props.id, widthButton, heightButton);\n                    if (box.position.x !== target.style.left || box.position.y !== target.style.top) {\n                        target.style.left = (parseFloat(target.style.left) / 100 * target.parentElement.offsetWidth + parseFloat(target.getAttribute('data-x'))) * 100 / target.parentElement.offsetWidth + '%';\n                        target.style.top = (parseFloat(target.style.top) / 100 * target.parentElement.offsetHeight + parseFloat(target.getAttribute('data-y'))) * 100 / target.parentElement.offsetHeight + '%';\n                        this.props.onBoxMoved(this.props.id, target.style.left, target.style.top, this.props.boxes[this.props.id].position.type, this.props.parent, this.props.container);\n                    }\n                    target.style.webkitTransform = target.style.transform =\n                        'translate(0px, 0px)';\n\n                    target.setAttribute('data-x', 0);\n                    target.setAttribute('data-y', 0);\n\n                    // Unhide DaliShorcuts and remove size textbox\n                    let bar = this.props.containedViewSelected === 0 ?\n                        document.getElementById('daliBoxIcons') :\n                        document.getElementById('contained_daliBoxIcons');\n                    bar.classList.remove('hidden');\n                    let span = document.getElementById('sizing');\n                    if (span) {\n                        span.parentElement.removeChild(span);\n                    }\n\n                    event.stopPropagation();\n                },\n            });\n\n    }\n\n    /**\n     * Calculate element position from left\n     * @param left element's left\n     * @param width element's width\n     * @returns {position} Position from left\n     */\n    getElementPositionFromLeft(left, width) {\n        if(left.indexOf(\"px\") !== -1) {\n            return left;\n        } else if(left.indexOf(\"%\") !== -1) {\n            return width * parseFloat(left) / 100;\n        }\n        return 0;\n    }\n\n    /**\n     * Before component unmounts\n     * Unset interact listeners and destroy current CKEditor instances\n     */\n    componentWillUnmount() {\n        interact(ReactDOM.findDOMNode(this)).unset();\n        if (CKEDITOR.instances[this.props.id]) {\n            if (CKEDITOR.instances[this.props.id].focusManager.hasFocus) {\n                this.blurTextarea();\n            }\n            CKEDITOR.instances[this.props.id].destroy();\n        }\n    }\n\n}\n/**\n * Default props\n * @type {{id: (*), boxes: shim, boxSelected: shim, boxLevelSelected: shim, containedViews: shim, containedViewSelected: shim, toolbars: shim, lastActionDispatched: shim, addMarkShortcut: shim, deleteMarkCreator: shim, markCreatorId: shim, onBoxAdded: shim, onBoxSelected: shim, onBoxLevelIncreased: shim, onBoxMoved: shim, onBoxResized: shim, onBoxDropped: shim, onVerticallyAlignBox: shim, onBoxModalToggled: shim, onBoxesInsideSortableReorder: shim, onSortableContainerResized: shim, onTextEditorToggled: shim, pageType: shim}}\n */\nDaliBox.defaultProps = {\n    id: PropTypes.string.isRequired,\n    // key: PropTypes.string.isRequired,\n    boxes: PropTypes.object,\n    boxSelected: PropTypes.string,\n    boxLevelSelected: PropTypes.number,\n    containedViews: PropTypes.object,\n    containedViewSelected: PropTypes.string,\n    toolbars: PropTypes.object,\n    lastActionDispatched: PropTypes.string,\n    addMarkShortcut: PropTypes.func,\n    deleteMarkCreator: PropTypes.func,\n    markCreatorId: PropTypes.string,\n    onBoxAdded: PropTypes.func,\n    onBoxSelected: PropTypes.func,\n    onBoxLevelIncreased: PropTypes.func,\n    onBoxMoved: PropTypes.func,\n    onBoxResized: PropTypes.func,\n    onBoxDropped: PropTypes.func,\n    onVerticallyAlignBox: PropTypes.func,\n    onBoxModalToggled: PropTypes.func,\n    onBoxesInsideSortableReorder: PropTypes.func,\n    onSortableContainerResized: PropTypes.func,\n    onTextEditorToggled: PropTypes.func,\n    pageType: PropTypes.string,\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 11,
    "kind": "class",
    "name": "DaliBox",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx",
    "importStyle": "DaliBox",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 12,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React component props"
      }
    ]
  },
  {
    "__docId__": 13,
    "kind": "member",
    "name": "borderSize",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#borderSize",
    "access": "public",
    "description": "Box border size",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 14,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#render",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 15,
    "kind": "method",
    "name": "renderChildren",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#renderChildren",
    "access": "public",
    "description": "Renders box children",
    "lineNumber": 282,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{children} React components for the box children"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "markup",
        "description": "Content"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Unique React key"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "children"
      ],
      "spread": false,
      "description": "React components for the box children"
    }
  },
  {
    "__docId__": 16,
    "kind": "method",
    "name": "blurTextarea",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#blurTextarea",
    "access": "public",
    "description": "Blurs text area and saves data",
    "lineNumber": 360,
    "params": [],
    "return": null
  },
  {
    "__docId__": 17,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#componentWillUpdate",
    "access": "public",
    "description": "Before component updates\nBlurs CKEditor area",
    "lineNumber": 379,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "React next props"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "React next state"
      }
    ],
    "return": null
  },
  {
    "__docId__": 18,
    "kind": "method",
    "name": "checkAspectRatioValue",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#checkAspectRatioValue",
    "access": "public",
    "description": "Checks if aspect ratio should be kept when resizing the box",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} true if aspect ratio shoud be kept, false otherwise"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if aspect ratio shoud be kept, false otherwise"
    },
    "params": []
  },
  {
    "__docId__": 19,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#componentDidUpdate",
    "access": "public",
    "description": "After component updates\nUpdate CKEditor and interact objects bases on updates",
    "lineNumber": 423,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "React previous props"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "React previous state"
      }
    ],
    "return": null
  },
  {
    "__docId__": 20,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#componentDidMount",
    "access": "public",
    "description": "After component mounts\nGet CKEditor instances and set interact listeners for box manipulation",
    "lineNumber": 481,
    "params": [],
    "return": null
  },
  {
    "__docId__": 21,
    "kind": "method",
    "name": "getElementPositionFromLeft",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#getElementPositionFromLeft",
    "access": "public",
    "description": "Calculate element position from left",
    "lineNumber": 828,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{position} Position from left"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "element's left"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "element's width"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "position"
      ],
      "spread": false,
      "description": "Position from left"
    }
  },
  {
    "__docId__": 22,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box/DaliBox.jsx~DaliBox#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts\nUnset interact listeners and destroy current CKEditor instances",
    "lineNumber": 841,
    "params": [],
    "return": null
  },
  {
    "__docId__": 23,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, OverlayTrigger, Popover, Tooltip } from 'react-bootstrap';\nimport interact from 'interact.js';\nimport Alert from './../../common/alert/Alert';\nimport DaliBox from '../dali_box/DaliBox';\nimport { ID_PREFIX_SORTABLE_CONTAINER } from '../../../../common/constants';\nimport { ADD_BOX } from '../../../../common/actions';\nimport { isSortableBox } from '../../../../common/utils';\nimport Dali from './../../../../core/main';\nimport i18n from 'i18next';\n\nrequire('./_daliBoxSortable.scss');\n\n/**\n * DaliBoxSortabe Component\n * @desc It is a special kind of DaliBox that is automatically added when a document is created. It cannot be moved or resized and it takes up the whole width of the page. It has different 'rows', named SortableContainers, where plugins are displayed, that can be sorted.\n */\nexport default class DaliBoxSortable extends Component {\n    /**\n     * Constructor\n     * @param props React component props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{alert: null}}\n         */\n        this.state = {\n            alert: null,\n        };\n    }\n    /**\n     * Renders React Component\n     * @returns {code} React rendered component\n     */\n    render() {\n        let box = this.props.boxes[this.props.id];\n        return (\n            <div className=\"daliBoxSortable\"\n                onClick={e => {\n                    if(box.children.length !== 0) {\n                        this.props.onBoxSelected(this.props.id);\n                    }\n                    e.stopPropagation();\n                }}>\n                <div ref=\"sortableContainer\"\n                    className={(this.props.id === this.props.boxSelected && box.children.length > 0) ? ' selectedBox sortableContainerBox' : ' sortableContainerBox'}\n                    style={{\n                        position: 'relative',\n                        boxSizing: 'border-box',\n                    }}>\n                    {this.state.alert}\n                    {box.children.map((idContainer, index)=> {\n                        let container = box.sortableContainers[idContainer];\n                        return (<div key={index}\n                            className={\"daliBoxSortableContainer pos_relative \" + container.style.className}\n                            data-id={idContainer}\n                            id={idContainer}\n                            ref={idContainer}\n                            style={\n                                Object.assign({}, {\n                                    height: container.height === 'auto' ? container.height : container.height + 'px',\n                                }, container.style)\n                            }>\n                            <div className=\"disp_table width100 height100\">\n                                {container.colDistribution.map((col, i) => {\n                                    if (container.cols[i]) {\n                                        return (<div key={i}\n                                            className=\"colDist-i height100 disp_table_cell vert_al_top\"\n                                            style={{ width: col + \"%\" }}>\n                                            {container.cols[i].map((row, j) => {\n                                                return (<div key={j}\n                                                    className=\"colDist-j width100 pos_relative\"\n                                                    style={{ height: row + \"%\" }}\n                                                    ref={e => {\n                                                        if(e !== null) {\n                                                            this.configureDropZone(\n                                                                ReactDOM.findDOMNode(e),\n                                                                \"cell\",\n                                                                \".rib, .dnd\" + idContainer,\n                                                                {\n                                                                    idContainer: idContainer,\n                                                                    i: i,\n                                                                    j: j,\n                                                                }\n                                                            );\n                                                        }\n                                                    }}>\n                                                    {container.children.map((idBox, ind) => {\n                                                        if (this.props.boxes[idBox].col === i && this.props.boxes[idBox].row === j) {\n                                                            return (<DaliBox id={idBox}\n                                                                key={ind}\n                                                                boxes={this.props.boxes}\n                                                                boxSelected={this.props.boxSelected}\n                                                                boxLevelSelected={this.props.boxLevelSelected}\n                                                                containedViews={this.props.containedViews}\n                                                                containedViewSelected={this.props.containedViewSelected}\n                                                                toolbars={this.props.toolbars}\n                                                                lastActionDispatched={this.props.lastActionDispatched}\n                                                                addMarkShortcut={this.props.addMarkShortcut}\n                                                                deleteMarkCreator={this.props.deleteMarkCreator}\n                                                                markCreatorId={this.props.markCreatorId}\n                                                                onBoxAdded={this.props.onBoxAdded}\n                                                                onBoxSelected={this.props.onBoxSelected}\n                                                                onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                                                                onBoxMoved={this.props.onBoxMoved}\n                                                                onBoxResized={this.props.onBoxResized}\n                                                                onBoxDropped={this.props.onBoxDropped}\n                                                                onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                                                                onBoxModalToggled={this.props.onBoxModalToggled}\n                                                                onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                                                                onSortableContainerResized={this.props.onSortableContainerResized}\n                                                                onTextEditorToggled={this.props.onTextEditorToggled}\n                                                                pageType={this.props.pageType}/>);\n\n                                                        } else if (ind === container.children.length - 1) {\n                                                            return (<span key={ind}><br/><br/></span>);\n                                                        }\n                                                        return null;\n                                                    })}\n                                                </div>);\n                                            })}\n                                        </div>);\n                                    }\n\n                                    return null;\n                                })}\n                            </div>\n\n                            <div className=\"sortableMenu width100 over_hidden\">\n                                <div className=\"iconsOverBar float_left pos_absolute bottom0\">\n                                    <OverlayTrigger placement=\"top\" overlay={\n                                        <Tooltip id=\"deleteTooltip\">{i18n.t('Reorder')}\n                                        </Tooltip>}>\n                                        <i className=\"material-icons drag-handle btnOverBar\">swap_vert</i>\n                                    </OverlayTrigger>\n\n                                    <OverlayTrigger trigger={[\"focus\"]} placement=\"top\" overlay={\n                                        <Popover id=\"popov\" title={i18n.t(\"delete_container\")}>\n                                            <i style={{ color: 'yellow', fontSize: '13px', padding: '0 5px' }} className=\"material-icons\">warning</i>\n                                            {\n                                                i18n.t(\"messages.delete_container\")\n                                            }\n                                            <br/>\n                                            <br/>\n                                            <Button className=\"popoverButton\"\n                                                style={{ float: 'right' }}\n                                                onClick={e => {\n                                                    this.props.onSortableContainerDeleted(idContainer, box.id);\n                                                    e.stopPropagation();\n                                                }}>\n                                                {i18n.t(\"Accept\")}\n                                            </Button>\n                                            <Button className=\"popoverButton\"\n                                                style={{ float: 'right' }} >\n                                                {i18n.t(\"Cancel\")}\n                                            </Button>\n                                        </Popover>}>\n                                        <OverlayTrigger placement=\"top\" overlay={\n                                            <Tooltip id=\"deleteTooltip\">{i18n.t('delete')}\n                                            </Tooltip>}>\n                                            <Button className=\"material-icons delete-sortable btnOverBar\">delete</Button>\n                                        </OverlayTrigger>\n                                    </OverlayTrigger>\n\n                                </div>\n\n                            </div>\n                        </div>);\n                    })}\n                </div>\n\n                <div className=\"dragContentHere\"\n                    onClick={e => {\n                        this.props.onBoxSelected(-1);\n                        e.stopPropagation();}}>{i18n.t(\"messages.drag_content\")}\n                </div>\n\n            </div>\n        );\n    }\n\n    /**\n     * After component updates\n     * Sets up interact resizable features\n     * @param prevProps React previous props\n     * @param prevState React previous state\n     */\n    componentDidUpdate(prevProps, prevState) {\n        this.props.boxes[this.props.id].children.map(id => {\n            this.configureResizable(this.refs[id]);\n        });\n    }\n    /**\n     * After component mounts\n     * Sets up interact sortable and resizable features\n     */\n    componentDidMount() {\n        this.configureDropZone(ReactDOM.findDOMNode(this), \"newContainer\", \".rib\");\n        this.configureDropZone(\".daliBoxSortableContainer\", \"existingContainer\", \".rib\");\n\n        this.props.boxes[this.props.id].children.map(id => {\n            this.configureResizable(this.refs[id]);\n        });\n\n        let list = jQuery(this.refs.sortableContainer);\n        list.sortable({\n            handle: '.drag-handle',\n            stop: (event, ui) => {\n                let indexes = [];\n                let children = list[0].children;\n                for (let i = 0; i < children.length; i++) {\n                    indexes.push(children[i].getAttribute(\"data-id\"));\n                }\n                if (indexes.length !== 0) {\n                    this.props.onSortableContainerReordered(indexes, this.props.id);\n                }\n                list.sortable('cancel');\n            },\n        });\n    }\n\n    /**\n     * Sets up interact resizable features.\n     * @param item Node that will be made resizable\n     */\n    configureResizable(item) {\n        interact(item).resizable({\n            enabled: this.props.id === this.props.boxSelected && item.style.height !== \"auto\",\n            edges: { left: false, right: false, bottom: true, top: false },\n            autoScroll: {\n                container: document.getElementById('canvas'),\n                margin: 50,\n                distance: 0,\n                interval: 0,\n            },\n            onmove: (event) => {\n                event.target.style.height = event.rect.height + 'px';\n            },\n            onend: (event) => {\n                this.props.onSortableContainerResized(event.target.getAttribute(\"data-id\"), this.props.id, parseInt(event.target.style.height, 10));\n            },\n        });\n    }\n\n    /**\n     * Sets up interact dropzone features\n     * @param node Node that accepts dragged items\n     * @param dropArea Denomination of the dropArea (cell, newContainer, existingContainer)\n     * @param selector Selector of the elements accepted in the dropzone\n     * @param extraParams Additional info, such as row and column\n     */\n    configureDropZone(node, dropArea, selector, extraParams) {\n        interact(node).dropzone({\n            accept: selector,\n            overlap: 'pointer',\n            ondropactivate: function(e) {\n                e.target.classList.add('drop-active');\n            },\n            ondragenter: function(e) {\n                e.target.classList.add(\"drop-target\");\n            },\n            ondragleave: function(e) {\n                e.target.classList.remove(\"drop-target\");\n            },\n            ondrop: function(e) {\n\n                if (dropArea === 'cell') {\n                    // If element dragged is coming from PluginRibbon, create a new DaliBox\n                    if (e.relatedTarget.className.indexOf(\"rib\") !== -1) {\n                        // Check if there is a limit in the number of plugin instances\n                        if (isSortableBox(this.props.id) && Dali.Plugins.get(e.relatedTarget.getAttribute(\"name\")).getConfig().limitToOneInstance) {\n                            for (let child in this.props.boxes) {\n                                if (!isSortableBox(child) && this.props.boxes[child].parent === this.props.id && this.props.toolbars[child].config.name === e.relatedTarget.getAttribute(\"name\")) {\n                                    let alert = (<Alert className=\"pageModal\"\n                                        show\n                                        hasHeader\n                                        backdrop={false}\n                                        title={ <span><i className=\"material-icons\" style={{ fontSize: '14px', marginRight: '5px' }}>warning</i>{ i18n.t(\"messages.alert\") }</span> }\n                                        closeButton onClose={()=>{this.setState({ alert: null });}}>\n                                        <span> {i18n.t('messages.instance_limit')} </span>\n                                    </Alert>);\n                                    this.setState({ alert: alert });\n                                    e.dragEvent.stopPropagation();\n                                    return;\n                                }\n                            }\n                        }\n                        let initialParams = {\n                            parent: this.props.id,\n                            container: extraParams.idContainer,\n                            col: extraParams.i,\n                            row: extraParams.j,\n                        };\n                        Dali.Plugins.get(e.relatedTarget.getAttribute(\"name\")).getConfig().callback(initialParams, ADD_BOX);\n                    } else {\n                        let boxDragged = this.props.boxes[this.props.boxSelected];\n                        // If box being dragged is dropped in a different column or row, change it's value\n                        if (boxDragged && (boxDragged.col !== extraParams.i || boxDragged.row !== extraParams.j)) {\n                            this.props.onBoxDropped(this.props.boxSelected, extraParams.j, extraParams.i);\n                        }\n\n                        let clone = document.getElementById('clone');\n                        clone.parentElement.removeChild(clone);\n                    }\n                } else {\n                    let initialParams = {};\n                    if (dropArea === 'existingContainer') {\n                        initialParams = {\n                            parent: this.props.id,\n                            container: e.target.getAttribute(\"data-id\"),\n                        };\n                    } else if (dropArea === 'newContainer') {\n                        initialParams = {\n                            parent: this.props.id,\n                            container: ID_PREFIX_SORTABLE_CONTAINER + Date.now(),\n                        };\n                    }\n\n                    Dali.Plugins.get(e.relatedTarget.getAttribute(\"name\")).getConfig().callback(initialParams, ADD_BOX);\n                    e.dragEvent.stopPropagation();\n                }\n            }.bind(this),\n            ondropdeactivate: function(e) {\n                e.target.classList.remove('drop-active');\n                e.target.classList.remove(\"drop-target\");\n            },\n        });\n    }\n\n    /**\n     * Before component unmounts\n     * Unset interact listeners\n     */\n    componentWillUnmount() {\n        interact(ReactDOM.findDOMNode(this)).unset();\n        interact(\".daliBoxSortableContainer\").unset();\n\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 24,
    "kind": "class",
    "name": "DaliBoxSortable",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx",
    "importStyle": "DaliBoxSortable",
    "description": "It is a special kind of DaliBox that is automatically added when a document is created. It cannot be moved or resized and it takes up the whole width of the page. It has different 'rows', named SortableContainers, where plugins are displayed, that can be sorted.",
    "lineNumber": 19,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 25,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React component props"
      }
    ]
  },
  {
    "__docId__": 26,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "{alert: null}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code} React rendered component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": "React rendered component"
    },
    "params": []
  },
  {
    "__docId__": 28,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#componentDidUpdate",
    "access": "public",
    "description": "After component updates\nSets up interact resizable features",
    "lineNumber": 191,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "React previous props"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "React previous state"
      }
    ],
    "return": null
  },
  {
    "__docId__": 29,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#componentDidMount",
    "access": "public",
    "description": "After component mounts\nSets up interact sortable and resizable features",
    "lineNumber": 200,
    "params": [],
    "return": null
  },
  {
    "__docId__": 30,
    "kind": "method",
    "name": "configureResizable",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#configureResizable",
    "access": "public",
    "description": "Sets up interact resizable features.",
    "lineNumber": 229,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "Node that will be made resizable"
      }
    ],
    "return": null
  },
  {
    "__docId__": 31,
    "kind": "method",
    "name": "configureDropZone",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#configureDropZone",
    "access": "public",
    "description": "Sets up interact dropzone features",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Node that accepts dragged items"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dropArea",
        "description": "Denomination of the dropArea (cell, newContainer, existingContainer)"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selector",
        "description": "Selector of the elements accepted in the dropzone"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "extraParams",
        "description": "Additional info, such as row and column"
      }
    ],
    "return": null
  },
  {
    "__docId__": 32,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_box_sortable/DaliBoxSortable.jsx~DaliBoxSortable#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts\nUnset interact listeners",
    "lineNumber": 337,
    "params": [],
    "return": null
  },
  {
    "__docId__": 33,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx",
    "content": "import React, { Component } from 'react';\nimport DaliCanvasSli from '../dali_canvas_sli/DaliCanvasSli';\nimport DaliCanvasDoc from '../dali_canvas_doc/DaliCanvasDoc';\nimport { REORDER_SORTABLE_CONTAINER, REORDER_BOXES } from '../../../../common/actions';\nimport { isSlide } from '../../../../common/utils';\n\nrequire('./_canvas.scss');\n\n/**\n * Container component to render documents or slides\n *\n */\nexport default class DaliCanvas extends Component {\n    /**\n     * Constructor\n     * @param props React component props\n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code} React rendered component\n     */\n    render() {\n        let canvasContent;\n        if (isSlide(this.props.navItemSelected.type)) {\n            canvasContent = <DaliCanvasSli\n                addMarkShortcut={this.props.addMarkShortcut}\n                boxes={this.props.boxes}\n                boxSelected={this.props.boxSelected}\n                boxLevelSelected={this.props.boxLevelSelected}\n                canvasRatio={this.props.canvasRatio}\n                containedViews={this.props.containedViews}\n                containedViewSelected={this.props.containedViewSelected}\n                deleteMarkCreator={this.props.deleteMarkCreator}\n                fromCV={false}\n                lastActionDispatched={this.props.lastActionDispatched}\n                markCreatorId={this.props.markCreatorId}\n                onBoxAdded={this.props.onBoxAdded}\n                onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                onBoxSelected={this.props.onBoxSelected}\n                onBoxMoved={this.props.onBoxMoved}\n                onBoxResized={this.props.onBoxResized}\n                onBoxDropped={this.props.onBoxDropped}\n                onBoxDeleted={this.props.onBoxDeleted}\n                onMarkCreatorToggled={this.props.onMarkCreatorToggled}\n                onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                onTextEditorToggled={this.props.onTextEditorToggled}\n                onContainedViewSelected={this.props.onContainedViewSelected}\n                navItems={this.props.navItems}\n                navItemSelected={this.props.navItemSelected}\n                title={this.props.title}\n                titleModeToggled={this.props.titleModeToggled}\n                toolbars={this.props.toolbars}\n                showCanvas={this.props.showCanvas}\n            />;\n        }else{\n            canvasContent = <DaliCanvasDoc\n                addMarkShortcut={this.props.addMarkShortcut}\n                boxes={this.props.boxes}\n                boxSelected={this.props.boxSelected}\n                boxLevelSelected={this.props.boxLevelSelected}\n                containedViews={this.props.containedViews}\n                containedViewSelected={this.props.containedViewSelected}\n                deleteMarkCreator={this.props.deleteMarkCreator}\n                fromCV={false}\n                lastActionDispatched={this.props.lastActionDispatched}\n                markCreatorId={this.props.markCreatorId}\n                onMarkCreatorToggled={this.props.onMarkCreatorToggled}\n                onBoxAdded={this.props.onBoxAdded}\n                onBoxSelected={this.props.onBoxSelected}\n                onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                onBoxMoved={this.props.onBoxMoved}\n                onBoxResized={this.props.onBoxResized}\n                onSortableContainerResized={this.props.onSortableContainerResized}\n                onSortableContainerDeleted={this.props.onSortableContainerDeleted}\n                onSortableContainerReordered={this.props.onSortableContainerReordered}\n                onContainedViewSelected={this.props.onContainedViewSelected}\n                onBoxDropped={this.props.onBoxDropped}\n                onBoxDeleted={this.props.onBoxDeleted}\n                onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                onTextEditorToggled={this.props.onTextEditorToggled}\n                onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                navItems={this.props.navItems}\n                navItemSelected={this.props.navItemSelected}\n                toolbars={this.props.toolbars}\n                showCanvas={this.props.showCanvas}\n                titleModeToggled={this.props.titleModeToggled}\n                title={this.props.title}\n            />;\n        }\n\n        return (\n            canvasContent\n        );\n    }\n\n    /**\n     * Before component receives props\n     * Scrolls to top when the user changes to a different page\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        if (this.props.navItemSelected.id !== nextProps.navItemSelected.id) {\n            document.getElementById('maincontent').scrollTop = 0;\n        }\n    }\n\n    /**\n     * After component updates\n     * Fixes bug when reordering dalibox sortable CKEDITOR doesn't update otherwise\n     * @param prevProps React previous props\n     * @param prevState React previous state\n     */\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.lastActionDispatched.type === REORDER_SORTABLE_CONTAINER || this.props.lastActionDispatched.type === REORDER_BOXES) {\n            for (let instance in CKEDITOR.instances) {\n                CKEDITOR.instances[instance].destroy();\n            }\n            CKEDITOR.inlineAll();\n            for (let editor in CKEDITOR.instances) {\n                if (this.props.toolbars[editor].state.__text) {\n                    CKEDITOR.instances[editor].setData(decodeURI(this.props.toolbars[editor].state.__text));\n                }\n            }\n        }\n    }\n\n}\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 34,
    "kind": "class",
    "name": "DaliCanvas",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx",
    "importStyle": "DaliCanvas",
    "description": "Container component to render documents or slides",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 35,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React component props"
      }
    ]
  },
  {
    "__docId__": 36,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code} React rendered component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": "React rendered component"
    },
    "params": []
  },
  {
    "__docId__": 37,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas#componentWillReceiveProps",
    "access": "public",
    "description": "Before component receives props\nScrolls to top when the user changes to a different page",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 38,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas/DaliCanvas.jsx~DaliCanvas#componentDidUpdate",
    "access": "public",
    "description": "After component updates\nFixes bug when reordering dalibox sortable CKEDITOR doesn't update otherwise",
    "lineNumber": 117,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prevProps",
        "description": "React previous props"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prevState",
        "description": "React previous state"
      }
    ],
    "return": null
  },
  {
    "__docId__": 39,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx",
    "content": "import React, { Component } from 'react';\nimport DaliBox from '../dali_box/DaliBox';\nimport DaliBoxSortable from '../dali_box_sortable/DaliBoxSortable';\nimport DaliShortcuts from '../dali_shortcuts/DaliShortcuts';\nimport { Col } from 'react-bootstrap';\nimport DaliHeader from '../dali_header/DaliHeader';\nimport Dali from './../../../../core/main';\nimport { isSortableBox } from '../../../../common/utils';\n\n/**\n * DaliCanvasDoc component\n * Canvas component to display documents\n */\nexport default class DaliCanvasDoc extends Component {\n    /**\n     * Constructor\n     * @param props React component props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{showTitle: boolean Whether the header should be shown or not}}\n         */\n        this.state = {\n            showTitle: false,\n        };\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code}\n     */\n    render() {\n        let titles = [];\n        let itemSelected = this.props.fromCV ? this.props.containedViewSelected : this.props.navItemSelected;\n        if (itemSelected.id !== 0) {\n            titles.push(itemSelected.name);\n            if (!this.props.fromCV) {\n                let parent = itemSelected.parent;\n                while (parent !== 0) {\n                    titles.push(this.props.navItems[parent].name);\n                    parent = this.props.navItems[parent].parent;\n                }\n            }\n            titles.reverse();\n        }\n\n        let maincontent = document.getElementById(this.props.fromCV ? \"contained_maincontent\" : \"maincontent\");\n        let actualHeight;\n        if (maincontent) {\n            actualHeight = parseInt(maincontent.scrollHeight, 10);\n            actualHeight = (parseInt(maincontent.clientHeight, 10) < actualHeight) ? (actualHeight) + 'px' : '100%';\n        }\n\n        let overlayHeight = actualHeight ? actualHeight : '100%';\n        /* let isSection = this.props.navItemSelected.id.toString().indexOf('se') !== -1;\n        let contentAllowedInSections = Dali.Config.sections_have_content;\n        let showCanvas = (!isSection || (isSection && contentAllowedInSections));*/\n        let boxes = itemSelected ? itemSelected.boxes : [];\n        let show = itemSelected && itemSelected.id !== 0;\n        return (\n            <Col id={this.props.fromCV ? 'containedCanvas' : 'canvas'} md={12} xs={12} className=\"canvasDocClass\"\n                style={{ display: this.props.containedViewSelected !== 0 && !this.props.fromCV ? 'none' : 'initial' }}>\n\n                <div className=\"scrollcontainer\" style={{ backgroundColor: show ? 'white' : 'transparent', display: show ? 'block' : 'none' }}>\n                    <DaliHeader titles={titles}\n                        showButtons={this.state.showTitle}\n                        onShowTitle={()=>this.setState({ showTitle: true })}\n                        onBoxSelected={this.props.onBoxSelected}\n                        courseTitle={this.props.title}\n                        title={itemSelected.name}\n                        navItem={this.props.navItemSelected}\n                        navItems={this.props.navItems}\n                        containedView={this.props.containedViewSelected}\n                        containedViews={this.props.containedViews}\n                        titleModeToggled={this.props.titleModeToggled}\n                        onUnitNumberChanged={this.props.onUnitNumberChanged}\n                        toolbars={this.props.toolbars}\n                        boxes={this.props.boxes}\n                        showButton\n                    />\n                    <div className=\"outter canvaseditor\" style={{ display: show ? 'block' : 'none' }}>\n                        {/*\n                    {this.props.fromCV ?  (<button className=\"btnOverBar cvBackButton\" style={{margin: \"10px 0px 0px 10px\"}}\n                             onClick={e => {\n                                 this.props.onContainedViewSelected(0);\n                                 e.stopPropagation();\n                             }}><i className=\"material-icons\">undo</i></button>):(<br/>)}\n                     */}\n\n                        <div id={this.props.fromCV ? 'airlayer_cv' : 'airlayer'}\n                            className={'doc_air'}\n                            style={{ visibility: (show ? 'visible' : 'hidden') }}>\n\n                            <div id={this.props.fromCV ? \"contained_maincontent\" : \"maincontent\"}\n                                onClick={e => {\n                                    this.props.onBoxSelected(-1);\n                                    this.setState({ showTitle: false });\n                                    e.stopPropagation();\n                                }}\n                                className={'innercanvas doc'}\n                                style={{ visibility: (show ? 'visible' : 'hidden') }}>\n\n                                <br/>\n\n                                <div id={this.props.fromCV ? \"contained_canvas_boxes\" : \"canvas_boxes\"}\n                                    style={{\n                                        width: \"100%\",\n                                        background: \"black\",\n                                        height: overlayHeight,\n                                        position: \"absolute\",\n                                        top: 0,\n                                        opacity: 0.4,\n                                        display: (this.props.boxLevelSelected > 0) ? \"block\" : \"none\",\n                                        visibility: (this.props.boxLevelSelected > 0) ? \"visible\" : \"collapse\",\n                                    }} />\n\n                                {boxes.map(id => {\n                                    let box = boxes[id];\n                                    if (!isSortableBox(id)) {\n                                        return <DaliBox key={id}\n                                            id={id}\n                                            addMarkShortcut={this.props.addMarkShortcut}\n                                            boxes={this.props.boxes}\n                                            boxSelected={this.props.boxSelected}\n                                            boxLevelSelected={this.props.boxLevelSelected}\n                                            containedViews={this.props.containedViews}\n                                            containedViewSelected={this.props.containedViewSelected}\n                                            deleteMarkCreator={this.props.deleteMarkCreator}\n                                            lastActionDispatched={this.props.lastActionDispatched}\n                                            markCreatorId={this.props.markCreatorId}\n                                            onBoxAdded={this.props.onBoxAdded}\n                                            onBoxSelected={this.props.onBoxSelected}\n                                            onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                                            onBoxMoved={this.props.onBoxMoved}\n                                            onBoxResized={this.props.onBoxResized}\n                                            onSortableContainerResized={this.props.onSortableContainerResized}\n                                            onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                                            onBoxDropped={this.props.onBoxDropped}\n                                            onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                                            onBoxModalToggled={this.props.onBoxModalToggled}\n                                            onTextEditorToggled={this.props.onTextEditorToggled}\n                                            toolbars={this.props.toolbars}\n                                            pageType={itemSelected.type || 0}/>;\n                                    }\n                                    return <DaliBoxSortable key={id}\n                                        id={id}\n                                        addMarkShortcut={this.props.addMarkShortcut}\n                                        boxes={this.props.boxes}\n                                        boxSelected={this.props.boxSelected}\n                                        boxLevelSelected={this.props.boxLevelSelected}\n                                        containedViews={this.props.containedViews}\n                                        containedViewSelected={this.props.containedViewSelected}\n                                        toolbars={this.props.toolbars}\n                                        lastActionDispatched={this.props.lastActionDispatched}\n                                        deleteMarkCreator={this.props.deleteMarkCreator}\n                                        markCreatorId={this.props.markCreatorId}\n                                        onBoxAdded={this.props.onBoxAdded}\n                                        onBoxSelected={this.props.onBoxSelected}\n                                        onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                                        onBoxMoved={this.props.onBoxMoved}\n                                        onBoxResized={this.props.onBoxResized}\n                                        onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                                        onSortableContainerResized={this.props.onSortableContainerResized}\n                                        onSortableContainerDeleted={this.props.onSortableContainerDeleted}\n                                        onSortableContainerReordered={this.props.onSortableContainerReordered}\n                                        onBoxDropped={this.props.onBoxDropped}\n                                        onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                                        onBoxModalToggled={this.props.onBoxModalToggled}\n                                        onTextEditorToggled={this.props.onTextEditorToggled}\n                                        pageType={itemSelected.type || 0}/>;\n\n                                })}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <DaliShortcuts\n                    box={this.props.boxes[this.props.boxSelected]}\n                    containedViewSelected={this.props.containedViewSelected}\n                    isContained={this.props.fromCV}\n                    onTextEditorToggled={this.props.onTextEditorToggled}\n                    onBoxResized={this.props.onBoxResized}\n                    onBoxDeleted={this.props.onBoxDeleted}\n                    pointerEventsCallback={this.props.toolbars[this.props.boxSelected] && this.props.toolbars[this.props.boxSelected].config && this.props.toolbars[this.props.boxSelected].config.name && Dali.Plugins.get(this.props.toolbars[this.props.boxSelected].config.name) ? Dali.Plugins.get(this.props.toolbars[this.props.boxSelected].config.name).pointerEventsCallback : null}\n                    onMarkCreatorToggled={this.props.onMarkCreatorToggled}\n                    toolbar={this.props.toolbars[this.props.boxSelected]}/>\n            </Col>\n        );\n    }\n/*\n    componentWillUnmount() {\n        interact(ReactDOM.findDOMNode(this)).unset();\n    }\n\n    componentDidMount() {\n\n        interact(ReactDOM.findDOMNode(this)).dropzone({\n            accept: '.floatingDaliBox',\n            overlap: 'pointer',\n            ondropactivate: function (event) {\n                event.target.classList.add('drop-active');\n            },\n            ondragenter: function (event) {\n                event.target.classList.add(\"drop-target\");\n            },\n            ondragleave: function (event) {\n                event.target.classList.remove(\"drop-target\");\n            },\n            ondrop: function (event) {\n                let position = {\n                    x: (event.dragEvent.clientX - event.target.getBoundingClientRect().left - document.getElementById('maincontent').offsetLeft)*100/event.target.parentElement.offsetWidth + \"%\",\n                    y: (event.dragEvent.clientY - event.target.getBoundingClientRect().top + document.getElementById('maincontent').scrollTop) + 'px',\n                    type: 'absolute'\n                };\n                let initialParams = {\n                    parent: this.props.fromCV ? this.props.containedViewSelected.id:this.props.navItemSelected.id,\n                    container: 0,\n                    position: position\n                };\n                Dali.Plugins.get(event.relatedTarget.getAttribute(\"name\")).getConfig().callback(initialParams, ADD_BOX);\n                event.dragEvent.stopPropagation();\n            }.bind(this),\n            ondropdeactivate: function (event) {\n                event.target.classList.remove('drop-active');\n                event.target.classList.remove(\"drop-target\");\n            }\n        });\n    }\n*/\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 40,
    "kind": "class",
    "name": "DaliCanvasDoc",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx~DaliCanvasDoc",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx",
    "importStyle": "DaliCanvasDoc",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 41,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx~DaliCanvasDoc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx~DaliCanvasDoc#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React component props"
      }
    ]
  },
  {
    "__docId__": 42,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx~DaliCanvasDoc",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx~DaliCanvasDoc#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "{showTitle: boolean Whether the header should be shown or not}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx~DaliCanvasDoc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_doc/DaliCanvasDoc.jsx~DaliCanvasDoc#render",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport DaliBox from '../dali_box/DaliBox';\nimport DaliShortcuts from '../dali_shortcuts/DaliShortcuts';\nimport Alert from './../../common/alert/Alert';\nimport { Col, Button } from 'react-bootstrap';\nimport DaliHeader from '../dali_header/DaliHeader';\nimport interact from 'interact.js';\nimport { ADD_BOX } from '../../../../common/actions';\nimport { isSortableBox } from '../../../../common/utils';\nimport { aspectRatio } from '../../../../common/common_tools';\nimport Dali from './../../../../core/main';\nimport ReactResizeDetector from 'react-resize-detector';\nimport i18n from 'i18next';\n\n/**\n * DaliCanvasSli component\n * Canvas component to display slides\n */\nexport default class DaliCanvasSli extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{showTitle: boolean, alert: null}}\n         */\n        this.state = {\n            showTitle: false,\n            alert: null,\n        };\n    }\n\n    /**\n     * Renders React component\n     * @returns {code}\n     */\n    render() {\n        let itemSelected = this.props.fromCV ? this.props.containedViewSelected : this.props.navItemSelected;\n        let titles = [];\n        if (itemSelected.id !== 0) {\n            titles.push(itemSelected.name);\n            if (!this.props.fromCV) {\n                let parent = itemSelected.parent;\n                while (parent !== 0) {\n                    titles.push(this.props.navItems[parent].name);\n                    parent = this.props.navItems[parent].parent;\n                }\n            }\n            titles.reverse();\n        }\n\n        let maincontent = document.getElementById(this.props.fromCV ? \"contained_maincontent\" : \"maincontent\");\n        let actualHeight;\n        if (maincontent) {\n            actualHeight = parseInt(maincontent.scrollHeight, 10);\n            actualHeight = (parseInt(maincontent.clientHeight, 10) < actualHeight) ? (actualHeight) + 'px' : '100%';\n        }\n\n        let overlayHeight = actualHeight ? actualHeight : '100%';\n        let boxes = itemSelected.boxes;\n        return (\n            <Col id={this.props.fromCV ? 'containedCanvas' : 'canvas'} md={12} xs={12} className=\"canvasSliClass\"\n                style={{ display: this.props.containedViewSelected !== 0 && !this.props.fromCV ? 'none' : 'initial' }}>\n\n                <div id={this.props.fromCV ? 'airlayer_cv' : 'airlayer'}\n                    className={'slide_air'}\n                    style={{ margin: 'auto', visibility: (this.props.showCanvas ? 'visible' : 'hidden') }}>\n\n                    <div id={this.props.fromCV ? \"contained_maincontent\" : \"maincontent\"}\n                        ref=\"slideDropZone\"\n                        onClick={e => {\n                            this.props.onBoxSelected(-1);\n                            this.setState({ showTitle: false });\n                            e.stopPropagation();\n                        }}\n                        className={'innercanvas sli'}\n                        style={{ visibility: (this.props.showCanvas ? 'visible' : 'hidden') }}>\n                        {this.state.alert}\n                        {/* <svg width=\"100%\" height=\"100%\" style={{position:'absolute', top:0, zIndex: 0}} xmlns=\"http://www.w3.org/2000/svg\">\n                           <defs>\n                             <pattern id=\"smallGrid\" width=\"10\" height=\"10\" patternUnits=\"userSpaceOnUse\">\n                               <path d=\"M 10 0 L 0 0 0 10\" fill=\"none\" stroke=\"gray\" strokeWidth=\"0.5\"/>\n                             </pattern>\n                             <pattern id=\"grid\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\">\n                               <rect width=\"100\" height=\"100\" fill=\"url(#smallGrid)\"/>\n                               <path d=\"M 100 0 L 0 0 0 100\" fill=\"none\" stroke=\"gray\" strokeWidth=\"1\"/>\n                             </pattern>\n                           </defs>\n\n                           <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n                         </svg>   */}\n                        <DaliHeader titles={titles}\n                            showButtons={this.state.showTitle}\n                            onShowTitle={()=>this.setState({ showTitle: true })}\n                            onBoxSelected={this.props.onBoxSelected}\n                            courseTitle={this.props.title}\n                            title={itemSelected.name}\n                            navItem={this.props.navItemSelected}\n                            navItems={this.props.navItems}\n                            containedView={this.props.containedViewSelected}\n                            containedViews={this.props.containedViews}\n                            titleModeToggled={this.props.titleModeToggled}\n                            onUnitNumberChanged={this.props.onUnitNumberChanged}\n                            toolbars={this.props.toolbars}\n                            boxes={this.props.boxes}\n                            showButton\n                        />\n\n                        {/* {this.props.fromCV ?  (<button className=\"btnOverBar cvBackButton\" style={{margin: \"10px 0px 0px 10px\"}}\n                                 onClick={e => {\n                                     this.props.onContainedViewSelected(0);\n                                     e.stopPropagation();\n                                 }}><i className=\"material-icons\">undo</i></button>):(<br/>)}*/}\n                        <br/>\n\n                        <div style={{\n                            width: \"100%\",\n                            background: \"black\",\n                            height: overlayHeight,\n                            position: \"absolute\",\n                            top: 0,\n                            opacity: 0.4,\n                            display: (this.props.boxLevelSelected > 0) ? \"block\" : \"none\",\n                            visibility: (this.props.boxLevelSelected > 0) ? \"visible\" : \"collapse\",\n                        }} />\n\n                        {boxes.map(id => {\n                            let box = boxes[id];\n                            return <DaliBox key={id}\n                                id={id}\n                                addMarkShortcut={this.props.addMarkShortcut}\n                                boxes={this.props.boxes}\n                                boxSelected={this.props.boxSelected}\n                                boxLevelSelected={this.props.boxLevelSelected}\n                                containedViews={this.props.containedViews}\n                                containedViewSelected={this.props.containedViewSelected}\n                                toolbars={this.props.toolbars}\n                                lastActionDispatched={this.props.lastActionDispatched}\n                                deleteMarkCreator={this.props.deleteMarkCreator}\n                                markCreatorId={this.props.markCreatorId}\n                                onBoxAdded={this.props.onBoxAdded}\n                                onBoxSelected={this.props.onBoxSelected}\n                                onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                                onBoxMoved={this.props.onBoxMoved}\n                                onBoxResized={this.props.onBoxResized}\n                                onSortableContainerResized={this.props.onSortableContainerResized}\n                                onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                                onBoxDropped={this.props.onBoxDropped}\n                                onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                                onBoxModalToggled={this.props.onBoxModalToggled}\n                                onTextEditorToggled={this.props.onTextEditorToggled}\n                                pageType={itemSelected.type || 0}\n                            />;\n\n                        })}\n                        {/* A JSX comment\n                        {boxes.length === 0 ? (<div className=\"dragContentHere\" style={{backgroundColor: 'transparent', border:0}}>{i18n.t(\"messages.drag_content\")}</div>):(<span></span>)}\n                        */}\n                    </div>\n                    <ReactResizeDetector handleWidth handleHeight onResize={(e)=>{aspectRatio(this.props.canvasRatio, this.props.fromCV ? 'airlayer_cv' : 'airlayer', 'canvas');\n                    }} />\n                </div>\n                <DaliShortcuts\n                    box={this.props.boxes[this.props.boxSelected]}\n                    containedViewSelected={this.props.containedViewSelected}\n                    isContained={this.props.fromCV}\n                    onTextEditorToggled={this.props.onTextEditorToggled}\n                    onBoxResized={this.props.onBoxResized}\n                    onBoxDeleted={this.props.onBoxDeleted}\n                    pointerEventsCallback={this.props.toolbars[this.props.boxSelected] && this.props.toolbars[this.props.boxSelected].config && this.props.toolbars[this.props.boxSelected].config.name && Dali.Plugins.get(this.props.toolbars[this.props.boxSelected].config.name) ? Dali.Plugins.get(this.props.toolbars[this.props.boxSelected].config.name).pointerEventsCallback : null}\n                    onMarkCreatorToggled={this.props.onMarkCreatorToggled}\n                    toolbar={this.props.toolbars[this.props.boxSelected]}/>\n\n            </Col>\n        );\n    }\n\n    /**\n     * After component mounts\n     * Set up interact in order to enable dragging boxes\n     */\n    componentDidMount() {\n        interact(ReactDOM.findDOMNode(this.refs.slideDropZone)).dropzone({\n            accept: '.floatingDaliBox',\n            overlap: 'pointer',\n            ondropactivate: function(event) {\n                event.target.classList.add('drop-active');\n            },\n            ondragenter: function(event) {\n                event.target.classList.add(\"drop-target\");\n            },\n            ondragleave: function(event) {\n                event.target.classList.remove(\"drop-target\");\n            },\n            ondrop: function(event) {\n                if (Dali.Plugins.get(event.relatedTarget.getAttribute(\"name\")).getConfig().limitToOneInstance) {\n                    for (let child in this.props.boxes) {\n                        if (!isSortableBox(child) && this.props.boxes[child].parent === this.props.navItemSelected.id && this.props.toolbars[child].config.name === event.relatedTarget.getAttribute(\"name\")) {\n                            let alert = (<Alert className=\"pageModal\"\n                                show\n                                hasHeader\n                                backdrop={false}\n                                title={ <span><i className=\"material-icons\" style={{ fontSize: '14px', marginRight: '5px' }}>warning</i>{ i18n.t(\"messages.alert\") }</span> }\n                                closeButton onClose={()=>{this.setState({ alert: null });}}>\n                                <span> {i18n.t('messages.instance_limit')} </span>\n                            </Alert>);\n                            this.setState({ alert: alert });\n                            event.dragEvent.stopPropagation();\n                            return;\n                        }\n                    }\n                }\n                let mc = this.props.fromCV ? document.getElementById(\"contained_maincontent\") : document.getElementById('maincontent');\n                let al = this.props.fromCV ? document.getElementById('airlayer_cv') : document.getElementById('airlayer');\n                let position = {\n                    x: (event.dragEvent.clientX - event.target.getBoundingClientRect().left - mc.offsetLeft) * 100 / mc.offsetWidth + \"%\",\n                    y: (event.dragEvent.clientY - event.target.getBoundingClientRect().top + mc.scrollTop - parseFloat(al.style.marginTop)) * 100 / mc.offsetHeight + '%',\n                    type: 'absolute',\n                };\n                let initialParams = {\n                    parent: this.props.fromCV ? this.props.containedViewSelected.id : this.props.navItemSelected.id,\n                    container: 0,\n                    position: position,\n                };\n                Dali.Plugins.get(event.relatedTarget.getAttribute(\"name\")).getConfig().callback(initialParams, ADD_BOX);\n                event.dragEvent.stopPropagation();\n            }.bind(this),\n            ondropdeactivate: function(event) {\n                event.target.classList.remove('drop-active');\n                event.target.classList.remove(\"drop-target\");\n            },\n        });\n\n        aspectRatio(this.props.canvasRatio, this.props.fromCV ? 'airlayer_cv' : 'airlayer', 'canvas');\n        // window.addEventListener(\"resize\", aspectRatio);\n    }\n\n    /**\n     * Before component unmounts\n     * Unset interact\n     */\n    componentWillUnmount() {\n        // window.removeEventListener(\"resize\", aspectRatio);\n        interact(ReactDOM.findDOMNode(this.refs.slideDropZone)).unset();\n    }\n\n    /**\n     * Before component updates\n     * Set aspect ratio acccording to current window size\n     * @param nextProps\n     */\n    componentWillUpdate(nextProps) {\n        if (this.props.canvasRatio !== nextProps.canvasRatio) {\n            window.canvasRatio = nextProps.canvasRatio;\n            // window.removeEventListener(\"resize\", aspectRatio);\n            aspectRatio(this.props.canvasRatio, this.props.fromCV ? 'airlayer_cv' : 'airlayer', 'canvas');\n            // window.addEventListener(\"resize\", aspectRatio);\n        }\n\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 45,
    "kind": "class",
    "name": "DaliCanvasSli",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx",
    "importStyle": "DaliCanvasSli",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 46,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 47,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "{showTitle: boolean, alert: null}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli#render",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli#componentDidMount",
    "access": "public",
    "description": "After component mounts\nSet up interact in order to enable dragging boxes",
    "lineNumber": 186,
    "params": [],
    "return": null
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts\nUnset interact",
    "lineNumber": 246,
    "params": [],
    "return": null
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_canvas_sli/DaliCanvasSli.jsx~DaliCanvasSli#componentWillUpdate",
    "access": "public",
    "description": "Before component updates\nSet aspect ratio acccording to current window size",
    "lineNumber": 256,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 52,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx",
    "content": "import React, { Component } from 'react';\nimport { OverlayTrigger, Popover, Breadcrumb, BreadcrumbItem } from 'react-bootstrap';\nimport i18n from 'i18next';\nimport { isSortableBox, isCanvasElement, isContainedView } from '../../../../common/utils';\nrequire('./_daliHeader.scss');\n/**\n *  DaliHeaderComponent\n *  It shows the current page's title\n */\nexport default class DaliHeader extends Component {\n    /**\n     * Renders React Component\n     * @returns {code}\n     */\n    render() {\n        let titles = this.props.titles || [];\n        let navItem = this.props.containedView !== 0 ? this.props.containedView : this.props.navItem;\n        let currentStatus = (navItem.header) ? navItem.header.display : undefined;\n        let docTitle = navItem.name;\n        let subTitle = i18n.t('subtitle');\n        let pagenumber = this.props.navItem.unitNumber;\n\n        if (navItem !== undefined && navItem.id !== 0 && navItem.header) {\n            docTitle = navItem.header.elementContent.documentTitle !== \"\" && (navItem.header.elementContent.documentTitle !== navItem.name) ? navItem.header.elementContent.documentTitle : navItem.name;\n            subTitle = navItem.header.elementContent.documentSubTitle !== \"\" && (navItem.header.elementContent.documentSubTitle !== i18n.t('subtitle')) ? navItem.header.elementContent.documentSubTitle : i18n.t('subtitle');\n            pagenumber = navItem.header.elementContent.numPage !== \"\" && (navItem.header.elementContent.numPage !== navItem.unitNumber) ? navItem.header.elementContent.numPage : navItem.unitNumber;\n        }\n        let cvList = [];\n        if (this.props.containedView) {\n            for (let id in this.props.containedView.parent) {\n                // let par = this.props.containedView.parent[id];\n                if (this.props.toolbars[id]) {\n                    let el = this.props.boxes[id];\n                    let from = \"unknown\";\n                    if (isSortableBox(el.parent)) {\n                        let origin = this.props.boxes[el.parent].parent;\n                        from = isContainedView(origin) ? this.props.containedViews[origin].name : this.props.navItems[origin].name;\n                    } else if (isCanvasElement(el.parent)) {\n                        from = isContainedView(el.parent) ? this.props.containedViews[el.parent].name : this.props.navItems[el.parent].name;\n                    } else {\n                        break;\n                    }\n                    cvList.push(<span className=\"cvList\" key={id}><b>{this.props.toolbars[id].config.displayName}</b> { ' (' + from + ')'}</span>);\n                    // return this.props.toolbars[parent].config.displayName + \" from \" + this.props.navItems[this.props.boxes[parent]] || this.props.containedViews[this.props.boxes[parent]] || this.props.boxes[parent];\n\n                }\n            }\n        }\n        let content;\n        let unidad = \"\";\n        // breadcrumb\n        if(this.props.containedView === 0) {\n            if (currentStatus !== undefined) {\n                if (currentStatus.breadcrumb === 'reduced') {\n                    let titleList = this.props.titles;\n\n                    let actualTitle = titleList[titleList.length - 1];\n                    unidad = titleList[0];\n                    content = React.createElement(\"div\", { className: \"subheader\" },\n                        React.createElement(Breadcrumb, { style: { margin: 0, backgroundColor: 'inherit' } },\n                            titleList.map((item, index) => {\n                                if (index !== titleList.length) {\n                                    return React.createElement(BreadcrumbItem, { key: index }, item);\n                                }\n                                return null;\n                            })\n                        )\n                    );\n\n                } else if (currentStatus.breadcrumb === 'expanded') {\n                    let titlesComponents = \"\";\n                    let titles_length = this.props.titles.length;\n                    content = React.createElement(\"div\", { className: \"subheader\" },\n                        this.props.titles.map((text, index) => {\n                            if (index === 0) {\n                                unidad = text;\n                            } else {\n                                let nivel = (index > 4) ? 6 : index + 2;\n                                return React.createElement(\"h\" + nivel, {\n                                    key: index,\n                                    style: { marginTop: '0px' },\n                                }, /* this.getActualIndex(titles_length, index) + */text);\n                            }\n                            return null;\n                        })\n                    );\n                }\n\n            }\n        }\n        if (navItem.id !== 0) {\n\n            return (\n                <div className=\"title\" onClick={(e) => {\n                    this.props.onBoxSelected(-1);\n                    this.props.onShowTitle();\n                    e.stopPropagation(); }}>\n                    <div style={{ backgroundColor: 'transparent', display: (titles.length !== 0) ? 'initial' : 'none' }}>\n                        <div className={this.props.showButtons ? \"caja selectedTitle selectedBox\" : \"caja\"} >\n                            <div className=\"cab\">\n\n                                <div className=\"cabtabla_numero\"\n                                    contentEditable={false}\n                                    suppressContentEditableWarning\n                                    style={{ display: (currentStatus.pageNumber === 'hidden') ? 'none' : 'block' }}\n                                    onBlur={e => {\n                                        this.props.onUnitNumberChanged(navItem.id, parseInt(e.target.innerText, 10));\n\n                                    }}\n                                >{pagenumber}</div>\n\n                                <div className=\"tit_ud_cap\">\n                                    {/* Course title*/}\n                                    <h1 style={{ display: (currentStatus.courseTitle === 'hidden') ? 'none' : 'block' }}>{this.props.courseTitle}</h1>\n                                    {/* NavItem title */}\n                                    <h2 style={{ display: (currentStatus.documentTitle === 'hidden') ? 'none' : 'block' }}>{docTitle}{this.props.containedView !== 0 ? (<OverlayTrigger placement=\"bottom\" overlay={\n                                        <Popover className=\"cvPopover\" id=\"popover-positioned-bottom\" title={ i18n.t(\"contained_view_popover\") }>\n                                            {cvList && cvList.length > 0 && cvList.map(it => { return it; }) }\n                                            {!cvList || cvList.length === 0 ? (<span className=\"cvList\">{i18n.t(\"contained_view_nowhere\")}</span>) : null}\n                                        </Popover>\n                                    }><i className=\"material-icons infoIcon\" style={{ fontSize: '16px' }}>info</i></OverlayTrigger>) : null }</h2>\n                                    {/* NavItem subtitle */}\n                                    <h3 style={{ display: (currentStatus.documentSubTitle === 'hidden') ? 'none' : 'block' }}>{ subTitle }</h3>\n\n                                    {/* breadcrumb */}\n                                    <div className=\"contenido\" style={{ display: (currentStatus.breadcrumb === 'hidden') ? 'none' : 'block' }}>\n                                        { content }\n                                    </div>\n                                </div>\n\n                                <div style={{ display: 'none' }} className=\"clear\" />\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n\n    }\n\n    /** *\n     * This method is used to calculate actual position for title indexes\n     * It makes use of the array of titles, the current position in the iteration, and the level stored in nav properties\n     * @param size\n     * @param level\n     * @returns {*} Index\n     */\n    getActualIndex(size = 1, level = 0) {\n        // Default values are stored in this variables\n        let actual_parent = this.props.navItems[this.props.navItem.parent];\n        let actual_level = this.props.navItem;\n        // Equal size to the index of level\n        size = size - 1;\n\n        if (size === undefined || level === undefined || this.props.titles.length === 0) {\n            // This happens when you are in a root element\n\n            return \"\";\n\n        } else if (size === level) {\n            // This happens when you are in the first level\n            let actual_index = (actual_parent.children.indexOf(actual_level.id));\n            if (actual_index !== -1) {\n                return (actual_index + 1) + \". \";\n            }\n        } else {\n            // This happens when you have several sections in the array\n            // You iterate inversely in the array until you get to the level stored in nav properties\n            let actual_index;\n            let interating_level = level + 1;\n\n            for (let n = actual_level.level; interating_level < n; n--) {\n                actual_level = actual_parent;\n                actual_parent = this.props.navItems[actual_level.parent];\n            }\n\n            let final_level = actual_parent.children.indexOf(actual_level.id) + 1;\n            if (actual_parent !== undefined && actual_parent.children !== undefined) {\n                return final_level + \". \";\n            }\n            return \"\";\n\n        }\n        return \"\";\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 53,
    "kind": "class",
    "name": "DaliHeader",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx~DaliHeader",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx",
    "importStyle": "DaliHeader",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx~DaliHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx~DaliHeader#render",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "getActualIndex",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx~DaliHeader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_header/DaliHeader.jsx~DaliHeader#getActualIndex",
    "access": "public",
    "description": "This method is used to calculate actual position for title indexes\nIt makes use of the array of titles, the current position in the iteration, and the level stored in nav properties",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} Index"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "level",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Index"
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Dali from './../../../../core/main';\nimport { Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport { UPDATE_BOX } from '../../../../common/actions';\nimport i18n from 'i18next';\nimport { isSortableBox, isSortableContainer } from '../../../../common/utils';\n\n/**\n * DaliShortcuts component\n * Floating tools that help edit DaliBoxes more easily\n */\nexport default class DaliShortcuts extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         */\n        this.state = {\n            left: 0,\n            top: 0,\n            width: 0,\n        };\n        /**\n         * Resize function binded\n         */\n        this.resize = this.resize.bind(this);\n    }\n\n    /**\n     * Renders react component\n     * @returns {code}\n     */\n    render() {\n        let box = this.props.box;\n        let toolbar = this.props.toolbar;\n\n        if (!box || !toolbar) {\n            return null;\n        }\n        let boxEl = document.getElementById('box-' + (box ? box.id : ''));\n\n        return (\n            <div id={this.props.isContained ? \"contained_daliBoxIcons\" : \"daliBoxIcons\"}\n                className=\"\"\n                ref=\"container\"\n                style={{\n                    display: (box && box.id && isSortableBox(box.id)) || !box || !box.id ? 'none' : 'block',\n                    position: 'absolute',\n                    left: this.state.left + 10,\n                    top: this.state.top,\n                    // width: this.state.width !== 0 ? this.state.width : \"auto\"\n                }}>\n                <div ref=\"innerContainer\" style={{ display: \"inline-block\", minWidth: \"150px\" }}>\n                    <span className=\"namePlugin\">{toolbar.config.displayName || \"\"}</span>\n                    {\n                        toolbar.config.isRich ?\n                            (<OverlayTrigger placement=\"top\"\n                                overlay={\n                                    <Tooltip id=\"richMark\">{i18n.t('messages.add_new_mark')}</Tooltip>\n                                }><button className=\"daliTitleButton\" onMouseDown={(e)=>{\n                                    this.props.onMarkCreatorToggled(box.id);\n                                }}><i className=\"material-icons\">room</i></button></OverlayTrigger>)\n                            : <span />\n                    }\n                    {\n                        isSortableContainer(box.container) ? (\n                            <OverlayTrigger placement=\"top\"\n                                overlay={\n                                    <Tooltip id=\"ajustaradocumento\">\n                                        {i18n.t('messages.adjust_to_document')}\n                                    </Tooltip>\n                                }>\n                                <button className=\"daliTitleButton\"\n                                    onClick={(e) => {\n                                        let widthButton = Object.assign({}, toolbar.controls.main.accordions.__sortable.buttons.__width);\n                                        if(widthButton.displayValue === 100 && widthButton.units === \"%\") {\n                                            if(toolbar.config.needsTextEdition) {\n                                                widthButton.displayValue = \"auto\";\n                                                widthButton.type = \"text\";\n                                                widthButton.auto = true;\n                                            }else{\n                                                widthButton.value = 20;\n                                                widthButton.displayValue = 20;\n                                                widthButton.type = \"number\";\n                                                widthButton.units = \"%\";\n                                                widthButton.auto = false;\n                                            }\n                                        }else{\n                                            widthButton.value = 100;\n                                            widthButton.displayValue = 100;\n                                            widthButton.type = \"number\";\n                                            widthButton.units = \"%\";\n                                            widthButton.auto = false;\n                                        }\n\n                                        this.props.onBoxResized(toolbar.id, widthButton);\n\n                                    }}>\n                                    <i className=\"material-icons\">code</i>\n                                </button>\n                            </OverlayTrigger>\n                        ) : (\n                            <span />\n                        )\n                    }\n                    {\n                        (toolbar && toolbar.config && toolbar.config.needsTextEdition) ? (\n                            <OverlayTrigger placement=\"top\"\n                                overlay={\n                                    <Tooltip id=\"editartexto\">\n                                        {i18n.t('messages.edit_text')}\n                                    </Tooltip>\n                                }>\n                                <button className=\"daliTitleButton\"\n                                    onClick={(e) => {\n                                        this.props.onTextEditorToggled(toolbar.id, !toolbar.showTextEditor);\n                                        if(this.props.box && this.props.box.id) {\n                                            // TODO: Código duplicado en DaliBox, DaliShortcuts y PluginToolbar. Extraer a common_tools?\n                                            let CKstring = CKEDITOR.instances[this.props.box.id].getData();\n                                            let initString = \"<p>\" + i18n.t(\"text_here\") + \"</p>\\n\";\n                                            if (CKstring === initString) {\n                                                CKEDITOR.instances[this.props.box.id].setData(\"\");\n                                            }\n                                        }\n                                        e.stopPropagation();\n                                    }}>\n                                    <i className=\"material-icons\">mode_edit</i>\n                                </button>\n                            </OverlayTrigger>\n                        ) : (\n                            <span />\n                        )\n                    }\n                    {\n                        (toolbar && toolbar.config && toolbar.config.needsConfigModal) ? (\n                            <OverlayTrigger placement=\"top\"\n                                overlay={\n                                    <Tooltip id=\"config\">\n                                        {i18n.t('open_conf')}\n                                    </Tooltip>\n                                }>\n                                <button id=\"open_conf\" className={\"daliTitleButton\"}\n                                    onClick={(e) => {\n                                        Dali.Plugins.get(toolbar.config.name).openConfigModal(UPDATE_BOX, toolbar.state, toolbar.id);\n                                    }}>\n                                    <i className=\"material-icons\">build</i>\n                                </button>\n                            </OverlayTrigger>\n                        ) : (\n                            <span />\n                        )\n                    }\n                    {\n                        (toolbar && toolbar.config && toolbar.config.needsPointerEventsAllowed) ? (\n                            <OverlayTrigger placement=\"top\"\n                                overlay={\n                                    <Tooltip id=\"editartexto\">\n                                        {i18n.t('messages.pointer_events')}\n                                    </Tooltip>\n                                }>\n                                <button id=\"pebutton\" className={boxEl && boxEl.classList.contains('pointerEventsEnabled') ? \"daliTitleButton dtbSelected\" : \"daliTitleButton\"}\n                                    onClick={(e) => {\n                                        boxEl.classList.toggle('pointerEventsEnabled');\n                                        let but = document.getElementById('pebutton');\n                                        e.stopPropagation();\n                                        let bool = boxEl.classList.contains('pointerEventsEnabled');\n                                        if (this.props.pointerEventsCallback) {\n                                            this.props.pointerEventsCallback(bool ? 'enableAll' : 'disableAll', this.props.toolbar);\n                                        }\n                                        bool && but ? but.classList.add('dtbSelected') : but.classList.remove('dtbSelected');\n                                    }}>\n                                    <i className=\"material-icons\">pan_tool</i>\n                                </button>\n                            </OverlayTrigger>\n                        ) : (\n                            <span />\n                        )\n                    }\n                    <OverlayTrigger placement=\"top\"\n                        overlay={\n                            <Tooltip id=\"borrarcaja\">\n                                {i18n.t('messages.erase_plugin')}\n                            </Tooltip>\n                        }>\n                        <button className=\"daliTitleButton\"\n                            onClick={(e) => {\n                                this.props.onBoxDeleted(box.id, box.parent, box.container);\n                                e.stopPropagation();\n                            }}>\n                            <i className=\"material-icons\">delete</i>\n                        </button>\n                    </OverlayTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * Resize callback for when either the window or the parent container change their size\n     * @param fromUpdate\n     * @param newProps\n     */\n    resize(fromUpdate, newProps) {\n        let nextProps = (fromUpdate === 'fromUpdate') ? newProps : this.props;\n        if (nextProps && nextProps.box) {\n            let box = document.getElementById('box-' + nextProps.box.id);\n            let element = ReactDOM.findDOMNode(this.refs.innerContainer);\n            let left = 0;\n            let top = 0;\n            let width = 0;\n            if (box) {\n                let boxRect = box.getBoundingClientRect();\n                let canvas = this.props.containedViewSelected === 0 ?\n                    document.getElementById('canvas') :\n                    document.getElementById('containedCanvas');\n                let canvasRect = canvas.getBoundingClientRect();\n\n                left = (boxRect.left - canvasRect.left);\n                top = (boxRect.top - canvasRect.top + canvas.scrollTop);\n\n                if (element) {\n                    let elementRect = element.getBoundingClientRect();\n                    width = boxRect.width < elementRect.width ? elementRect.width : boxRect.width;\n                } else {\n                    width = box.getBoundingClientRect().width;\n                }\n\n                this.setState({ left: left, top: top, width: width });\n            }\n        }\n    }\n\n    /**\n     * Before component receives props\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        if (nextProps !== this.props) {\n            if (nextProps.box) {\n                this.resize(\"fromUpdate\", nextProps);\n            }\n        }\n    }\n\n    /** *\n     * Before component updates\n     * Removes pointer events allowance when box is changed\n     * @param nextProps\n     */\n    componentWillUpdate(nextProps) {\n        if (nextProps !== this.props) {\n            if (nextProps.box) {\n                // this.resize(\"fromUpdate\", nextProps);\n                // Removes pointer events allowance when box is changed\n                if (!this.props.box || nextProps.box.id !== this.props.box.id) {\n                    let boxEl = document.getElementById('box-' + (this.props.box ? this.props.box.id : ''));\n                    if (boxEl) {\n                        if (this.props.pointerEventsCallback) {\n                            this.props.pointerEventsCallback('disableAll', this.props.toolbar);\n                        }\n                        boxEl.classList.remove('pointerEventsEnabled');\n                    }\n                    let pebutton = document.getElementById('pebutton');\n                    if (pebutton) {\n                        pebutton.classList.remove('dtbSelected');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * After component is mounted\n     * Sets resize listeners\n     */\n    componentDidMount() {\n        window.addEventListener('resize', this.resize);\n        if (this.props && this.props.box) {\n            let boxObj = document.getElementById('box-' + this.props.box.id);\n            if(boxObj) {\n                boxObj.addEventListener('resize', this.resize);\n            }\n\n        }\n    }\n\n    /**\n     * Before component unmounts\n     * Remove resize listeners\n     */\n    componentWillUnmount() {\n        let boxEl = document.getElementById('box-' + (this.props.box ? this.props.box.id : ''));\n        if (boxEl) {\n            let bool = boxEl.classList.contains('pointerEventsEnabled');\n            if (this.props.pointerEventsCallback) {\n                this.props.pointerEventsCallback('disableAll', this.props.toolbar);\n            }\n            boxEl.classList.remove('pointerEventsEnabled');\n        }\n\n        window.removeEventListener('resize', this.resize);\n        if (this.props && this.props.box) {\n            let boxObj = document.getElementById('box-' + this.props.box.id);\n            if(boxObj) {\n                boxObj.removeEventListener('resize', this.resize);\n            }\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "class",
    "name": "DaliShortcuts",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx",
    "importStyle": "DaliShortcuts",
    "description": "DaliShortcuts component\nFloating tools that help edit DaliBoxes more easily",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 58,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 23,
    "type": {
      "types": [
        "{\"left\": *, \"top\": *, \"width\": *}"
      ]
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#render",
    "access": "public",
    "description": "Renders react component",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "resize",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#resize",
    "access": "public",
    "description": "Resize callback for when either the window or the parent container change their size",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fromUpdate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#componentWillReceiveProps",
    "access": "public",
    "description": "Before component receives props",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#componentWillUpdate",
    "access": "public",
    "description": "Before component updates\nRemoves pointer events allowance when box is changed",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#componentDidMount",
    "access": "public",
    "description": "After component is mounted\nSets resize listeners",
    "lineNumber": 281,
    "params": [],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/dali_shortcuts/DaliShortcuts.jsx~DaliShortcuts#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts\nRemove resize listeners",
    "lineNumber": 296,
    "params": [],
    "return": null
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport interact from 'interact.js';\nimport DaliBox from '../dali_box/DaliBox';\nimport { RESIZE_SORTABLE_CONTAINER, ADD_BOX } from '../../../../common/actions';\nimport { isAncestorOrSibling } from '../../../../common/utils';\nimport Dali from './../../../../core/main';\n\nrequire('./_pluginPlaceHolder.scss');\n\n/**\n * @deprecated\n */\nexport default class PluginPlaceholder extends Component {\n    render() {\n        let container = this.props.parentBox.sortableContainers[this.props.pluginContainer];\n        let className = \"drg\" + this.props.pluginContainer;\n        if(this.props.boxLevelSelected - this.props.parentBox.level === 1 &&\n           isAncestorOrSibling(this.props.parentBox.id, this.props.boxSelected, this.props.boxes)) {\n            className += \" childBoxSelected\";\n        }\n        return (\n            <div style={\n                Object.assign({}, {\n                    width: \"100%\",\n                    height: container.height === 'auto' ? container.height : container.height + 'px',\n                    minHeight: '35px',\n                    textAlign: 'center',\n                    lineHeight: '100%',\n                    boxSizing: 'border-box',\n                    position: 'relative',\n                    display: 'table',\n                }, container.style)\n            }\n            id={this.props.pluginContainer}\n            className={className}>\n                {container.colDistribution.map((col, i) => {\n                    if (container.cols[i]) {\n                        return (<div key={i}\n                            style={{ width: col + \"%\", height: '100%', display: \"table-cell\", verticalAlign: \"top\" }}>\n                            {container.cols[i].map((row, j) => {\n                                return (<div key={j}\n                                    style={{ width: \"100%\", height: row + \"%\", position: 'relative' }}\n                                    ref={e => {\n                                        if(e !== null) {\n                                            this.configureDropZone(\n                                                ReactDOM.findDOMNode(e),\n                                                \".rib, .dnd\" + this.props.pluginContainer,\n                                                {\n                                                    i: i,\n                                                    j: j,\n                                                }\n                                            );\n                                        }\n                                    }}>\n                                    {container.children.map((idBox, index) => {\n                                        if (this.props.boxes[idBox].col === i && this.props.boxes[idBox].row === j) {\n                                            return (<DaliBox id={idBox}\n                                                key={index}\n                                                boxes={this.props.boxes}\n                                                boxSelected={this.props.boxSelected}\n                                                boxLevelSelected={this.props.boxLevelSelected}\n                                                containedViewSelected={this.props.containedViewSelected}\n                                                toolbars={this.props.toolbars}\n                                                lastActionDispatched={this.props.lastActionDispatched}\n                                                onBoxSelected={this.props.onBoxSelected}\n                                                onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                                                onBoxMoved={this.props.onBoxMoved}\n                                                onBoxResized={this.props.onBoxResized}\n                                                onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                                                onSortableContainerResized={this.props.onSortableContainerResized}\n                                                onBoxDeleted={this.props.onBoxDeleted}\n                                                onBoxDropped={this.props.onBoxDropped}\n                                                onBoxModalToggled={this.props.onBoxModalToggled}\n                                                onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                                                onTextEditorToggled={this.props.onTextEditorToggled}/>);\n                                        } else if (index === container.children.length - 1) {\n                                            return (<span><br/><br/></span>);\n                                        }\n                                        return null;\n                                    })}\n                                    {container.children.length === 0 ? (<span><br/><br/></span>) : \"\"}\n                                </div>);\n                            })}\n                        </div>);\n                    }\n                    return null;\n                })}\n            </div>\n        );\n    }\n\n    configureDropZone(node, selector, extraParams) {\n        interact(node).dropzone({\n            accept: selector,\n            overlap: 'pointer',\n            ondropactivate: function(e) {\n                e.target.classList.add('drop-active');\n            },\n            ondragenter: function(e) {\n                e.target.classList.add(\"drop-target\");\n            },\n            ondragleave: function(e) {\n                e.target.classList.remove(\"drop-target\");\n            },\n            ondrop: function(e) {\n                // If element dragged is coming from PluginRibbon, create a new DaliBox\n                if (e.relatedTarget.className.indexOf(\"rib\") !== -1) {\n                    let initialParams = {\n                        parent: this.props.parentBox.id,\n                        container: this.props.pluginContainer,\n                        col: extraParams.i,\n                        row: extraParams.j,\n                    };\n                    Dali.Plugins.get(e.relatedTarget.getAttribute(\"name\")).getConfig().callback(initialParams, ADD_BOX);\n                } else {\n                    let boxDragged = this.props.boxes[this.props.boxSelected];\n                    // If box being dragged is dropped in a different column or row, change it's value\n                    if (boxDragged && (boxDragged.col !== extraParams.i || boxDragged.row !== extraParams.j)) {\n                        this.props.onBoxDropped(this.props.boxSelected, extraParams.j, extraParams.i);\n\n                        let clone = document.getElementById('clone');\n                        clone.parentElement.removeChild(clone);\n                    }\n                }\n            }.bind(this),\n            ondropdeactivate: function(e) {\n                e.target.classList.remove('drop-active');\n                e.target.classList.remove(\"drop-target\");\n            },\n        });\n    }\n\n    componentDidMount() {\n        interact(ReactDOM.findDOMNode(this))\n            .resizable({\n                enabled: this.props.resizable,\n                edges: { left: false, right: false, bottom: true, top: false },\n                onmove: (event) => {\n                    event.target.style.height = event.rect.height + 'px';\n                },\n                onend: (event) => {\n                    this.props.onSortableContainerResized(this.props.pluginContainer, this.props.parentBox.id, parseInt(event.target.style.height, 10));\n                    let toolbar = this.props.toolbars[this.props.parentBox.id];\n                    Dali.Plugins.get(toolbar.config.name).forceUpdate(toolbar.state, this.props.parentBox.id, RESIZE_SORTABLE_CONTAINER);\n                },\n            });\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "PluginPlaceholder",
    "memberof": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx~PluginPlaceholder",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx",
    "importStyle": "PluginPlaceholder",
    "description": "",
    "lineNumber": 14,
    "deprecated": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx~PluginPlaceholder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx~PluginPlaceholder#render",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "configureDropZone",
    "memberof": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx~PluginPlaceholder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx~PluginPlaceholder#configureDropZone",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "selector",
        "types": [
          "*"
        ]
      },
      {
        "name": "extraParams",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx~PluginPlaceholder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/canvas/plugin_placeholder/PluginPlaceholder.jsx~PluginPlaceholder#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx",
    "content": "import React, { Component } from 'react';\nimport { Tooltip, Button, OverlayTrigger, Popover } from 'react-bootstrap';\n\nimport { ID_PREFIX_PAGE, ID_PREFIX_SECTION, ID_PREFIX_SORTABLE_BOX, PAGE_TYPES } from '../../../../common/constants';\nimport Section from './../section/Section';\nimport DaliIndexTitle from './../dali_index_title/DaliIndexTitle';\nimport { isPage, isSection, isSlide, isContainedView, calculateNewIdOrder } from '../../../../common/utils';\nimport i18n from 'i18next';\nimport Dali from './../../../../core/main';\n\nrequire('./_carrouselList.scss');\n\n/**\n * Dali CarrouselList Component\n * List of all the course's views and contained views\n */\nexport default class CarrouselList extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{showSortableItems: boolean, showContainedViews: boolean}}\n         */\n        this.state = {\n            showSortableItems: true,\n            showContainedViews: true,\n        };\n    }\n\n    /**\n     * Calculates how much height is available for the view list, depending on the expanded sections\n     * @returns {*}\n     */\n    getContentHeight() {\n        if(!this.state.showSortableItems && !this.state.showContainedViews) {\n            return(\"50px\");\n        } else if(this.state.showSortableItems && !this.state.showContainedViews) {\n            return \"calc(100% - 118px)\";\n        } else if(this.state.showSortableItems && this.state.showContainedViews) {\n            return \"calc(50%)\";\n        }\n        return \"calc(100% - 118px)\";\n\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code}\n     */\n    render() {\n        let containedViewsIncluded = Object.keys(this.props.containedViews).length > 0;\n\n        return (\n            <div style={{ height: \"100%\" }}>\n                <div style={{ height: \"20px\", backgroundColor: \"black\", marginBottom: \"2px\", paddingLeft: \"10px\", cursor: 'pointer' }} onClick={()=> {\n                    this.setState({ showSortableItems: !this.state.showSortableItems });\n                }}>\n                    {(this.state.showSortableItems) ?\n                        <i className=\"material-icons\" style={{ color: \"gray\", fontSize: \"22px\" }}>{\"arrow_drop_down\" }</i> :\n                        <i className=\"material-icons\" style={{ color: \"gray\", fontSize: \"15px\", marginLeft: \"2px\", marginRight: \"2px\" }}>{\"play_arrow\" }</i>\n                    }\n                    <span style={{ color: \"white\", fontSize: \"13px\" }}>{i18n.t(\"COURSE\")}</span>\n                </div>\n                <div ref=\"sortableList\"\n                    className=\"carList connectedSortables\"\n                    style={{ height: (this.state.showSortableItems) ? this.getContentHeight() : '0px', display: 'inherit' }}\n                    onClick={e => {\n                        this.props.onIndexSelected(this.props.id);\n                        e.stopPropagation();\n                    }}>\n                    {this.props.navItems[this.props.id].children.map((id, index) => {\n                        if (isSection(id)) {\n                            return <Section id={id}\n                                key={index}\n                                indexSelected={this.props.indexSelected}\n                                navItemsIds={this.props.navItemsIds}\n                                navItems={this.props.navItems}\n                                navItemSelected={this.props.navItemSelected}\n                                onNavItemNameChanged={this.props.onNavItemNameChanged}\n                                onNavItemAdded={this.props.onNavItemAdded}\n                                onBoxAdded={this.props.onBoxAdded}\n                                onIndexSelected={this.props.onIndexSelected}\n                                onNavItemSelected={this.props.onNavItemSelected}\n                                onNavItemExpanded={this.props.onNavItemExpanded}\n                                onNavItemReordered={this.props.onNavItemReordered}\n                                onNavItemToggled={this.props.onNavItemToggled}/>;\n                        } else if (isPage(id)) {\n                            let classSelected = (this.props.navItemSelected === id) ? 'selected' : 'notSelected';\n                            let classIndexSelected = this.props.indexSelected === id ? ' classIndexSelected' : '';\n                            return <div key={index}\n                                id={id}\n                                className={'navItemBlock ' + classSelected + classIndexSelected}\n                                onMouseDown={e => {\n                                    this.props.onIndexSelected(id);\n                                    e.stopPropagation();\n                                }}\n                                onClick={e => {\n                                    this.props.onIndexSelected(id);\n                                    e.stopPropagation();\n                                }}\n                                onDoubleClick={e => {\n                                    this.props.onNavItemSelected(id);\n                                    e.stopPropagation();\n                                }}>\n                                <span style={{ marginLeft: 20 * (this.props.navItems[id].level - 1) }}>\n                                    <i className=\"material-icons fileIcon\">\n                                        {isSlide(this.props.navItems[id].type) ? \"slideshow\" : \"insert_drive_file\"}\n                                    </i>\n                                    <DaliIndexTitle\n                                        id={id}\n                                        title={this.props.navItems[id].name}\n                                        index={this.props.navItems[this.props.navItems[id].parent].children.indexOf(id) + 1 + '.'}\n                                        hidden={this.props.navItems[id].hidden}\n                                        onNameChanged={this.props.onNavItemNameChanged}\n                                        onNavItemToggled={this.props.onNavItemToggled}/>\n                                </span>\n                            </div>;\n                        }\n                        return null;\n                    })}\n                </div>\n\n                <div style={{ height: \"20px\", backgroundColor: \"black\", marginBottom: \"2px\", paddingLeft: \"10px\", cursor: 'pointer' }} onClick={()=> {\n                    this.setState({ showContainedViews: !this.state.showContainedViews });\n                }}>\n                    {(this.state.showContainedViews) ?\n                        <i className=\"material-icons\" style={{ color: \"gray\", fontSize: \"22px\" }}>{\"arrow_drop_down\" }</i> :\n                        <i className=\"material-icons\" style={{ color: \"gray\", fontSize: \"15px\", marginLeft: \"2px\", marginRight: \"2px\" }}>{\"play_arrow\" }</i>\n                    }\n                    <span style={{ color: \"white\", fontSize: \"13px\" }}>{i18n.t(\"CONTAINED_VIEWS\")}</span>\n                </div>\n\n                <div className=\"containedViewsList\" style={{ height: (this.state.showContainedViews) ? ((this.state.showSortableItems) ? \"calc(50% - 122px)\" : \"calc(100% - 122px)\") : \"0px\",\n                    display: 'block', overflowY: 'auto', overflowX: 'hidden' }}>\n                    <div className=\"empty-info\" style={{ display: (containedViewsIncluded) ? \"none\" : \"block\" }}>{i18n.t(\"empty.cv_empty\")}</div>\n\n                    {\n                        Object.keys(this.props.containedViews).map((id, key)=>{\n\n                            return (<div key={id}\n                                className={id === this.props.indexSelected ? 'navItemBlock classIndexSelected' : 'navItemBlock'}\n                                style={{\n                                    width: \"100%\",\n                                    height: \"20px\",\n                                    paddingTop: \"10px\",\n                                    paddingLeft: \"10px\",\n                                    paddingBottom: \"25px\",\n                                    color: (this.props.containedViewSelected === id) ? \"white\" : \"#9A9A9A\",\n                                    backgroundColor: (this.props.containedViewSelected === id) ? \"#222\" : \"transparent\",\n                                }}\n                                onDoubleClick={e => {\n                                    this.props.onContainedViewSelected(id);\n                                    e.stopPropagation();\n\n                                }}\n                                onClick={e => {\n                                    this.props.onIndexSelected(id);\n                                    e.stopPropagation();\n                                }}>\n\n                                <span className=\"\" style={{ marginLeft: '10px' }}>\n\n                                    <i style={{ marginRight: '10px' }} className=\"material-icons\">{isSlide(this.props.containedViews[id].type) ? \"slideshow\" : \"insert_drive_file\"}</i>\n                                    <DaliIndexTitle\n                                        id={id}\n                                        title={this.props.containedViews[id].name}\n                                        index={1}\n                                        hidden={false}\n                                        onNameChanged={this.props.onContainedViewNameChanged}\n                                        onNavItemToggled={this.props.onNavItemToggled}/>\n                                </span>\n                            </div>);\n                        })\n                    }\n\n                </div>\n                <div className=\"bottomGroup\">\n                    <div className=\"bottomLine\" />\n                    <OverlayTrigger placement=\"top\" overlay={(<Tooltip id=\"newFolderTooltip\">{i18n.t('create new folder')}</Tooltip>)}>\n                        <Button className=\"carrouselButton\"\n                            disabled={ isContainedView(this.props.indexSelected) || this.props.navItems[this.props.indexSelected].level >= 10}\n                            onClick={e => {\n\n                                let idnuevo = ID_PREFIX_SECTION + Date.now();\n                                this.props.onNavItemAdded(\n                                    idnuevo,\n                                    i18n.t(\"section\"),\n                                    this.getParent().id,\n                                    PAGE_TYPES.SECTION,\n                                    this.calculatePosition()\n                                );\n                                if(Dali.Config.sections_have_content) {\n                                    this.props.onBoxAdded({\n                                        parent: idnuevo,\n                                        container: 0,\n                                        id: ID_PREFIX_SORTABLE_BOX + Date.now() },\n                                    false,\n                                    false\n                                    );\n                                }\n\n                                e.stopPropagation();\n\n                            }}><i className=\"material-icons\">create_new_folder</i>\n                        </Button>\n                    </OverlayTrigger>\n\n                    <OverlayTrigger placement=\"top\" overlay={\n                        <Tooltip id=\"newDocumentTooltip\">{i18n.t('create new document')}\n                        </Tooltip>}>\n                        <Button className=\"carrouselButton\"\n                            disabled={isContainedView(this.props.indexSelected)}\n                            onClick={e =>{\n                                let newId = ID_PREFIX_PAGE + Date.now();\n                                this.props.onNavItemAdded(\n                                    newId,\n                                    i18n.t(\"page\"),\n                                    this.getParent().id,\n                                    PAGE_TYPES.DOCUMENT,\n                                    this.calculatePosition()\n                                );\n                                this.props.onBoxAdded(\n                                    { parent: newId, container: 0, id: ID_PREFIX_SORTABLE_BOX + Date.now() },\n                                    false,\n                                    false\n                                );\n                            }}><i className=\"material-icons\">insert_drive_file</i></Button>\n                    </OverlayTrigger>\n\n                    <OverlayTrigger placement=\"top\" overlay={\n                        <Tooltip id=\"newSlideTooltip\">{i18n.t('create new slide')}\n                        </Tooltip>}>\n                        <Button className=\"carrouselButton\"\n                            disabled={isContainedView(this.props.indexSelected)}\n                            onClick={e => {\n                                let newId = ID_PREFIX_PAGE + Date.now();\n                                this.props.onNavItemAdded(\n                                    newId,\n                                    i18n.t(\"slide\"),\n                                    this.getParent().id,\n                                    PAGE_TYPES.SLIDE,\n                                    this.calculatePosition()\n                                );\n                                this.props.onIndexSelected(newId);\n                            }}><i className=\"material-icons\">slideshow</i>\n                        </Button>\n                    </OverlayTrigger>\n                    {/*\n                     <OverlayTrigger placement=\"top\" overlay={\n                     <Tooltip  id=\"hideNavItemTooltip\">{i18n.t('display')}\n                     </Tooltip>}>\n                     <Button className=\"carrouselButton\">\n                     <i className=\"material-icons\"\n                     onClick={e => {\n                     this.props.onNavItemToggled(this.props.navItemSelected);\n                     }}>{this.props.navItems[this.props.navItemSelected].hidden ? \"visibility_off\" : \"visibility\"}</i>\n                     </Button>\n                     </OverlayTrigger>\n                     */}\n                    <OverlayTrigger trigger={[\"focus\"]} placement=\"top\" overlay={\n                        <Popover id=\"popov\" title={\n                            isSection(this.props.indexSelected) ? i18n.t(\"delete_section\") :\n                                isContainedView(this.props.indexSelected) ? i18n.t('delete_contained_canvas') :\n                                    i18n.t(\"delete_page\")}>\n                            <i style={{ color: 'yellow', fontSize: '13px', padding: '0 5px' }} className=\"material-icons\">warning</i>\n                            {isSection(this.props.indexSelected) ? i18n.t(\"messages.delete_section\") :\n                                (isContainedView(this.props.indexSelected) && !this.canDeleteContainedView(this.props.indexSelected)) ? i18n.t(\"messages.delete_busy_cv\") : i18n.t(\"messages.delete_page\")}\n                            <br/>\n                            <br/>\n                            <Button className=\"popoverButton\"\n                                disabled={this.props.indexSelected === 0}\n                                style={{ float: 'right' }} >\n                                {i18n.t(\"Cancel\")}\n                            </Button>\n                            <Button className=\"popoverButton\"\n                                disabled={/* (isContainedView(this.props.indexSelected) && !this.canDeleteContainedView(this.props.indexSelected)) || */this.props.indexSelected === 0}\n                                style={{ float: 'right' }}\n                                onClick={(e) =>\n                                {\n                                    if(this.props.indexSelected !== 0) {\n                                        if (isContainedView(this.props.indexSelected) /* && this.canDeleteContainedView(this.props.indexSelected)*/) {\n                                            this.props.onContainedViewDeleted(this.props.indexSelected);\n                                        } else {\n                                            this.props.onNavItemDeleted(this.props.indexSelected);\n                                        }\n                                    }\n\n                                    this.props.onIndexSelected(0);\n                                }\n                                }>\n                                {i18n.t(\"Accept\")}\n                            </Button>\n\n                        </Popover>}>\n                        <OverlayTrigger placement=\"top\" overlay={\n                            <Tooltip id=\"deleteTooltip\">{i18n.t('delete')}\n                            </Tooltip>}>\n                            <Button className=\"carrouselButton\"\n                                disabled={this.props.indexSelected === 0}\n                                style={{ float: 'right' }}>\n                                <i className=\"material-icons\">delete</i>\n                            </Button>\n                        </OverlayTrigger>\n                    </OverlayTrigger>\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * Checks if contained view leaves orphan marks\n     * @param id Contained view id\n     * @returns {*}\n     */\n    canDeleteContainedView(id) {\n        if (id !== 0 && isContainedView(id)) {\n            let thisPage = this.props.containedViews[id];\n            let boxes = this.props.boxes;\n            let parent = thisPage.parent;\n            let boxDoesntExistAnyMore = parent && !boxes[parent];\n            let deletedMark = parent && boxes[parent] && boxes[parent].containedViews && boxes[parent].containedViews.indexOf(id) === -1;\n            return boxDoesntExistAnyMore || deletedMark;\n\n        }\n\n        return false;\n    }\n\n    /** *\n     * Get navItem's parent\n     * @returns {*}\n     */\n    getParent() {\n        // If the selected navItem is not a section, it cannot have children -> we return it's parent\n        if (isSection(this.props.indexSelected)) {\n            return this.props.navItems[this.props.indexSelected];\n        }\n        return this.props.navItems[this.props.navItems[this.props.indexSelected].parent] || this.props.navItems[0];\n    }\n\n    /**\n     * Calculate navItem's position on index\n     * @returns {*}\n     */\n    calculatePosition() {\n        let parent = this.getParent();\n        let ids = this.props.navItemsIds;\n        // If we are at top level, the new navItem it's always going to be in last position\n        if(parent.id === 0) {\n            return ids.length;\n        }\n\n        // Starting after item's parent, if level is the same or lower -> we found the place we want\n        for(let i = ids.indexOf(parent.id) + 1; i < ids.length; i++) {\n            if(ids[i]) {\n                if(this.props.navItems[ids[i]].level <= parent.level) {\n                    return i;\n                }\n            }\n        }\n\n        // If we arrive here it means we were adding a new child to the last navItem\n        return ids.length;\n    }\n\n    /**\n     * After component mounts\n     * Sets up jQuery sortable features on the index\n     */\n    componentDidMount() {\n        let list = jQuery(this.refs.sortableList);\n        let props = this.props;\n        list.sortable({\n            connectWith: '.connectedSortables',\n            containment: '.carList',\n            appendTo: '.carList',\n            helper: 'clone',\n            scroll: true,\n            over: (event, ui) => {\n                $(\".carList\").css(\"border-left\", \"3px solid #F47920\");\n            },\n            out: (event, ui) => {\n                $(\".carList\").css(\"border-left\", \"none\");\n            },\n            stop: (event, ui) => {\n                // This is called when:\n                // - An item is dragged from this items's children to another item\n                // - A direct child changes it position at the same level\n                let newChildren = list.sortable('toArray', { attribute: 'id' });\n\n                // If item moved is still in this element's children (wasn't moved away) -> update\n                if (newChildren.indexOf(this.props.navItemSelected) !== -1) {\n\n                    // This is necessary in order to avoid that JQuery touches the DOM\n                    // It has to be BEFORE action is dispatched and React tries to repaint\n                    list.sortable('cancel');\n\n                    this.props.onNavItemReordered(\n                        this.props.indexSelected, // item moved\n                        this.props.id, // new parent\n                        this.props.navItems[this.props.indexSelected].parent, // old parent\n                        calculateNewIdOrder(this.props.navItemsIds, newChildren, this.props.id, this.props.indexSelected, this.props.navItems),\n                        newChildren\n                    );\n                }\n            },\n            receive: (event, ui) => {\n                // This is called when an item is dragged from another item's children to this element's children\n                let newChildren = list.sortable('toArray', { attribute: 'id' });\n\n                // If action is done very quickly, jQuery may not notice the update and not detect that a new child was dragged\n                if(newChildren.indexOf(this.props.indexSelected) === -1) {\n                    newChildren.push(this.props.indexSelected);\n                }\n\n                // This is necessary in order to avoid that JQuery touches the DOM\n                // It has to be BEFORE action is dispatched and React tries to repaint\n                $(ui.sender).sortable('cancel');\n\n                this.props.onNavItemReordered(\n                    this.props.indexSelected, // item moved\n                    this.props.id, // new parent\n                    this.props.navItems[this.props.indexSelected].parent, // old parent\n                    calculateNewIdOrder(this.props.navItemsIds, newChildren, this.props.id, this.props.indexSelected, this.props.navItems),\n                    newChildren\n                );\n            },\n        });\n    }\n\n    /**\n     * Before the component unmounts\n     * Unset jQuery sortable features\n     */\n    componentWillUnmount() {\n        jQuery(this.refs.sortableList).sortable(\"destroy\");\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 73,
    "kind": "class",
    "name": "CarrouselList",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx",
    "importStyle": "CarrouselList",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 74,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "{showSortableItems: boolean, showContainedViews: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "getContentHeight",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#getContentHeight",
    "access": "public",
    "description": "Calculates how much height is available for the view list, depending on the expanded sections",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#render",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "canDeleteContainedView",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#canDeleteContainedView",
    "access": "public",
    "description": "Checks if contained view leaves orphan marks",
    "lineNumber": 319,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Contained view id"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "getParent",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#getParent",
    "access": "public",
    "description": "Get navItem's parent",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "calculatePosition",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#calculatePosition",
    "access": "public",
    "description": "Calculate navItem's position on index",
    "lineNumber": 349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#componentDidMount",
    "access": "public",
    "description": "After component mounts\nSets up jQuery sortable features on the index",
    "lineNumber": 374,
    "params": [],
    "return": null
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/carrousel_list/CarrouselList.jsx~CarrouselList#componentWillUnmount",
    "access": "public",
    "description": "Before the component unmounts\nUnset jQuery sortable features",
    "lineNumber": 439,
    "params": [],
    "return": null
  },
  {
    "__docId__": 83,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx",
    "content": "import React, { Component } from 'react';\nimport CarrouselList from '../carrousel_list/CarrouselList';\nimport i18n from 'i18next';\n\n/**\n * Index wrapper container\n */\nexport default class DaliCarousel extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code}\n     */\n    render() {\n        let displayModeClassName = \"\";\n        let carrouselContent;\n        if (this.props.displayMode === \"list\") {\n            carrouselContent = <CarrouselList id={0}\n                containedViews={this.props.containedViews}\n                containedViewsVisible={this.props.containedViewsVisible}\n                containedViewSelected={this.props.containedViewSelected}\n                boxes={this.props.boxes}\n                navItemsIds={this.props.navItemsIds}\n                navItems={this.props.navItems}\n                navItemSelected={this.props.navItemSelected}\n                indexSelected={this.props.indexSelected}\n                onBoxAdded={this.props.onBoxAdded}\n                onContainedViewsExpand={this.props.onContainedViewsExpand}\n                onContainedViewDeleted={this.props.onContainedViewDeleted}\n                onContainedViewSelected={this.props.onContainedViewSelected}\n                onContainedViewNameChanged={this.props.onContainedViewNameChanged}\n                onNavItemNameChanged={this.props.onNavItemNameChanged}\n                onNavItemAdded={this.props.onNavItemAdded}\n                onNavItemSelected={this.props.onNavItemSelected}\n                onIndexSelected={this.props.onIndexSelected}\n                onNavItemExpanded={this.props.onNavItemExpanded}\n                onNavItemDeleted={this.props.onNavItemDeleted}\n                onNavItemToggled={this.props.onNavItemToggled}\n                onNavItemReordered={this.props.onNavItemReordered}/>;\n        }\n        return (\n            <div style={{\n                minWidth: this.props.carouselShow ? (this.props.carouselFull ? '100%' : '212px') : '80px',\n                maxWidth: this.props.carouselFull ? '100%' : '212px',\n                overflowX: this.props.carouselFull ? 'hidden' : '',\n            }} id=\"colLeft\">\n                <div className=\"wrapperCarousel\">\n                    <div style={{ textAlign: this.props.carouselShow ? 'left' : 'center' }}\n                        onClick={() => {this.props.onToggleWidth();}}\n                        className={this.props.carouselShow ? 'carouselListTitle toolbarSpread' : 'carouselListTitle toolbarHide'}>\n                        <i style={{ fontSize: this.props.carouselShow ? \"16px\" : \"28px\" }} className=\"material-icons\">format_list_numbered</i>\n                        {!this.props.carouselShow ? <br/> : null}\n                        <div className=\"textIndex\">{i18n.t('INDEX')}</div>\n                        <i style={{\n                            fontSize: this.props.carouselShow ? \"16px\" : \"32px\",\n                            position: this.props.carouselShow ? \"absolute\" : \"initial\",\n                            right: 0,\n                        }}\n                        className=\"material-icons\"\n                        onClick={e => {\n                            this.props.onToggleFull();\n                            e.stopPropagation();\n                        }}>{!this.props.carouselFull ? \"keyboard_arrow_right\" : \"keyboard_arrow_left\"}\n                        </i>\n                        <div className=\"clear\" />\n                    </div>\n                    <div id=\"indice\"\n                        className=\"daliCarousel\"\n                        key=\"indice\"\n                        style={{ height: '100%' }}>\n                        {this.props.carouselShow ? carrouselContent : <br/>}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 84,
    "kind": "class",
    "name": "DaliCarousel",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx~DaliCarousel",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx",
    "importStyle": "DaliCarousel",
    "description": "Index wrapper container",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 85,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx~DaliCarousel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx~DaliCarousel#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx~DaliCarousel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_carrousel/DaliCarousel.jsx~DaliCarousel#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx",
    "content": "import React, { Component } from 'react';\nimport { isPage, isSection } from '../../../../common/utils';\nimport { FormControl } from 'react-bootstrap';\nimport Dali from './../../../../core/main';\nimport i18n from 'i18next';\n\nrequire('./_daliIndexTitle.scss');\n\n/**\n * Component for editing index elements in situ\n */\nexport default class DaliIndexTitle extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         */\n        this.state = {\n            editing: false,\n            currentValue: this.props.title,\n        };\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code}\n     */\n    render() {\n        return (\n            <span>\n                {!this.state.editing ?\n                    (<div className=\"actualSectionTitle\"\n                        style={{ textDecoration: this.props.hidden ? \"line-through\" : \"initial\" }}\n                        onDoubleClick={e => {\n                            this.setState({ editing: !this.state.editing });\n                            if (this.state.editing) { /* Save changes to Redux state*/\n                                this.props.onNameChanged(this.props.id, this.state.currentValue);\n\n                            // Synchronize current component state with Redux state when entering edition mode\n                            } else {\n                                this.setState({ currentValue: this.props.title });\n                            }\n                            e.stopPropagation();\n                        }}>\n                        {Dali.Config.show_numbers_before_navitems ? this.props.index : \"\"} {this.props.title}\n                    </div>) :\n                    (<FormControl\n                        type=\"text\"\n                        ref=\"titleIndex\"\n                        className={this.props.id ? \"editSectionTitle\" : \"editTitle\"}\n                        value={this.state.currentValue}\n                        autoFocus\n                        onKeyDown={e=> {\n                            if (e.keyCode === 13) { // Enter Key\n                                this.setState({ editing: !this.state.editing });\n                                this.props.onNameChanged(this.props.id, (this.state.currentValue.length > 0) ? this.state.currentValue : this.getDefaultValue());\n                            }\n                            if (e.keyCode === 27) { // Escape key\n                                this.setState({ editing: !this.state.editing });\n                            }\n                        }}\n                        onFocus={e => {\n                        /* Select all the content when enter edition mode*/\n                            e.target.setSelectionRange(0, e.target.value.length);\n\n                        }}\n                        onChange={e => {\n                        /* Save it on component state, not Redux*/\n                            this.setState({ currentValue: e.target.value });\n                        }}\n                        onBlur={e => {\n                        /* Change to non-edition mode*/\n                            this.setState({ editing: !this.state.editing });\n                            this.props.onNameChanged(this.props.id, (this.state.currentValue.length > 0) ? this.state.currentValue : this.getDefaultValue());\n                        }} />\n                    )\n                }\n                <i className=\"material-icons\"\n                    style={{ position: \"absolute\", right: \"0\", color: this.props.hidden ? \"gray\" : \"white\" }}>{this.props.hidden ? \"visibility_off\" : \"\"}</i>\n            </span>\n        );\n    }\n\n    /**\n     * Get default value if left empty\n     * @returns {string}\n     */\n    getDefaultValue() {\n        if (isPage(this.props.id)) {\n            return i18n.t(\"page\");\n        } else if(isSection(this.props.id)) {\n            return i18n.t(\"section\");\n        }\n        return \"Blank\";\n\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 88,
    "kind": "class",
    "name": "DaliIndexTitle",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx",
    "importStyle": "DaliIndexTitle",
    "description": "Component for editing index elements in situ",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 89,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 22,
    "type": {
      "types": [
        "{\"editing\": *, \"currentValue\": *}"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "getDefaultValue",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/dali_index_title/DaliIndexTitle.jsx~DaliIndexTitle#getDefaultValue",
    "access": "public",
    "description": "Get default value if left empty",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 93,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx",
    "content": "import React, { Component } from 'react';\nimport { MenuItem, Dropdown } from 'react-bootstrap';\nimport { ID_PREFIX_PAGE } from '../../../../common/constants';\nimport { ID_PREFIX_SORTABLE_BOX, PAGE_TYPES } from '../../../../common/constants';\nimport i18n from 'i18next';\nimport { isSection } from '../../../../common/utils';\n\n/** *\n * Index edition buttons\n */\nexport default class PageMenu extends Component {\n    /**\n     *  Renders React Component\n     * @returns {code}\n     */\n    render() {\n        return (\n            <Dropdown role=\"menuitem\"\n                dropup\n                className=\"carouselDropup\"\n                id=\"carouselDropUp\" >\n                <Dropdown.Toggle noCaret className=\"carrouselButton\">\n                    <i className=\"material-icons\">note_add</i>\n                </Dropdown.Toggle>\n                <Dropdown.Menu className=\"pageMenu\" id=\"bottomMenu\" onSelect={() => null}>\n                    <MenuItem eventKey=\"1\" onClick={() =>{\n                        let newId = ID_PREFIX_PAGE + Date.now();\n                        this.props.onNavItemAdded(\n                            newId,\n                            i18n.t(\"page\"),\n                            this.getParent().id,\n                            PAGE_TYPES.DOCUMENT,\n                            this.calculatePosition()\n                        );\n                        this.props.onBoxAdded(\n                            {\n                                parent: newId,\n                                container: 0,\n                                id: ID_PREFIX_SORTABLE_BOX + Date.now(),\n                            },\n                            false,\n                            false\n                        );\n                    }}>\n                        <i className=\"material-icons\">view_day</i> Document</MenuItem>\n                    <MenuItem eventKey=\"2\" onClick={() => {\n                        this.props.onNavItemAdded(\n                            ID_PREFIX_PAGE + Date.now(),\n                            i18n.t(\"slide\"),\n                            this.getParent().id,\n                            PAGE_TYPES.SLIDE,\n                            this.calculatePosition()\n                        );\n                    }}>\n                        <i className=\"material-icons\">view_carousel</i> Slide</MenuItem>\n                    <MenuItem eventKey=\"3\" disabled><i className=\"material-icons\">dashboard</i> Poster</MenuItem>\n                    <MenuItem eventKey=\"4\" disabled><i className=\"material-icons\">web</i> Other</MenuItem>\n\n                </Dropdown.Menu>\n            </Dropdown>\n            /* jshint ignore:end */\n        );\n    }\n\n    /**\n     * Get selected element's parent\n     * @returns {*}\n     */\n    getParent() {\n        // If the selected navItem is not a section, it cannot have children -> we return it's parent\n        if (isSection(this.props.navItemSelected)) {\n            return this.props.navItems[this.props.navItemSelected];\n        }\n        return this.props.navItems[this.props.navItems[this.props.navItemSelected].parent];\n    }\n\n    /**\n     * Calculate element's position in index\n     * @returns {*}\n     */\n    calculatePosition() {\n        let parent = this.getParent();\n        let ids = this.props.navItemsIds;\n        // If we are at top level, the new navItem it's always going to be in last position\n        if (parent.id === 0) {\n            return ids.length;\n        }\n\n        // Starting after item's parent, if level is the same or lower -> we found the place we want\n        for (let i = ids.indexOf(parent.id) + 1; i < ids.length; i++) {\n            if (ids[i]) {\n                if (this.props.navItems[ids[i]].level <= parent.level) {\n                    return i;\n                }\n            }\n        }\n\n        // If we arrive here it means we were adding a new child to the last navItem\n        return ids.length;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 94,
    "kind": "class",
    "name": "PageMenu",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx~PageMenu",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx",
    "importStyle": "PageMenu",
    "description": "Index edition buttons",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx~PageMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx~PageMenu#render",
    "access": "public",
    "description": " Renders React Component",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "getParent",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx~PageMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx~PageMenu#getParent",
    "access": "public",
    "description": "Get selected element's parent",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "calculatePosition",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx~PageMenu",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/page_menu/PageMenu.jsx~PageMenu#calculatePosition",
    "access": "public",
    "description": "Calculate element's position in index",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 98,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx",
    "content": "import React, { Component } from 'react';\nimport DaliIndexTitle from '../dali_index_title/DaliIndexTitle';\nimport { isPage, isSection, isSlide, calculateNewIdOrder } from '../../../../common/utils';\nimport Dali from './../../../../core/main';\n\n/**\n * Section element in index\n */\nexport default class Section extends Component {\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        let navItem = this.props.navItems[this.props.id];\n        let classSelected = this.props.navItemSelected === navItem.id ? 'selected' : 'notSelected';\n        let classIndexSelected = this.props.indexSelected === navItem.id ? ' classIndexSelected' : '';\n        return (\n            <div id={this.props.id}\n                onMouseDown={e => {\n                    this.props.onIndexSelected(navItem.id);\n                    e.stopPropagation();\n                }}\n                onClick={e => {\n\n                    this.props.onNavItemExpanded(navItem.id, !navItem.isExpanded);\n                    this.props.onIndexSelected(navItem.id);\n                    e.stopPropagation();\n                }}\n                onDoubleClick={e => {\n                    if (Dali.Config.sections_have_content) {\n                        this.props.onNavItemSelected(navItem.id);\n                        this.props.onNavItemExpanded(navItem.id, !navItem.isExpanded);\n                    }\n                    this.props.onIndexSelected(navItem.id);\n                    e.stopPropagation();\n\n                }}>\n                <div className={\"navItemBlock \" + classSelected + classIndexSelected}>\n                    <span style={{ marginLeft: 20 * (this.props.navItems[this.props.id].level - 1) }}>\n                        <button className=\"expandir\"\n                            onClick={e => {\n                                this.props.onNavItemExpanded(navItem.id, !navItem.isExpanded);\n                                this.props.onIndexSelected(navItem.id);\n                                e.stopPropagation();\n                            }}>\n                            <i onClick={e => {\n                                this.props.onIndexSelected(navItem.id); // Confirmar\n                                this.props.onNavItemExpanded(navItem.id, !navItem.isExpanded);\n                                e.stopPropagation();\n                            }}\n                            className={classSelected + '  material-icons'}>\n                                {navItem.isExpanded ? \"keyboard_arrow_down\" : \"keyboard_arrow_right\"}\n                            </i>\n                        </button>\n                        <span className={classSelected} style={{ display: 'inline' }}>\n                            <DaliIndexTitle id={this.props.id}\n                                title={navItem.name}\n                                index={navItem.level === 1 ?\n                                    navItem.unitNumber + \". \" :\n                                    this.props.navItems[navItem.parent].children.indexOf(this.props.id) + 1 + '. '}\n                                hidden={navItem.hidden}\n                                onNameChanged={this.props.onNavItemNameChanged}\n                                onNavItemToggled={this.props.onNavItemToggled}/>\n                        </span>\n                    </span>\n                </div>\n                <div ref=\"sortableList\"\n                    style={{\n                        paddingTop: 0,\n                        display: (navItem.isExpanded ? 'block' : 'none'),\n                    }}\n                    className=\"sectionList connectedSortables\">\n                    {navItem.children.map((id, index) => {\n                        if (isSection(id)) {\n                            return <Section id={id}\n                                key={index}\n                                indexSelected={this.props.indexSelected}\n                                navItemsIds={this.props.navItemsIds}\n                                navItems={this.props.navItems}\n                                navItemSelected={this.props.navItemSelected}\n                                onBoxAdded={this.props.onBoxAdded}\n                                onIndexSelected={this.props.onIndexSelected}\n                                onNavItemAdded={this.props.onNavItemAdded}\n                                onNavItemNameChanged={this.props.onNavItemNameChanged}\n                                onNavItemSelected={this.props.onNavItemSelected}\n                                onNavItemExpanded={this.props.onNavItemExpanded}\n                                onNavItemReordered={this.props.onNavItemReordered}\n                                onNavItemToggled={this.props.onNavItemToggled}/>;\n                        } else if (isPage(id)) {\n                            let classSelectedD = this.props.navItemSelected === id ? 'selected dragS' : 'notSelected dragS';\n                            let classIndexSelectedD = this.props.indexSelected === id ? ' classIndexSelected' : '';\n                            return (\n                                <div key={index}\n                                    id={id}\n                                    className={'navItemBlock ' + classSelectedD + classIndexSelectedD}\n                                    onMouseDown={e => {\n                                        this.props.onIndexSelected(id);\n                                        e.stopPropagation();\n                                    }}\n                                    onClick={e => {\n                                        this.props.onIndexSelected(id);\n                                        e.stopPropagation();\n                                    }}\n                                    onDoubleClick={e => {\n                                        this.props.onNavItemSelected(id);\n                                        e.stopPropagation();\n                                    }}>\n                                    <span style={{ marginLeft: 20 * (this.props.navItems[id].level - 1) }}>\n                                        <i className=\"material-icons fileIcon\">\n                                            {isSlide(this.props.navItems[id].type) ? \"slideshow\" : \"insert_drive_file\"}\n                                        </i>\n                                        <DaliIndexTitle id={id}\n                                            index={this.props.navItems[this.props.navItems[id].parent].children.indexOf(id) + 1 + '.'}\n                                            title={this.props.navItems[id].name}\n                                            hidden={this.props.navItems[id].hidden}\n                                            onNameChanged={this.props.onNavItemNameChanged}\n                                            onNavItemToggled={this.props.onNavItemToggled}/>\n                                    </span>\n                                </div>\n                            );\n                        }\n                        return null;\n                    })}\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * After component mounts\n     * Set sortable functions\n     */\n    componentDidMount() {\n        let list = jQuery(this.refs.sortableList);\n        list.sortable({\n            connectWith: '.connectedSortables',\n            containment: '.carList',\n            appendTo: '.carList',\n            helper: 'clone',\n            scroll: true,\n            over: (event, ui) => {\n                $(\".carList\").css(\"border-left\", \"none\");\n                $(\".sectionList\").removeClass(\"dragIntoHelper\");\n                $(event.target).addClass(\"dragIntoHelper\");\n            },\n            out: (event, ui) => {\n                $(\".carList\").css(\"border-left\", \"none\");\n                $(\".sectionList\").removeClass(\"dragIntoHelper\");\n            },\n            stop: (event, ui) => {\n                // This is called when:\n                // - An item is dragged from this items's children to another item\n                // - A direct child changes it position at the same level\n\n                // If this item was dragged to another item, its sortable instance has been destroyed already\n                if(!list.sortable('instance')) {\n                    return;\n                }\n                let newChildren = list.sortable('toArray', { attribute: 'id' });\n\n                // If item moved is still in this element's children (wasn't moved away) -> update\n                if (newChildren.indexOf(this.props.indexSelected) !== -1) {\n\n                    // This is necessary in order to avoid that JQuery touches the DOM\n                    // It has to be BEFORE action is dispatched and React tries to repaint\n                    list.sortable('cancel');\n\n                    this.props.onNavItemReordered(\n                        this.props.indexSelected, // item moved\n                        this.props.id, // new parent\n                        this.props.navItems[this.props.indexSelected].parent, // old parent\n                        calculateNewIdOrder(this.props.navItemsIds, newChildren, this.props.id, this.props.indexSelected, this.props.navItems),\n                        newChildren\n                    );\n                }\n            },\n            receive: (event, ui) => {\n                // This is called when an item is dragged from another item's children to this element's children\n                let newChildren = list.sortable('toArray', { attribute: 'id' });\n\n                // This is necessary in order to avoid that JQuery touches the DOM\n                // It has to be BEFORE action is dispatched and React tries to repaint\n                $(ui.sender).sortable('cancel');\n\n                this.props.onNavItemReordered(\n                    this.props.indexSelected, // item moved\n                    this.props.id, // new parent\n                    this.props.navItems[this.props.indexSelected].parent, // old parent\n                    calculateNewIdOrder(this.props.navItemsIds, newChildren, this.props.id, this.props.indexSelected, this.props.navItems),\n                    newChildren\n                );\n            },\n        });\n    }\n\n    /**\n     * Before component unmounts\n     * Unset sortable functions\n     */\n    componentWillUnmount() {\n        jQuery(this.refs.sortableList).sortable(\"destroy\");\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/carrousel/section/Section.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 99,
    "kind": "class",
    "name": "Section",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx~Section",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/carrousel/section/Section.jsx",
    "importStyle": "Section",
    "description": "Section element in index",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx~Section",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx~Section#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx~Section",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx~Section#componentDidMount",
    "access": "public",
    "description": "After component mounts\nSet sortable functions",
    "lineNumber": 134,
    "params": [],
    "return": null
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx~Section",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/section/Section.jsx~Section#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts\nUnset sortable functions",
    "lineNumber": 201,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx",
    "content": "import React, { Component } from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\n\nrequire('./_thumbnails.scss');\n\n/**\n * @deprecated\n */\nexport default class Thumbnail extends Component {\n    render() {\n        let border = (this.props.isSelected) ? \"2px solid #f87060\" : \"\";\n        return (\n            /* jshint ignore:start */\n            <div style={{\n                backgroundColor: 'white',\n                width: '100%',\n                height: '12.5%',\n                minHeight: '120px',\n                marginTop: '3%',\n                border: border,\n                boxSizing: 'border-box',\n                position: 'relative',\n            }}\n            onClick={(e) => this.props.onNavItemSelected(this.props.id)}>\n                <ButtonGroup vertical\n                    style={{ visibility: (this.props.isSelected ? 'visible' : 'hidden'), position: 'absolute', top: 0 }}>\n                    <Button onClick={e => {\n                        let ids = [this.props.id];\n                        let found = this.findChildren(ids);\n                        let boxes = this.findBoxes(found);\n\n                        this.props.onNavItemDeleted(ids, this.props.navItems[this.props.id].parent, boxes);\n                        e.stopPropagation();\n                    }\n                    }><i className=\"fa fa-trash-o\" /></Button>\n                    <Button><i className=\"fa fa-files-o\" /></Button>\n                </ButtonGroup>\n                <p className=\"thumb\">{this.props.navItems[this.props.id].name}</p>\n            </div>\n            /* jshint ignore:end */\n        );\n    }\n\n    findChildren(ids) {\n\n        // We want to get all the items whose level is higher than the selected starting after it\n        let level = this.props.navItems[ids[0]].level;\n        let startingIndex = this.props.navItemsIds.indexOf(ids[0]) + 1;\n        for (let i = startingIndex; i < this.props.navItemsIds.length; i++) {\n            if (this.props.navItems[this.props.navItemsIds[i]].level > level) {\n                ids.push(this.props.navItemsIds[i]);\n            } else {\n                break;\n            }\n        }\n        return ids;\n    }\n\n    sections() {\n        let current = 1;\n        for (let i in this.props.navItemsIds) {\n            if (this.props.navItemsIds[i][0] === 's') {\n                current++;\n            }\n        }\n        return current;\n    }\n\n    findBoxes(ids) {\n        let newids = ids;\n        let boxesids = [];\n        newids.map(nav=> {\n            let boxes = this.props.navItems[nav].boxes;\n            boxesids = boxesids.concat(boxes);\n            boxes.map(box=> {\n                if (box[1] === 's') {\n                    let children = this.props.boxes[box].children;\n                    children.map(child=> {\n                        boxesids.push('bo-' + child.split(\"-\")[1]);\n                    });\n                }\n            });\n        });\n\n        return boxesids;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 104,
    "kind": "class",
    "name": "Thumbnail",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx",
    "importStyle": "Thumbnail",
    "description": "",
    "lineNumber": 9,
    "deprecated": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail#render",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "findChildren",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail#findChildren",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "sections",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail#sections",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "findBoxes",
    "memberof": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/carrousel/thumbnails/Thumbnail.jsx~Thumbnail#findBoxes",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 109,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/common/alert/Alert.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, Modal } from 'react-bootstrap';\nimport i18n from 'i18next';\n/** *\n * Custom alert component\n * @example  <Alert show={this.state.showAlert}      | true : displays alert / false: hides alert\n *                   className=\"myAlert\"             | custom css class (default: popupAlert)\n *                   bsStyle=\"default\"               | bootstrap style (default: default)\n *                   hasHeader                       | whether modal has a header (default: false)\n *                   backdrop                        | backdrop value (same as bootstrap modal) (default: true)\n *                   title=\"Alert\"                   | title displayed in the header (if it has one) (default: empty)\n *                   closeButton                     | close button (x) in the header (if it has one) (default: false)\n *                   acceptButtonText=\"Accept\"       | text displayed in the accept button (default: \"OK\")\n *                   cancelButton                    | whether there is a cancel button or not (default: false)\n *                   cancelButtonText=\"Cancel\"       | text displayed in the cancel button (if it has one) (default: \"Cancel\")\n *                   onClose={(bool)=>{...}}>        | callback for when the alert is closed. bool is true when accept button is clicked, false otherwise\n *                        {children}                 | content of the alert. !!!!!! if there are controlled items (e.g. inputs) they need to be handled on the parent component\n *  </Alert>\n */\nexport default class Alert extends Component {\n    /**\n     * Constructor\n     * @param props React Component props\n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * Renders React component\n     * @returns {code}\n     */\n    render() {\n        return(\n            <Modal id=\"alertModal\" className={this.props.className || 'popupAlert'}\n                onKeyUp={(e)=>{\n                    if (e.keyCode === 13) {\n                        this.props.onClose(true);\n                    }\n                }}\n                backdrop={this.props.backdrop === undefined ? true : this.props.backdrop}\n                show={this.props.show}\n                onHide={e=>{this.props.onClose(false);}}>\n                { this.props.hasHeader ?\n                    (<Modal.Header closeButton={this.props.closeButton}>\n                        { this.props.title }\n                    </Modal.Header>) :\n                    (null)}\n                <Modal.Body>\n                    { this.props.children }\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle={this.props.bsStyle || 'default'}\n                        className=\"popupFooterButton\"\n                        onClick={e=>{this.props.onClose(true);}}>\n                        { this.props.acceptButtonText || i18n.t('messages.OK') }\n                    </Button>\n                    { this.props.cancelButton ? (\n                        <Button bsStyle={this.props.bsStyle || 'default'}\n                            className=\"popupFooterButton\"\n                            onClick={e=>{this.props.onClose(false);}}>\n                            { this.props.cancelButtonText || i18n.t('messages.Cancel') }\n                        </Button>) : null }\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/common/alert/Alert.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 110,
    "kind": "class",
    "name": "Alert",
    "memberof": "DALI_EDITOR/_editor/components/common/alert/Alert.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/common/alert/Alert.jsx~Alert",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/common/alert/Alert.jsx",
    "importStyle": "Alert",
    "description": "Custom alert component",
    "examples": [
      " <Alert show={this.state.showAlert}      | true : displays alert / false: hides alert\n                  className=\"myAlert\"             | custom css class (default: popupAlert)\n                  bsStyle=\"default\"               | bootstrap style (default: default)\n                  hasHeader                       | whether modal has a header (default: false)\n                  backdrop                        | backdrop value (same as bootstrap modal) (default: true)\n                  title=\"Alert\"                   | title displayed in the header (if it has one) (default: empty)\n                  closeButton                     | close button (x) in the header (if it has one) (default: false)\n                  acceptButtonText=\"Accept\"       | text displayed in the accept button (default: \"OK\")\n                  cancelButton                    | whether there is a cancel button or not (default: false)\n                  cancelButtonText=\"Cancel\"       | text displayed in the cancel button (if it has one) (default: \"Cancel\")\n                  onClose={(bool)=>{...}}>        | callback for when the alert is closed. bool is true when accept button is clicked, false otherwise\n                       {children}                 | content of the alert. !!!!!! if there are controlled items (e.g. inputs) they need to be handled on the parent component\n </Alert>"
    ],
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 111,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/common/alert/Alert.jsx~Alert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/alert/Alert.jsx~Alert#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React Component props"
      }
    ]
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/common/alert/Alert.jsx~Alert",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/alert/Alert.jsx~Alert#render",
    "access": "public",
    "description": "Renders React component",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx",
    "content": "import React, { Component } from 'react';\nimport Picker from 'rc-color-picker';\n\nrequire('./../../../../node_modules/rc-color-picker/assets/index.css');\nrequire('./color_picker_input.scss');\n\n/**\n * React input color component\n */\nexport default class ColorPicker extends Component {\n    /**\n     *\n     * @param {object} props Inherited props\n     */\n    constructor(props) {\n        super(props);\n        let { newColor, alpha } = this.internalFormat(this.props.value || '#000000');\n        /**\n         * Component's initial state\n         */\n        this.state = {\n            color: newColor,\n            alpha: alpha,\n        };\n    }\n\n    /**\n     * Before component receives new props\n     * Sets state to new color\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        let { newColor, alpha } = this.internalFormat(nextProps.value);\n        this.setState({ color: newColor, alpha: alpha });\n    }\n\n    /**\n     * Render React component\n     * @returns {code}\n     */\n    render() {\n        return(\n            <div className=\"colorPickerContainer\" >\n                <Picker className=\"colorPickerInput\"\n                    placement=\"topRight\"\n                    enableAlpha\n                    animation=\"slide-up\"\n                    color={this.state.color}\n                    onChange={(e)=>{ this.setState({ color: e.color, alpha: e.alpha });}}\n                    onClose={()=>{this.props.onChange({ color: this.hexToRgba(this.state.color, this.state.alpha) });}}\n                    mode=\"RGB\"\n                    alpha={this.state.alpha} />\n            </div>);\n\n    }\n\n    /**\n     * Splits rgba value into rgb and alpha values\n     * @param rgba\n     * @returns {object}\n     */\n    internalFormat(rgba) {\n        let regex = /rgba\\((\\d+),(\\d+),(\\d+),(.+)\\)/;\n        let oldColor = regex.exec(rgba);\n        if(oldColor && oldColor.length > 0) {\n            let newColor = '#' + this.rgbtoHex(oldColor[1]) + this.rgbtoHex(oldColor[2]) + this.rgbtoHex(oldColor[3]);\n            return { newColor: newColor, alpha: oldColor[4] * 100 };\n        }\n        return { newColor: rgba, alpha: 100 };\n    }\n\n    /**\n     * Converts hex color + alpha transparency to rgba value\n     * @param color\n     * @param alpha\n     * @returns {string}\n     */\n    hexToRgba(color, alpha) {\n        let cutHex = (color.charAt(0) === \"#\") ? color.substring(1, 7) : color;\n        let r = parseInt(cutHex.substring(0, 2), 16);\n        let g = parseInt(cutHex.substring(2, 4), 16);\n\n        let b = parseInt(cutHex.substring(4, 6), 16);\n        let a = alpha / 100;\n        let str = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n        return str;\n    }\n\n    /**\n     * Converts rgb color to hex\n     * @param n R, G or B part or the color\n     * @returns {*} Two digits corresponding to the hex value of the color part\n     */\n    rgbtoHex(n) {\n        n = parseInt(n, 10);\n        if (isNaN(n)) {return \"00\";}\n        n = Math.max(0, Math.min(n, 255));\n        let num = \"0123456789ABCDEF\".charAt((n - n % 16) / 16)\n            + \"0123456789ABCDEF\".charAt(n % 16);\n        return num;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "ColorPicker",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx",
    "importStyle": "ColorPicker",
    "description": "React input color component",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Inherited props"
      }
    ]
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 21,
    "type": {
      "types": [
        "{\"color\": *, \"alpha\": *}"
      ]
    }
  },
  {
    "__docId__": 117,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker#componentWillReceiveProps",
    "access": "public",
    "description": "Before component receives new props\nSets state to new color",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker#render",
    "access": "public",
    "description": "Render React component",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "internalFormat",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker#internalFormat",
    "access": "public",
    "description": "Splits rgba value into rgb and alpha values",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rgba",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "hexToRgba",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker#hexToRgba",
    "access": "public",
    "description": "Converts hex color + alpha transparency to rgba value",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 121,
    "kind": "method",
    "name": "rgbtoHex",
    "memberof": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/color-picker/ColorPicker.jsx~ColorPicker#rgbtoHex",
    "access": "public",
    "description": "Converts rgb color to hex",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} Two digits corresponding to the hex value of the color part"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "R, G or B part or the color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Two digits corresponding to the hex value of the color part"
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/common/file-input/FileInput.jsx",
    "content": "import React from 'react';\n\n/**\n * FileInput component for dragging and dropping files\n */\nexport default class FileInput extends React.Component {\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        let { name = 'file',\n            disabled,\n            accept,\n            onChange = function() { return null; },\n            style = {},\n            className = '',\n            children } = this.props;\n\n        style.position = \"relative\";\n        style.display = 'inline-block';\n        return (\n            <div style={ style } className={className}>\n                <input\n                    type=\"file\"\n                    name={name}\n                    onChange={onChange}\n                    disabled={disabled}\n                    accept={accept}\n                    style={{\n                        position: 'absolute',\n                        top: 0,\n                        left: 0,\n                        opacity: 0,\n                        width: '100%',\n                        height: '100%',\n                        zIndex: 1,\n                    }}\n                />\n                {children}\n            </div>);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/common/file-input/FileInput.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "FileInput",
    "memberof": "DALI_EDITOR/_editor/components/common/file-input/FileInput.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/common/file-input/FileInput.jsx~FileInput",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/common/file-input/FileInput.jsx",
    "importStyle": "FileInput",
    "description": "FileInput component for dragging and dropping files",
    "lineNumber": 6,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/common/file-input/FileInput.jsx~FileInput",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/common/file-input/FileInput.jsx~FileInput#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx",
    "content": "import React, { Component } from 'react';\nimport { Col, Input, Dropdown, MenuItem } from 'react-bootstrap';\nimport DaliIndexTitle from '../../carrousel/dali_index_title/DaliIndexTitle';\nimport GlobalConfig from '../global_config/GlobalConfig';\nimport i18n from 'i18next';\nimport { isSection } from '../../../../common/utils';\nimport Dali from './../../../../core/main';\nimport { toggleFullScreen, isFullScreenOn, fullScreenListener } from '../../../../common/common_tools';\nrequire('./_navBar.scss');\n\n/**\n * Upper navigation bar component\n */\nexport default class DaliNavBar extends Component {\n    /**\n     * Constructor\n     */\n    constructor(props) {\n        super(props);\n\n        /**\n         * Component's initial state\n         */\n        this.state = {\n            showGlobalConfig: false,\n            isFullScreenOn: isFullScreenOn(),\n\n        };\n        /**\n         * Binded function\n         */\n        this.checkFullScreen = this.checkFullScreen.bind(this);\n\n    }\n    /**\n     * Click on plugin category callback\n     */\n    openPlugin(category) {\n        this.props.setcat(category);\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        let disablePlugins = (this.props.navItemsIds.length === 0 || (this.props.navItemSelected === 0 && this.props.containedViewSelected === 0));\n        let modalTitle = \"\";\n        let modalShow = false;\n        return (\n            <Col id=\"iconBar\">\n                <div className=\"grad1\" />\n                <div className=\"navBarSpace\">\n                    <DaliIndexTitle className=\"tituloCurso\"\n                        title={this.props.globalConfig.title}\n                        onNameChanged={this.props.onTitleChanged}/>\n                </div>\n\n                <button\n                    className={ this.props.hideTab === 'show' && this.props.category === 'text' ? 'navButtonPlug active' : 'navButtonPlug' }\n                    title='Text' disabled={false /* disablePlugins*/}\n                    onClick={() => {this.openPlugin('text');}}><i\n                        className=\"material-icons\">text_fields</i><br/> <span\n                        className=\"hideonresize\">{i18n.t(\"Text\")}</span></button>\n                <button\n                    className={ this.props.hideTab === 'show' && this.props.category === 'image' ? 'navButtonPlug active' : 'navButtonPlug' }\n                    title='Images' disabled={false /* disablePlugins*/}\n                    onClick={() => { this.openPlugin('image');}}><i className=\"material-icons\">image</i><br/><span\n                        className=\"hideonresize\"> {i18n.t(\"Images\")}</span></button>\n                <button\n                    className={ this.props.hideTab === 'show' && this.props.category === 'multimedia' ? 'navButtonPlug active' : 'navButtonPlug' }\n                    title={i18n.t(\"Multimedia\")} disabled={false /* disablePlugins*/}\n                    onClick={() => {this.openPlugin('multimedia');}}><i className=\"material-icons\">play_circle_filled</i><br/> <span\n                        className=\"hideonresize\">{i18n.t(\"Multimedia\")}</span></button>\n                <button\n                    className={ this.props.hideTab === 'show' && this.props.category === 'animations' ? ' navButtonPlug active' : 'navButtonPlug' }\n                    title={i18n.t(\"Animations\")} disabled={false /* disablePlugins*/}\n                    style={{ display: 'none' }}\n                    onClick={() => {this.openPlugin('animations');}}><i className=\"material-icons\">toys</i><br/> <span\n                        className=\"hideonresize\">{i18n.t(\"Animations\")}</span></button>\n                <button\n                    className={ this.props.hideTab === 'show' && this.props.category === 'exercises' ? 'navButtonPlug active' : 'navButtonPlug' }\n                    title={i18n.t(\"Exercises\")} disabled={false /* disablePlugins*/}\n                    style={{ display: 'none' }}\n                    onClick={() => {this.openPlugin('exercises'); }}><i className=\"material-icons\">school</i><br/> <span\n                        className=\"hideonresize\">{i18n.t(\"Exercises\")}</span></button>\n\n                <Dropdown id=\"dropdown-menu\" style={{ float: 'right' }}>\n                    <Dropdown.Toggle noCaret className=\"navButton\">\n                        <i className=\"material-icons\">more_vert</i><br/>\n                        <span className=\"hideonresize\" style={{ fontSize: '12px' }}>Menu</span>\n                    </Dropdown.Toggle>\n                    <Dropdown.Menu id=\"topMenu\" className=\"pageMenu super-colors topMenu\">\n                        <MenuItem disabled={this.props.undoDisabled} eventKey=\"1\">\n                            <button className=\"dropdownButton\" title={i18n.t('messages.export_to_HTML')}\n                                disabled={ (this.props.navItemSelected === 0) || this.props.undoDisabled}\n                                onClick={() => this.props.export() }><i className=\"material-icons\">file_download</i>\n                                {i18n.t('messages.export_to_HTML')}\n                            </button>\n                        </MenuItem>\n                        <MenuItem disabled={this.props.undoDisabled} eventKey=\"2\">\n                            <button className=\"dropdownButton\" title={i18n.t('messages.export_to_SCORM')}\n                                disabled={(this.props.navItemSelected === 0) || this.props.undoDisabled}\n                                onClick={() => this.props.scorm() }><i className=\"material-icons\">class</i>\n                                {i18n.t('messages.export_to_SCORM')}\n                            </button>\n                        </MenuItem>\n                        <MenuItem disabled={false} eventKey=\"3\">\n                            <button className=\"dropdownButton\" title={i18n.t('messages.global_config')}\n                                disabled={false}\n                                onClick={() => this.setState({ showGlobalConfig: true })}><i className=\"material-icons\">settings</i>\n                                {i18n.t('messages.global_config')}\n                            </button>\n                        </MenuItem>\n                        <MenuItem divider/>\n                        <MenuItem eventKey=\"5\">\n                            <button className=\"dropdownButton\" title={i18n.t('Open_Catalog')}\n                                onClick={() => {\n                                    this.props.onVishCatalogToggled();\n                                }}><i className=\"material-icons\">grid_on</i>\n                                {i18n.t('Open_Catalog')}\n                            </button>\n                        </MenuItem>\n                        <MenuItem divider/>\n                        <MenuItem eventKey=\"5\">\n                            <button className=\"dropdownButton\"\n                                onClick={(e) => {\n                                    this.props.serverModalOpen();\n                                    this.props.opens();\n                                }}>\n                                <i className=\"material-icons\">folder_open</i>\n                                {i18n.t('Open')}\n                            </button>\n                        </MenuItem>\n                    </Dropdown.Menu>\n                </Dropdown>\n\n                <div className=\"navButtons\">\n                    <button className=\"navButton\"\n                        title={i18n.t(\"messages.fullscreen\")}\n                        onClick={() => {\n                            toggleFullScreen();\n                            this.setState({ isFullScreenOn: isFullScreenOn() });\n                        }}>\n                        {this.state.isFullScreenOn ?\n                            (<i className=\"material-icons\">fullscreen_exit</i>) :\n                            (<i className=\"material-icons\">fullscreen</i>)}\n                        <br/>\n                        <span className=\"hideonresize\">{i18n.t('fullscreen')}</span>\n                    </button>\n                    <button className=\"navButton\"\n                        title=\"Undo\"\n                        disabled={this.props.undoDisabled}\n                        onClick={() => this.props.undo()}>\n                        <i className=\"material-icons\">undo</i>\n                        <br/>\n                        <span className=\"hideonresize\">{i18n.t('Undone')}</span>\n                    </button>\n                    <button className=\"navButton\"\n                        title=\"Redo\"\n                        disabled={this.props.redoDisabled}\n                        onClick={() => this.props.redo()}>\n                        <i className=\"material-icons\">redo</i>\n                        <br/>\n                        <span className=\"hideonresize\">{i18n.t('Redone')}</span>\n                    </button>\n                    <button className=\"navButton\"\n                        title={i18n.t('Save')}\n                        disabled={this.props.undoDisabled }\n                        onClick={() => {\n                            this.props.save();\n                            this.props.serverModalOpen();\n                        }}>\n                        <i className=\"material-icons\">save</i>\n                        <br/>\n                        <span className=\"hideonresize\">{i18n.t('Save')}</span>\n                    </button>\n                    <button className=\"navButton\"\n                        title={i18n.t('Preview')}\n                        disabled={((this.props.navItemSelected === 0 || (this.props.navItemSelected && !Dali.Config.sections_have_content && isSection(this.props.navItemSelected))))}\n                        onClick={() =>\n                        { if (this.props.boxSelected !== 0) {\n                            this.props.onTextEditorToggled(this.props.boxSelected, false);\n                        }\n                        this.props.visor();\n                        }}><i className=\"material-icons\">visibility</i>\n                        <br/>\n                        <span className=\"hideonresize\">{i18n.t('Preview')}</span>\n                    </button>\n                </div>\n                <GlobalConfig show={this.state.showGlobalConfig}\n                    globalConfig={this.props.globalConfig}\n                    changeGlobalConfig={this.props.changeGlobalConfig}\n                    close={()=>{this.setState({ showGlobalConfig: false });}}/>\n            </Col>\n        );\n    }\n\n    /**\n     * Add fullscreen listeners\n     */\n    componentDidMount() {\n        fullScreenListener(this.checkFullScreen, true);\n    }\n\n    /**\n     * Remove fullscreen listeners\n     */\n    componentWillUnmount() {\n        fullScreenListener(this.checkFullScreen, false);\n    }\n\n    /**\n     * Check if browser is in fullscreen mode and update state\n     */\n    checkFullScreen() {\n        this.setState({ isFullScreenOn: isFullScreenOn() });\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "class",
    "name": "DaliNavBar",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx",
    "importStyle": "DaliNavBar",
    "description": "Upper navigation bar component",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 127,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 18
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 24,
    "type": {
      "types": [
        "{\"showGlobalConfig\": *, \"isFullScreenOn\": *}"
      ]
    }
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "openPlugin",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar#openPlugin",
    "access": "public",
    "description": "Click on plugin category callback",
    "lineNumber": 38,
    "params": [
      {
        "name": "category",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar#componentDidMount",
    "access": "public",
    "description": "Add fullscreen listeners",
    "lineNumber": 202,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar#componentWillUnmount",
    "access": "public",
    "description": "Remove fullscreen listeners",
    "lineNumber": 209,
    "params": [],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "method",
    "name": "checkFullScreen",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/dali_nav_bar/DaliNavBar.jsx~DaliNavBar#checkFullScreen",
    "access": "public",
    "description": "Check if browser is in fullscreen mode and update state",
    "lineNumber": 216,
    "params": [],
    "return": null
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx",
    "content": "import React, { Component } from 'react';\nimport { Modal, Grid, Row, Col, FormGroup, Checkbox, ControlLabel, FormControl, InputGroup, Radio, OverlayTrigger, Popover, Button } from 'react-bootstrap';\nimport i18n from 'i18next';\nimport RangeSlider from './range_slider/RangeSlider';\nimport Select from 'react-select';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { suggestions, statusOptions, contextOptions, languages, difLevels, rightsOptions } from './global_options';\nimport Alert from './../../common/alert/Alert';\n\n// Styles\nimport 'react-select/dist/react-select.css';\nrequire('./_globalConfig.scss');\nrequire('./_reactTags.scss');\n\n/**\n * Global course configuration modal\n */\nexport default class GlobalConfig extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /* State from props is an anti-pattern*/\n        this.state = {\n            title: this.props.globalConfig.title || \"\",\n            author: this.props.globalConfig.author || \"\",\n            canvasRatio: this.props.globalConfig.canvasRatio || 16 / 9,\n            age: this.props.globalConfig.age || { min: 0, max: 100 },\n            typicalLearningTime: this.props.globalConfig.typicalLearningTime || { h: 0, m: 0, s: 0 },\n            difficulty: this.props.globalConfig.difficulty || 'easy',\n            rights: this.props.globalConfig.rights || 1,\n            description: this.props.globalConfig.description || '',\n            language: this.props.globalConfig.language || undefined,\n            keywords: this.props.globalConfig.keywords || [],\n            version: this.props.globalConfig.version || '0.0.0',\n            status: this.props.globalConfig.status || 'draft',\n            context: this.props.globalConfig.context || 'school',\n            visorNav: this.props.globalConfig.visorNav || { player: true, sidebar: true },\n            modifiedState: false,\n            showAlert: false,\n        };\n        // Tag handling functions\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n        this.handleDrag = this.handleDrag.bind(this);\n    }\n\n    /**\n     * Renders React component\n     * @returns {code}\n     */\n    render() {\n        const { title, author, canvasRatio, age, typicalLearningTime, difficulty, rights, visorNav, description, language, keywords, version, status, context } = this.state;\n        return (\n            <Modal className=\"pageModal\"\n                show={this.props.show}\n                backdrop={'static'} bsSize=\"large\"\n                aria-labelledby=\"contained-modal-title-lg\"\n                onHide={e => {\n                    // If anything has changed after last save show an alert, otherwise just leave\n                    if (this.state.modifiedState) {\n                        this.setState({ showAlert: true });\n                    } else {\n                        this.cancel();\n                    }\n                }}>\n                <Modal.Header closeButton>\n                    <Modal.Title><span id=\"previewTitle\">{i18n.t('global_config.title')}</span></Modal.Title>\n                </Modal.Header>\n                <Alert className=\"pageModal\"\n                    show={this.state.showAlert}\n                    hasHeader\n                    title={i18n.t(\"messages.save_changes\")}\n                    closeButton\n                    cancelButton\n                    acceptButtonText={'OK'}\n                    onClose={(bool) => {\n                        // If Accept button clicked, state is saved, otherwise close without saving\n                        bool ? this.saveState() : this.cancel();\n                        // Anyway close the alert\n                        this.setState({ showAlert: false });\n                        this.props.close();\n                    }}>\n                    {i18n.t(\"global_config.prompt\")}\n                </Alert>\n                <Modal.Body className=\"gcModalBody\" style={{ overFlowY: 'auto' }}>\n                    <Grid>\n                        <form>\n                            <Row>\n                                <Col xs={12} md={7} lg={7}><br/>\n                                    <h4>{i18n.t('global_config.title_general')}</h4>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.course_title')}</ControlLabel>\n                                        <FormControl type=\"text\"\n                                            value={title}\n                                            placeholder=\"\"\n                                            onChange={e => {this.setState({ modifiedState: true, title: e.target.value });}}/>\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.description')}</ControlLabel>\n                                        <FormControl id=\"descTA\" componentClass=\"textarea\" placeholder={i18n.t('global_config.description_placeholder')} value={description} onInput={e => {this.setState({ description: e.target.value });}} />\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.author')}</ControlLabel>\n                                        <FormControl type=\"text\"\n                                            value={author}\n                                            placeholder={i18n.t('global_config.anonymous')}\n                                            onChange={e => {this.setState({ modifiedState: true, author: e.target.value });}}/>\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.language')}</ControlLabel><br/>\n                                        <Select\n                                            name=\"form-field-lang\"\n                                            value={language}\n                                            options={languages()}\n                                            placeholder={i18n.t(\"global_config.no_lang\")}\n                                            onChange={e => {this.setState({ modifiedState: true, language: e.value });}}\n                                        />\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.rights')}</ControlLabel>\n                                        <OverlayTrigger trigger=\"click\" rootClose placement=\"top\"\n                                            overlay={<Popover id=\"info_licenses\" className=\"advancedPopover\" title=\"Licencias\">\n                                                {i18n.t('global_config.rights_short_txt')}\n                                                <a target=\"_blank\" href={\"https://creativecommons.org/licenses/?lang=\" + i18n.t('currentLang')}> [{i18n.t('Read_more')}] </a>\n                                            </Popover>}>\n                                            <a className=\"miniIcon\"><i className=\"material-icons\">help</i></a>\n                                        </OverlayTrigger>\n                                        {/*\n                                        <a className=\"miniIcon\" target=\"_blank\" href={\"https://creativecommons.org/licenses/?lang=\"+i18n.t('currentLang')}><i className=\"material-icons\">help</i></a>\n                                         */}\n                                        <br/>\n                                        <Select\n                                            name=\"form-field-name-rights\"\n                                            value={rights}\n                                            options={rightsOptions()}\n                                            onChange={e => {this.setState({ modifiedState: true, rights: e.value });}} />\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.keywords')}</ControlLabel><br/>\n                                        <ReactTags tags={keywords}\n                                            suggestions={suggestions()}\n                                            placeholder={i18n.t('global_config.keyw.Add_tag')}\n                                            delimiters={[188, 13]}\n                                            handleDelete={this.handleDelete}\n                                            handleAddition={this.handleAddition}\n                                            handleDrag={this.handleDrag} />\n                                    </FormGroup>\n                                </Col>\n                                <Col className=\"advanced-block\" xs={12} md={5} lg={5}><br/>\n                                    <h4>{i18n.t('global_config.title_advanced')}</h4>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.difficulty')}</ControlLabel><br/>\n                                        <div className=\" W(100%)\">\n                                            <div className=\"D(ib) C(#4e5b65)\">{i18n.t('global_config.dif.' + difficulty)}</div>\n                                            <div className=\"D(ib) Fl(end) C(#4e5b65)\" />\n                                            <div className=\"range-slider Pos(r) Ta(c) H(35px)\">\n                                                <div id=\"outsideInputBox\" style={{ position: 'absolute', boxSizing: 'border-box', width: '100%' }}>\n                                                    <div id=\"insideInputBox\" style={{ marginLeft: '0%', width: difLevels.indexOf(difficulty) * 25 + '%', backgroundColor: 'rgb(95, 204, 199)' }} />\n                                                </div>\n                                                <input type=\"range\" step=\"1\" min=\"0\" max=\"4\" value={difLevels.indexOf(difficulty)} onChange={e =>{this.setState({ modifiedState: true, difficulty: difLevels[e.target.value] }); }}/>\n                                            </div>\n                                        </div>\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.recom_age')}</ControlLabel>\n                                        <RangeSlider\n                                            min={0}\n                                            max={100}\n                                            minRange={1}\n                                            minValue={age.min}\n                                            maxValue={age.max}\n                                            onChange={(state)=>{\n                                                this.setState({ modifiedState: true, age: { max: state.max, min: state.min } });\n                                            }}\n                                            step={1}\n                                        />\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.typicalLearningTime')}</ControlLabel><br/>\n                                        <InputGroup className=\"inputGroup\">\n                                            <FormControl type=\"number\"\n                                                value={typicalLearningTime.h}\n                                                min={0}\n                                                max={100}\n                                                placeholder=\"hour\"\n                                                onChange={e => {this.setState({ modifiedState: true, typicalLearningTime: { h: e.target.value, m: typicalLearningTime.m, s: typicalLearningTime.s } });}}/>\n                                            <InputGroup.Addon>h</InputGroup.Addon>\n                                        </InputGroup>\n                                        <InputGroup className=\"inputGroup\">\n                                            <FormControl type=\"number\"\n                                                value={typicalLearningTime.m}\n                                                min={0}\n                                                max={59}\n                                                placeholder=\"min\"\n                                                onChange={e => {this.setState({ modifiedState: true, typicalLearningTime: { h: typicalLearningTime.h, m: e.target.value, s: typicalLearningTime.s } });}}/>\n                                            <InputGroup.Addon>m</InputGroup.Addon>\n                                        </InputGroup>{/*\n                                      <InputGroup className=\"inputGroup\">\n                                        <FormControl  type=\"number\"\n                                                      value={typicalLearningTime.s}\n                                                      min={0}\n                                                      max={59}\n                                                      placeholder=\"sec\"\n                                                      onChange={e => {this.setState({typicalLearningTime: {h:typicalLearningTime.h, m:typicalLearningTime.m, s:e.target.value}})}}/>\n                                        <InputGroup.Addon>s</InputGroup.Addon>\n                                      </InputGroup>*/}\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.context')}</ControlLabel><br/>\n                                        <Select\n                                            name=\"form-field-name-context\"\n                                            value={context}\n                                            options={contextOptions()}\n                                            onChange={e => {this.setState({ modifiedState: true, context: e.value });}} />\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.aspect_ratio')}</ControlLabel><br/>\n                                        <Radio name=\"radioGroup\" inline checked={canvasRatio === 16 / 9 } onChange={e => {this.setState({ modifiedState: true, canvasRatio: 4 / 3 });}}>\n                                            16/9\n                                        </Radio>\n                                        {' '}\n                                        <Radio name=\"radioGroup\" inline checked={canvasRatio === 4 / 3 } onChange={e => {this.setState({ modifiedState: true, canvasRatio: 4 / 3 });}}>\n                                            4/3\n                                        </Radio>\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <ControlLabel>{i18n.t('global_config.visor_nav.title')}</ControlLabel><br/>\n                                        <Checkbox inline onChange={(e)=>{this.setState({ modifiedState: true, visorNav: { player: !visorNav.player, sidebar: visorNav.sidebar } });}} checked={visorNav.player}>\n                                            {i18n.t('global_config.visor_nav.player')}\n                                        </Checkbox>\n                                        <Checkbox inline onChange={(e)=>{this.setState({ modifiedState: true, visorNav: { player: visorNav.player, sidebar: !visorNav.sidebar } });}} checked={visorNav.sidebar}>\n                                            {i18n.t('global_config.visor_nav.sidebar')}\n                                        </Checkbox>\n                                    </FormGroup>\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.status')}</ControlLabel><br/>\n                                        <Select\n                                            name=\"form-field-name-status\"\n                                            value={status}\n                                            options={statusOptions()}\n                                            onChange={e => {this.setState({ modifiedState: true, status: e.value }); }} />\n                                    </FormGroup>\n\n                                </Col>\n                                {/*\n                                <Col xs={12} md={6} lg={6}><br/>\n                                     version commented, transparent for the user\n                                    <FormGroup >\n                                        <ControlLabel>{i18n.t('global_config.version')}</ControlLabel>\n                                        <FormControl   type=\"text\"\n                                                       value={version}\n                                                       placeholder=\"\"\n                                                       onChange={e => {this.setState({version: e.target.value})}}/>\n                                    </FormGroup>\n                                </Col>*/}\n\n                            </Row>\n                        </form>\n                    </Grid>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"default\" id=\"insert_plugin_config_modal\" onClick={e => {\n                        this.cancel(); e.preventDefault();\n                    }}>{i18n.t(\"global_config.Discard\")}</Button>\n                    <Button bsStyle=\"primary\" id=\"insert_plugin_config_modal\" onClick={e => {\n                        this.saveState(); e.preventDefault();\n                    }}>{i18n.t(\"global_config.Accept\")}</Button>{'   '}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    /** *\n     * Keyword deleted callback\n     * @param i position of the keyword\n     */\n    handleDelete(i) {\n        let tags = Object.assign([], this.state.keywords);\n        tags.splice(i, 1);\n        this.setState({ modifiedState: true, keywords: tags });\n    }\n\n    /**\n     * Keyword added callback\n     * @param tag Keyword name\n     */\n    handleAddition(tag) {\n        let tags = Object.assign([], this.state.keywords);\n        tags.push({\n            id: tags.length + 1,\n            text: tag,\n        });\n        this.setState({ modifiedState: true, keywords: tags });\n    }\n\n    /**\n     * Keyword moved callback\n     * @param tag Tag moving\n     * @param currPos Current position\n     * @param newPos New position\n     */\n    handleDrag(tag, currPos, newPos) {\n        let tags = Object.assign([], this.state.keywords);\n\n        // mutate array\n        tags.splice(currPos, 1);\n        tags.splice(newPos, 0, tag);\n\n        // re-render\n        this.setState({ modifiedState: true, keywords: tags });\n    }\n\n    /**\n     * Save configuration changes\n     */\n    saveState() {\n        this.setState({ modifiedState: false });\n        this.props.changeGlobalConfig(\"STATE\", this.state);\n        this.props.close();\n    }\n\n    /**\n     * Discard configuration changes\n     */\n    cancel() {\n        this.setState({\n            title: this.props.globalConfig.title || \"\",\n            author: this.props.globalConfig.author || \"\",\n            canvasRatio: this.props.globalConfig.canvasRatio || 16 / 9,\n            age: this.props.globalConfig.age || { min: 0, max: 100 },\n            typicalLearningTime: this.props.globalConfig.typicalLearningTime || { h: 0, m: 0, s: 0 },\n            difficulty: this.props.globalConfig.difficulty || 'easy',\n            rights: this.props.globalConfig.rights || 1,\n            description: this.props.globalConfig.description || '',\n            language: this.props.globalConfig.language || undefined,\n            keywords: this.props.globalConfig.keywords || [],\n            version: this.props.globalConfig.version || '0.0.0',\n            status: this.props.globalConfig.status || 'draft',\n            context: this.props.globalConfig.context || 'school',\n            visorNav: this.props.globalConfig.visorNav || { player: true, sidebar: true },\n            modifiedState: false,\n        });\n\n        //  Comment the following line if you don't want to exit when changes are discarded\n        this.props.close();\n\n    }\n\n    /**\n     * If title is changed from outside\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        if (this.props.globalConfig.title !== nextProps.globalConfig.title) {\n            this.setState({\n                title: nextProps.globalConfig.title || \"\",\n            });\n        }\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "class",
    "name": "GlobalConfig",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx",
    "importStyle": "GlobalConfig",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 137,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"title\": *, \"author\": *, \"canvasRatio\": *, \"age\": *, \"typicalLearningTime\": *, \"difficulty\": *, \"rights\": *, \"description\": *, \"language\": *, \"keywords\": *, \"version\": *, \"status\": *, \"context\": *, \"visorNav\": *, \"modifiedState\": *, \"showAlert\": *}"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#render",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "handleDelete",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#handleDelete",
    "access": "public",
    "description": "Keyword deleted callback",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "position of the keyword"
      }
    ],
    "return": null
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "handleAddition",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#handleAddition",
    "access": "public",
    "description": "Keyword added callback",
    "lineNumber": 290,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "Keyword name"
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "handleDrag",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#handleDrag",
    "access": "public",
    "description": "Keyword moved callback",
    "lineNumber": 305,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tag",
        "description": "Tag moving"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "currPos",
        "description": "Current position"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newPos",
        "description": "New position"
      }
    ],
    "return": null
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "saveState",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#saveState",
    "access": "public",
    "description": "Save configuration changes",
    "lineNumber": 319,
    "params": [],
    "return": null
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "cancel",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#cancel",
    "access": "public",
    "description": "Discard configuration changes",
    "lineNumber": 328,
    "params": [],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/GlobalConfig.jsx~GlobalConfig#componentWillReceiveProps",
    "access": "public",
    "description": "If title is changed from outside",
    "lineNumber": 356,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "content": "import i18n from 'i18next';\n/**\n * Gets a translated array of suggested keywords\n * @returns {array} Array of keywords\n */\nexport function suggestions() {\n    return [\n        i18n.t(\"global_config.keylist.Art\"),\n        i18n.t(\"global_config.keylist.Biology\"),\n        i18n.t(\"global_config.keylist.Chemistry\"),\n        i18n.t(\"global_config.keylist.Citizenship\"),\n        i18n.t(\"global_config.keylist.Computerscience\"),\n        i18n.t(\"global_config.keylist.Economics\"),\n        i18n.t(\"global_config.keylist.Education\"),\n        i18n.t(\"global_config.keylist.Engineering\"),\n        i18n.t(\"global_config.keylist.Foreignlanguages\"),\n        i18n.t(\"global_config.keylist.Generalculture\"),\n        i18n.t(\"global_config.keylist.Geography\"),\n        i18n.t(\"global_config.keylist.Geology\"),\n        i18n.t(\"global_config.keylist.History\"),\n        i18n.t(\"global_config.keylist.Humanities\"),\n        i18n.t(\"global_config.keylist.Literature\"),\n        i18n.t(\"global_config.keylist.Maths\"),\n        i18n.t(\"global_config.keylist.Music\"),\n        i18n.t(\"global_config.keylist.Naturalscience\"),\n        i18n.t(\"global_config.keylist.Physics\"),\n        i18n.t(\"global_config.keylist.Technology\"),\n    ];\n}\n\n/**\n * Gets the translated array of course status options\n * @returns {array} Options\n */\nexport function statusOptions() {\n    return [\n        { label: i18n.t(\"global_config.status_list.draft\"), value: 'draft' },\n        { label: i18n.t(\"global_config.status_list.final\"), value: 'final' },\n        { label: i18n.t(\"global_config.status_list.revised\"), value: 'revised' },\n        { label: i18n.t(\"global_config.status_list.unavailable\"), value: 'unavailable' }];\n}\n\n/**\n * Gets the translated array of course context options\n * @returns {array} Array of options\n */\nexport function contextOptions() {\n    return [\n        { label: i18n.t(\"global_config.context_list.school\"), value: 'school' },\n        { label: i18n.t(\"global_config.context_list.high_education\"), value: 'higher education' },\n        { label: i18n.t(\"global_config.context_list.training\"), value: 'training' },\n        { label: i18n.t(\"global_config.context_list.other\"), value: 'other' }];\n}\n\n/**\n * Gets the translated array of course license options\n * @returns {array} Array of options\n */\nexport function rightsOptions() {\n    return [\n        { value: \"Public Domain\", label: i18n.t(\"global_config.public_domain\") },\n        { value: \"CreativeCommons BY\", label: \"CreativeCommons BY\" },\n        { value: \"CreativeCommons BY-SA\", label: \"CreativeCommons BY-SA\" },\n        { value: \"CreativeCommons BY-ND\", label: \"CreativeCommons BY-ND\" },\n        { value: \"CreativeCommons BY-NC\", label: \"CreativeCommons BY-NC\" },\n        { value: \"CreativeCommons BY-NC-SA\", label: \"CreativeCommons BY-NC-SA\" },\n        { value: \"CreativeCommons BY-NC-ND\", label: \"CreativeCommons BY-NC-ND\" }];\n}\n\n/**\n * Array of difficulty levels\n */\nexport const difLevels = ['very easy', 'easy', 'medium', 'difficult', 'very difficult'];\n\n/**\n * Sort an array of objects alphabetically by value of parameter key\n * @param arr Arary to order\n * @param key Key by which to order the array\n */\nfunction sortByKey(arr, key) {\n    return arr.sort((a, b) => a[key].localeCompare(b[key]));\n}\n\n/**\n * Returns the alphabetically sorted list of available languages\n * @returns {*}\n */\nexport function languages() {\n    return sortByKey([\n        { value: \"af\", label: i18n.t(\"languages.Afrikanns\") },\n        { value: \"sq\", label: i18n.t(\"languages.Albanian\") },\n        { value: \"ar\", label: i18n.t(\"languages.Arabic\") },\n        { value: \"hy\", label: i18n.t(\"languages.Armenian\") },\n        { value: \"eu\", label: i18n.t(\"languages.Basque\") },\n        { value: \"bn\", label: i18n.t(\"languages.Bengali\") },\n        { value: \"bg\", label: i18n.t(\"languages.Bulgarian\") },\n        { value: \"ca\", label: i18n.t(\"languages.Catalan\") },\n        { value: \"km\", label: i18n.t(\"languages.Cambodian\") },\n        { value: \"zh\", label: i18n.t(\"languages.Chinese\") },\n        { value: \"hr\", label: i18n.t(\"languages.Croation\") },\n        { value: \"cs\", label: i18n.t(\"languages.Czech\") },\n        { value: \"da\", label: i18n.t(\"languages.Danish\") },\n        { value: \"nl\", label: i18n.t(\"languages.Dutch\") },\n        { value: \"en\", label: i18n.t(\"languages.English\") },\n        { value: \"et\", label: i18n.t(\"languages.Estonian\") },\n        { value: \"fj\", label: i18n.t(\"languages.Fiji\") },\n        { value: \"fi\", label: i18n.t(\"languages.Finnish\") },\n        { value: \"fr\", label: i18n.t(\"languages.French\") },\n        { value: \"ka\", label: i18n.t(\"languages.Georgian\") },\n        { value: \"de\", label: i18n.t(\"languages.German\") },\n        { value: \"el\", label: i18n.t(\"languages.Greek\") },\n        { value: \"gu\", label: i18n.t(\"languages.Gujarati\") },\n        { value: \"he\", label: i18n.t(\"languages.Hebrew\") },\n        { value: \"hi\", label: i18n.t(\"languages.Hindi\") },\n        { value: \"hu\", label: i18n.t(\"languages.Hungarian\") },\n        { value: \"is\", label: i18n.t(\"languages.Icelandic\") },\n        { value: \"id\", label: i18n.t(\"languages.Indonesian\") },\n        { value: \"ga\", label: i18n.t(\"languages.Irish\") },\n        { value: \"it\", label: i18n.t(\"languages.Italian\") },\n        { value: \"ja\", label: i18n.t(\"languages.Japanese\") },\n        { value: \"jw\", label: i18n.t(\"languages.Javanese\") },\n        { value: \"ko\", label: i18n.t(\"languages.Korean\") },\n        { value: \"la\", label: i18n.t(\"languages.Latin\") },\n        { value: \"lv\", label: i18n.t(\"languages.Latvian\") },\n        { value: \"lt\", label: i18n.t(\"languages.Lithuanian\") },\n        { value: \"mk\", label: i18n.t(\"languages.Macedonian\") },\n        { value: \"ms\", label: i18n.t(\"languages.Malay\") },\n        { value: \"ml\", label: i18n.t(\"languages.Malayalam\") },\n        { value: \"mt\", label: i18n.t(\"languages.Maltese\") },\n        { value: \"mi\", label: i18n.t(\"languages.Maori\") },\n        { value: \"mr\", label: i18n.t(\"languages.Marathi\") },\n        { value: \"mn\", label: i18n.t(\"languages.Mongolian\") },\n        { value: \"ne\", label: i18n.t(\"languages.Nepali\") },\n        { value: \"no\", label: i18n.t(\"languages.Norwegian\") },\n        { value: \"fa\", label: i18n.t(\"languages.Persian\") },\n        { value: \"pl\", label: i18n.t(\"languages.Polish\") },\n        { value: \"pt\", label: i18n.t(\"languages.Portuguese\") },\n        { value: \"pa\", label: i18n.t(\"languages.Punjabi\") },\n        { value: \"qu\", label: i18n.t(\"languages.Quechua\") },\n        { value: \"ro\", label: i18n.t(\"languages.Romanian\") },\n        { value: \"ru\", label: i18n.t(\"languages.Russian\") },\n        { value: \"sm\", label: i18n.t(\"languages.Samoan\") },\n        { value: \"sr\", label: i18n.t(\"languages.Serbian\") },\n        { value: \"sk\", label: i18n.t(\"languages.Slovak\") },\n        { value: \"sl\", label: i18n.t(\"languages.Slovenian\") },\n        { value: \"es\", label: i18n.t(\"languages.Spanish\") },\n        { value: \"sw\", label: i18n.t(\"languages.Swahili\") },\n        { value: \"sv\", label: i18n.t(\"languages.Swedish\") },\n        { value: \"ta\", label: i18n.t(\"languages.Tamil\") },\n        { value: \"tt\", label: i18n.t(\"languages.Tatar\") },\n        { value: \"te\", label: i18n.t(\"languages.Telugu\") },\n        { value: \"th\", label: i18n.t(\"languages.Thai\") },\n        { value: \"bo\", label: i18n.t(\"languages.Tibetan\") },\n        { value: \"to\", label: i18n.t(\"languages.Tonga\") },\n        { value: \"tr\", label: i18n.t(\"languages.Turkish\") },\n        { value: \"uk\", label: i18n.t(\"languages.Ukranian\") },\n        { value: \"ur\", label: i18n.t(\"languages.Urdu\") },\n        { value: \"uz\", label: i18n.t(\"languages.Uzbek\") },\n        { value: \"vi\", label: i18n.t(\"languages.Vietnamese\") },\n        { value: \"cy\", label: i18n.t(\"languages.Welsh\") },\n        { value: \"xh\", label: i18n.t(\"languages.Xhosa\") }], 'label');\n}\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "suggestions",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6~suggestions",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "importStyle": "{suggestions}",
    "description": "Gets a translated array of suggested keywords",
    "lineNumber": 6,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} Array of keywords"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "Array of keywords"
    },
    "params": []
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "statusOptions",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6~statusOptions",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "importStyle": "{statusOptions}",
    "description": "Gets the translated array of course status options",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} Options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "Options"
    },
    "params": []
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "contextOptions",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6~contextOptions",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "importStyle": "{contextOptions}",
    "description": "Gets the translated array of course context options",
    "lineNumber": 47,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} Array of options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "Array of options"
    },
    "params": []
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "rightsOptions",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6~rightsOptions",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "importStyle": "{rightsOptions}",
    "description": "Gets the translated array of course license options",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{array} Array of options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "array"
      ],
      "spread": false,
      "description": "Array of options"
    },
    "params": []
  },
  {
    "__docId__": 154,
    "kind": "variable",
    "name": "difLevels",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6~difLevels",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "importStyle": "{difLevels}",
    "description": "Array of difficulty levels",
    "lineNumber": 73,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "sortByKey",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6~sortByKey",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "importStyle": null,
    "description": "Sort an array of objects alphabetically by value of parameter key",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "arr",
        "description": "Arary to order"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Key by which to order the array"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "languages",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6~languages",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/global_options.es6",
    "importStyle": "{languages}",
    "description": "Returns the alphabetically sorted list of available languages",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx",
    "content": "import React, { Component } from 'react';\n\nrequire('./_rangeslider.scss');\n/**\n * Range slider component with min and max draggable values\n */\nexport default class RangeSlider extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super();\n        let min = props.minValue || props.min;\n        let max = props.maxValue || props.max;\n        /**\n         * Component's initial state\n         */\n        this.state = {\n            min: props.min,\n            max: props.max,\n            minElement: { value: min },\n            maxElement: { value: max },\n            minRange: props.minRange || 500,\n        };\n    }\n\n    /**\n     * Keep state in sync if we get new props\n     * @param props\n     */\n    componentWillReceiveProps(props) {\n        let min = this.props.minValue || this.props.min;\n        let max = this.props.maxValue || this.props.max;\n        this.state.minElement.value = min;\n        this.state.maxElement.value = max;\n        this.setState({ min: min, max: max });\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        let classN = (this.props.className ? this.props.className : '') + ' W(100%)';\n        return (\n            <div style={this.props.style} className={classN}>\n                <div className=\"D(ib) C(#4e5b65)\">{this.state.min}</div>\n                <div className=\"D(ib) Fl(end) C(#4e5b65)\">{this.state.max}{(this.props.max === this.state.max) ? '+' : ''}</div>\n                <div style={this.props.style}\n                    className={this.props.className + ' range-slider Pos(r) Ta(c) H(35px)'}>\n                    <div style={{\n                        position: 'absolute',\n                        boxSizing: 'border-box',\n                        width: '100%',\n                        paddingLeft: '8px',\n                        paddingRight: '8px',\n                        top: '7px' }}>\n                        <div style={{\n                            marginLeft: (this.state.min - this.props.min) / (this.props.max - this.props.min) * 100 + '%',\n                            width: (100 - (this.state.min - this.props.min + this.props.max - this.state.max) / (this.props.max - this.props.min) * 100) + '%',\n                            height: '4px',\n                            backgroundColor: '#5FCCC7' }}/>\n                    </div>\n                    <input onChange={\n                        (ev)=>{\n                            if (ev.target.value < this.state.max - this.state.minRange) {\n                                this.setState(\n                                    { min: parseInt(ev.target.value, 10) },\n                                    function() {\n                                        this.props.onChange(this.state);\n                                    }\n                                );\n                            } else {\n                                this.state.minElement.value = this.state.min;\n                                this.setState(\n                                    { min: parseInt(this.state.min, 10) },\n                                    function() {\n                                        this.props.onChange(this.state);\n                                    }\n                                );\n                            }\n                        }\n                    }\n                    ref={(el)=>{this.state.minElement = el;}}\n                    min={this.props.min}\n                    max={this.props.max}\n                    step={this.props.step}\n                    type=\"range\" />\n                    <input onChange={\n                        (ev)=>{\n                            if (ev.target.value > this.state.min + this.state.minRange) {\n                                this.setState(\n                                    { max: parseInt(ev.target.value, 10) },\n                                    function() {\n                                        this.props.onChange(this.state);\n                                    }\n                                );\n                            }\n                            else {\n                                this.state.maxElement.value = this.state.max;\n                                this.setState(\n                                    { max: parseInt(this.state.max, 10) },\n                                    function() {\n                                        this.props.onChange(this.state);\n                                    }\n                                );\n                            }\n                        }\n                    }\n                    ref={(el)=>{this.state.maxElement = el;}}\n                    min={this.props.min}\n                    max={this.props.max}\n                    step={this.props.step}\n                    type=\"range\" />\n                </div>\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "class",
    "name": "RangeSlider",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx",
    "importStyle": "RangeSlider",
    "description": "Range slider component with min and max draggable values",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 159,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 19,
    "type": {
      "types": [
        "{\"min\": *, \"max\": *, \"minElement\": *, \"maxElement\": *, \"minRange\": *}"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider#componentWillReceiveProps",
    "access": "public",
    "description": "Keep state in sync if we get new props",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/global_config/range_slider/RangeSlider.jsx~RangeSlider#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx",
    "content": "import React, { Component } from 'react';\nimport { Button, Col } from 'react-bootstrap';\nimport interact from 'interact.js';\nimport Dali from './../../../../core/main';\nimport ReactDOM from 'react-dom';\nrequire('./_pluginRibbon.scss');\n\n/**\n * Plugin ribbon inside toolbar\n */\nexport default class PluginRibbon extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            buttons: [],\n        };\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        return (\n            <Col id=\"ribbon\"\n                md={12}\n                xs={12}\n                style={{\n                    height: this.props.ribbonHeight,\n                    overflowY: 'hidden',\n                }} ref=\"holder\">\n                <div id=\"insideribbon\" className=\"row\">\n                    <div id=\"ribbonList\">\n                        {this.state.buttons.map((item, index) => {\n                            let button = this.state.buttons[index];\n                            if (button.category === this.props.category || this.props.category === 'all') {\n                                let clase = \"\" + button.icon;\n                                return (<div key={index} className=\"buttonPlace\">\n                                    <Button className={\"rib \" + (button.allowFloatingBox ? \"floatingDaliBox\" : \"\")}\n                                        disabled={this.props.disabled}\n                                        key={index}\n                                        name={item.name}\n                                        bsSize=\"large\"\n                                        draggable=\"false\"\n                                        style={(button.iconFromUrl) ? {\n                                            padding: '8px 8px 8px 45px',\n                                            backgroundImage: 'url(' + clase + ')',\n                                            backgroundSize: '32px',\n                                            backgroundPosition: '8px',\n                                            backgroundRepeat: 'no-repeat',\n                                        } : {}\n                                        }>\n                                        <i className=\"material-icons\" style={(button.iconFromUrl) ? { display: 'none' } : {}}>{clase}</i> {button.displayName}\n                                    </Button>\n                                </div>);\n                            }\n                            return null;\n                        })}\n                    </div>\n                </div>\n            </Col>\n        );\n    }\n\n    /**\n     * Scroll handler\n     * @param e\n     */\n    handleScroll(e) {\n        let element = this.props.containedViewSelected !== 0 ? document.getElementById(\"containedCanvas\") : document.getElementById(\"canvas\");\n        if (e.deltaY > 0) { // scroll-down\n            element.scrollTop = element.scrollTop + 20;\n        }else{ // scroll-up\n            element.scrollTop = element.scrollTop - 20;\n        }\n    }\n\n    /**\n     * Before component unmounts\n     */\n    componentWillUnmount() {\n        const holder = ReactDOM.findDOMNode(this.refs.holder);\n        holder.removeEventListener('mousewheel', this.handleScroll);\n    }\n\n    /**\n     * Reset interact container\n     * @param nextProps\n     * @param nextState\n     */\n    componentDidUpdate() {\n        let container;\n        if(this.props.containedViewSelected !== 0) {\n            container = \"containedCanvas\";\n        }else{\n            container = \"canvas\";\n        }\n        interact(\".rib\")\n            .draggable({\n                autoScroll: {\n                    container: document.getElementById(container),\n                    margin: 50,\n                    speed: 400,\n                    distance: 0,\n                    interval: 0,\n                },\n            });\n\n    }\n\n    /**\n     * After component mounts\n     * Load available plugins from API\n     * Set interact and other listeners\n     */\n    componentDidMount() {\n        Dali.API_Private.listenEmission(Dali.API_Private.events.addMenuButtons, e => {\n            this.setState({ buttons: this.state.buttons.concat(e.detail) });\n\n            const holder = ReactDOM.findDOMNode(this.refs.holder);\n            holder.addEventListener('mousewheel', this.handleScroll);\n\n            let container;\n\n            if(this.props.containedViewSelected !== 0) {\n                container = \"containedCanvas\";\n\n            }else{\n\n                container = \"canvas\";\n\n            }\n            let elContainer = document.getElementById(container);\n            interact.dynamicDrop(true);\n            interact(\".rib\")\n                .draggable({\n                    inertia: true,\n                    onstart: function(event) {\n                        changeOverflow(true);\n                        let original = event.target;\n                        let parent = original.parentNode;\n                        let dw = original.offsetWidth;\n                        let clone = original.cloneNode(true),\n                            x = (parseFloat(original.getAttribute('data-x') - dw, 10) || 0),\n                            y = (parseFloat(original.getAttribute('data-y'), 10) || 0);\n                        clone.setAttribute(\"id\", \"clone\");\n                        clone.setAttribute('data-x', x);\n                        clone.setAttribute('data-y', y);\n                        parent.appendChild(clone);\n                        // translate the element\n                        clone.style.webkitTransform =\n                        clone.style.transform =\n                            'translate(' + (x) + 'px, ' + (y) + 'px)';\n                        clone.style.position = 'absolute';\n                    },\n                    onmove: (event) => {\n                        let target = document.getElementById('clone'),\n                            // keep the dragged position in the data-x/data-y attributes\n\n                            x = (parseFloat(target.getAttribute('data-x'), 10) || 0) + event.dx,\n                            y = (parseFloat(target.getAttribute('data-y'), 10) || 0) + event.dy;\n\n                        // translate the element\n                        target.style.webkitTransform =\n                        target.style.transform =\n                            'translate(' + (x) + 'px, ' + (y) + 'px)';\n                        target.style.zIndex = '9999';\n\n                        target.classList.add('ribdrag');\n\n                        // update the position attributes\n                        target.setAttribute('data-x', x);\n                        target.setAttribute('data-y', y);\n\n                    },\n                    onend: (event) => {\n                        changeOverflow(false);\n                        let original = event.target;\n                        let parent = original.parentNode;\n                        let dw = original.offsetWidth;\n                        let clone = document.getElementById('clone');\n\n                        let target = clone,\n                            x = 0,\n                            y = 0;\n                        target.style.webkitTransform =\n                        target.style.transform =\n                            'translate(' + (x) + 'px, ' + y + 'px)';\n\n                        target.style.zIndex = '9999';\n                        target.style.position = 'relative';\n                        target.classList.remove('ribdrag');\n\n                        target.setAttribute('data-x', x);\n                        target.setAttribute('data-y', y);\n\n                        parent.removeChild(clone);\n                        event.stopPropagation();\n                    },\n                });\n        });\n    }\n\n    /**\n     * Before component unmounts\n     * Remove interact reference and listeners\n     */\n    componentWillUnmount() {\n        interact('.rib').unset();\n    }\n}\n\n/** *\n * Change ribbon CSS while dragging plugin in order to avoid overflow and scroll bug\n * @param bool\n */\nfunction changeOverflow(bool) {\n    document.getElementById('ribbonRow').style.overflowX = bool ? 'visible' : 'auto';\n    document.getElementById('ribbon').style.overflowX = bool ? 'visible' : 'hidden';\n    document.getElementById('ribbon').style.overflowY = bool ? 'visible' : 'hidden';\n    document.getElementById('insideribbon').style.overflowY = bool ? 'visible' : 'hidden';\n    document.getElementById('ribbonList').style.overflowY = bool ? 'visible' : 'hidden';\n    document.getElementById('ribbonRow').style.overflowY = bool ? 'visible' : 'hidden';\n    document.getElementById('canvas').style.zIndex = bool ? '-1' : '0';\n    document.getElementById('containedCanvas').style.zIndex = bool ? '-1' : '0';\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "PluginRibbon",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx",
    "importStyle": "PluginRibbon",
    "description": "Plugin ribbon inside toolbar",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#state",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"buttons\": *}"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "handleScroll",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#handleScroll",
    "access": "public",
    "description": "Scroll handler",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts",
    "lineNumber": 85,
    "params": [],
    "return": null
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#componentDidUpdate",
    "access": "public",
    "description": "Reset interact container",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#componentDidMount",
    "access": "public",
    "description": "After component mounts\nLoad available plugins from API\nSet interact and other listeners",
    "lineNumber": 120,
    "params": [],
    "return": null
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~PluginRibbon#componentWillUnmount",
    "access": "public",
    "description": "Before component unmounts\nRemove interact reference and listeners",
    "lineNumber": 212,
    "params": [],
    "return": null
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "changeOverflow",
    "memberof": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx~changeOverflow",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/nav_bar/plugin_ribbon/PluginRibbon.jsx",
    "importStyle": null,
    "description": "Change ribbon CSS while dragging plugin in order to avoid overflow and scroll bug",
    "lineNumber": 221,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bool",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx",
    "content": "import React, { Component } from 'react';\nimport { Modal, Button, Row } from 'react-bootstrap';\nimport Dali from './../../../core/main';\n\n/**\n * Configuration modal for plugins that require it\n */\nexport default class PluginConfigModal extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{show: boolean, pluginActive: string, reason: null, disabledButton: boolean}}\n         */\n        this.state = {\n            show: false,\n            pluginActive: '',\n            reason: null,\n            disabledButton: false,\n        };\n    }\n\n    /**\n     * Before component updates\n     * Gets config updates from Plugin API\n     * @param nextProps\n     * @param nextState\n     */\n    componentWillUpdate(nextProps, nextState) {\n\n        if(this.state.show === false && nextState.show === true &&\n            Dali.Plugins.get(nextState.pluginActive) !== undefined &&\n            Dali.Plugins.get(nextState.pluginActive).getConfig().needsConfirmation &&\n            nextState.disabledButton !== true) {\n            this.setState({ disabledButton: true });\n        }\n\n        if (nextState.disabledButton === true &&\n            Dali.Plugins.get(this.state.pluginActive) !== undefined &&\n            (Dali.Plugins.get(this.state.pluginActive).getConfig().needsConfirmation &&\n            !Dali.Plugins.get(this.state.pluginActive).getState().editing)) {\n            this.setState({ disabledButton: false });\n        }\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        return (\n            <Modal className=\"pageModal pluginconfig\"\n                backdrop=\"static\"\n                bsSize=\"large\"\n                show={this.state.show}\n                onHide={()=>{ this.setState({ show: false, reason: null }); }}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Plugin Configuration</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Row >\n                        <div ref={c => {\n                            if(c !== null) {\n                                Dali.API_Private.answer(Dali.API_Private.events.openConfig, c);\n                            }\n                        }} />\n                    </Row>\n                    <div id=\"plugin_config_info\" />\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button bsStyle=\"default\" onClick={e => {\n                        this.setState({ show: false, reason: null });\n                    }}>Cancel</Button>\n                    <Button ref=\"plugin_insertion\" bsStyle=\"primary\" id=\"insert_plugin_config_modal\" disabled={this.state.disabledButton}\n                        onClick={e => {\n                            Dali.Plugins.get(this.state.pluginActive).render(this.state.reason);\n                            this.setState({ show: false, reason: null });\n                        }}>Insert Plugin</Button>\n\n                </Modal.Footer>\n\n            </Modal>\n        );\n    }\n\n    /**\n     * After component mounts.\n     * Gets configuration from Plugin API\n     */\n    componentDidMount() {\n        Dali.API_Private.listenEmission(Dali.API_Private.events.openConfig, (e) => {\n            this.setState({ show: true, pluginActive: e.detail.name, reason: e.detail.reason });\n        });\n\n        Dali.API_Private.listenEmission(Dali.API_Private.events.configModalNeedsUpdate, (e)=>{\n            this.forceUpdate();\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "class",
    "name": "PluginConfigModal",
    "memberof": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx",
    "importStyle": "PluginConfigModal",
    "description": "Configuration modal for plugins that require it",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "{show: boolean, pluginActive: string, reason: null, disabledButton: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal#componentWillUpdate",
    "access": "public",
    "description": "Before component updates\nGets config updates from Plugin API",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/plugin_config_modal/PluginConfigModal.jsx~PluginConfigModal#componentDidMount",
    "access": "public",
    "description": "After component mounts.\nGets configuration from Plugin API",
    "lineNumber": 96,
    "params": [],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { findParentBySelector } from '../../../../common/utils';\nrequire('./_click_n_hold.scss');\n/*\n* Component wrapper for editing marks by dragging them\n* @example <ClickNHold onClickNHold={e=>{...}} // callback\n*             time={2}>   // time to hold (secs)\n*           <Component1/><Component2/>...  //Children\n*  </ClickNHold>\n*\n*/\nexport default class ClickNHold extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{holding: boolean, start: number, ended: boolean}}\n         */\n        this.state = {\n            holding: false,\n            start: 0,\n            ended: false,\n        };\n        /**\n         * Binded function\n         */\n        this.start = this.start.bind(this);\n        /**\n         * Binded function\n         */\n        this.end = this.end.bind(this);\n        /**\n         * Binded function\n         */\n        this.timeout = this.timeout.bind(this);\n        /**\n         * Binded function\n         */\n        this.overlay = this.overlay.bind(this);\n        /**\n         * Binded function\n         */\n        this.mouseLeave = this.mouseLeave.bind(this);\n    }\n\n    /**\n     * Drag start callback\n     * @param e Event\n     */\n    start(e) {\n        let ended = this.state.ended;\n        let start = Date.now();\n        this.setState({ start: start, holding: true, ended: false });\n        let time = this.props.time;\n        setTimeout(function() {this.timeout(start);}.bind(this), time * 100 + 1);\n        e.stopPropagation();\n    }\n\n    /**\n     * Drag end callback\n     * @param e Event\n     */\n    end(e) {\n        this.setState({ start: 0, holding: false, ended: true });\n        // e.stopPropagation()\n    }\n\n    /**\n     * Timeout callback\n     * @param start\n     */\n    timeout(start) {\n        // Only edit mark if enough time has passed\n        if (this.state.holding && this.state.start === start) {\n            if (this.props.onClickNHold) {\n                this.props.onClickNHold(start);\n            }\n            this.setState({ ended: true, holding: false, editing: true });\n            this.overlay();\n            return;\n\n        }\n        this.setState({ ended: true, editing: false });\n\n    }\n\n    /**\n     * Mouse leave callback\n     * @param e Event\n     */\n    mouseLeave(e) {\n        if (this.state.holding) {\n            this.end(e);\n        }\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        let classList = '';\n        classList += this.state.holding ? 'holding ' : '';\n        classList += this.state.ended ? 'ended ' : '';\n        classList += this.state.editing ? 'editing' : '';\n        return (\n            <div draggable=\"true\"\n                className={classList}\n                style={this.props.style}\n                onMouseDown={this.start}\n                onTouchStart={this.start}\n                onMouseUp={()=>{console.log(0); this.end();}}\n                onMouseEnter={(e)=>{\n                    this.props.base.pointerEventsCallback('mouseenter', this.props.base.getState());\n                }}\n                onMouseLeave={(e)=>{\n                    let bool = findParentBySelector(ReactDOM.findDOMNode(this), '.pointerEventsEnabled');\n                    this.props.base.pointerEventsCallback('mouseleave_' + (bool && !this.state.editing ? 'true' : 'false'), this.props.base.getState());\n                    this.mouseLeave(e);\n                }}\n                onTouchCancel={this.end}\n                onTouchEnd={this.end}\n                onDoubleClick={(e) => e.stopPropagation()}\n                onDrag={(e)=>e.stopPropagation()} >\n                {this.props.children}\n            </div>\n        );\n    }\n\n    /**\n     * Overlay creation\n     */\n    overlay() {\n        let myself = ReactDOM.findDOMNode(this);\n        let dropableElement = findParentBySelector(myself, '.dropableRichZone');\n        let boxStyle = findParentBySelector(myself, '.boxStyle');\n        boxStyle.classList.add('norotate');\n        let overlay = document.createElement(\"div\");\n        overlay.classList.add('overlay');\n        overlay.id = 'overlay';\n\n        /* OVERLAY */\n        dropableElement.classList.add(\"rich_overlay\");\n        overlay.style.top = dropableElement.offsetTop + \"px\";\n        overlay.style.left = dropableElement.offsetLeft + \"px\";\n        overlay.style.width = dropableElement.offsetWidth + \"px\";\n        overlay.style.height = dropableElement.offsetHeight + \"px\";\n\n        let cursor_x_offset = 12;\n        let cursor_y_offset = 20;\n        let component = this;\n        overlay.style.cursor = 'url(\"/images/mark.svg\") ' + cursor_x_offset + ' ' + cursor_y_offset + ', crosshair !important';\n        document.body.style.cursor = 'url(\"/images/mark.svg\") ' + cursor_x_offset + ' ' + cursor_y_offset + ', crosshair !important';\n        let base = this.props.base;\n        let toolbarState = base.getState();\n        let parseRichMarkInput = base.parseRichMarkInput;\n        let editing = this.state.editing;\n        const id = this.props.mark;\n\n        let keyListener = function(e) {\n            const ESCAPE_KEY_CODE = 27;\n            if (e.keyCode === ESCAPE_KEY_CODE) {\n                exitFunction();\n            }\n        };\n\n        let exitFunction = function() {\n            document.body.style.cursor = 'default';\n            boxStyle.classList.remove('norotate');\n            window.removeEventListener('keyup', keyListener);\n            overlay.remove();\n            dropableElement.classList.remove('rich_overlay');\n            component.setState({ editing: false });\n            base.render('UPDATE_BOX');\n        };\n\n        window.addEventListener('keyup', keyListener);\n\n        overlay.oncontextmenu = function(event) {\n            exitFunction();\n            event.preventDefault();\n        };\n\n        overlay.onmouseup = function(event) {\n            if (event.which === 3) {\n                exitFunction();\n                return;\n            }\n            const square = this.getClientRects()[0];\n            let marks = Object.assign({}, toolbarState.__marks);\n            const x = event.clientX - square.left - cursor_x_offset;// event.offsetX;\n            const y = event.clientY - square.top - cursor_y_offset;// event.offsetY;\n            const width = square.right - square.left;\n            const height = square.bottom - square.top;\n            const value = parseRichMarkInput(x, y, width, height, [], toolbarState);\n            if (marks[id]) {\n                marks[id].value = value;\n            }\n            document.body.style.cursor = 'default';\n            boxStyle.classList.remove('norotate');\n            window.removeEventListener('keyup', keyListener);\n            overlay.remove();\n            dropableElement.classList.remove('rich_overlay');\n            component.setState({ editing: false });\n            base.setState('__marks', marks);\n            base.render('UPDATE_BOX');\n        };\n        dropableElement.parentElement.appendChild(overlay);\n\n    }\n\n}\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 182,
    "kind": "class",
    "name": "ClickNHold",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx",
    "importStyle": "ClickNHold",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 183,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "{holding: boolean, start: number, ended: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "start",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#start",
    "access": "public",
    "description": "Drag start callback",
    "lineNumber": 55,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "end",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#end",
    "access": "public",
    "description": "Drag end callback",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "timeout",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#timeout",
    "access": "public",
    "description": "Timeout callback",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "mouseLeave",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#mouseLeave",
    "access": "public",
    "description": "Mouse leave callback",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "e",
        "description": "Event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 194,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "overlay",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/click_n_hold/ClickNHold.jsx~ClickNHold#overlay",
    "access": "public",
    "description": "Overlay creation",
    "lineNumber": 138,
    "params": [],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx",
    "content": "import React, { Component } from 'react';\nimport { Col } from 'react-bootstrap';\nimport DaliCanvasSli from '../../canvas/dali_canvas_sli/DaliCanvasSli';\nimport DaliCanvasDoc from '../../canvas/dali_canvas_doc/DaliCanvasDoc';\nimport { isSlide } from '../../../../common/utils';\n\n/**\n * Container component to render contained views\n *\n */\nexport default class ContainedCanvas extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{showTitle: boolean}}\n         */\n        this.state = {\n            showTitle: false,\n        };\n    }\n\n    /**\n     * Render React Component\n     * @returns {*}\n     */\n    render() {\n        let canvasContent;\n        let containedViewSelected = this.props.containedViewSelected;\n        if (containedViewSelected && containedViewSelected !== 0) {\n            if (isSlide(containedViewSelected.type)) {\n                canvasContent = (<DaliCanvasSli\n                    addMarkShortcut={this.props.addMarkShortcut}\n                    boxes={this.props.boxes}\n                    boxSelected={this.props.boxSelected}\n                    boxLevelSelected={this.props.boxLevelSelected}\n                    canvasRatio={this.props.canvasRatio}\n                    containedViews={this.props.containedViews}\n                    containedViewSelected={this.props.containedViewSelected}\n                    deleteMarkCreator={this.props.deleteMarkCreator}\n                    fromCV\n                    lastActionDispatched={this.props.lastActionDispatched}\n                    markCreatorId={this.props.markCreatorId}\n                    onBoxAdded={this.props.onBoxAdded}\n                    onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                    onBoxSelected={this.props.onBoxSelected}\n                    onBoxMoved={this.props.onBoxMoved}\n                    onBoxResized={this.props.onBoxResized}\n                    onBoxDropped={this.props.onBoxDropped}\n                    onBoxDeleted={this.props.onBoxDeleted}\n                    onContainedViewSelected={this.props.onContainedViewSelected}\n                    onMarkCreatorToggled={this.props.onMarkCreatorToggled}\n                    onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                    onTextEditorToggled={this.props.onTextEditorToggled}\n                    navItems={this.props.navItems}\n                    navItemSelected={this.props.navItemSelected}\n                    title={this.props.title}\n                    titleModeToggled={this.props.titleModeToggled}\n                    toolbars={this.props.toolbars}\n                    showCanvas={this.props.showCanvas}\n                />);\n            } else {\n                canvasContent = (<DaliCanvasDoc\n                    addMarkShortcut={this.props.addMarkShortcut}\n                    boxes={this.props.boxes}\n                    boxSelected={this.props.boxSelected}\n                    boxLevelSelected={this.props.boxLevelSelected}\n                    containedViews={this.props.containedViews}\n                    containedViewSelected={this.props.containedViewSelected}\n                    deleteMarkCreator={this.props.deleteMarkCreator}\n                    fromCV\n                    lastActionDispatched={this.props.lastActionDispatched}\n                    markCreatorId={this.props.markCreatorId}\n                    onMarkCreatorToggled={this.props.onMarkCreatorToggled}\n                    onBoxAdded={this.props.onBoxAdded}\n                    onBoxSelected={this.props.onBoxSelected}\n                    onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                    onBoxMoved={this.props.onBoxMoved}\n                    onBoxResized={this.props.onBoxResized}\n                    onContainedViewSelected={this.props.onContainedViewSelected}\n                    onSortableContainerResized={this.props.onSortableContainerResized}\n                    onSortableContainerDeleted={this.props.onSortableContainerDeleted}\n                    onSortableContainerReordered={this.props.onSortableContainerReordered}\n                    onBoxDropped={this.props.onBoxDropped}\n                    onBoxDeleted={this.props.onBoxDeleted}\n                    onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                    onTextEditorToggled={this.props.onTextEditorToggled}\n                    onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                    navItems={this.props.navItems}\n                    navItemSelected={this.props.navItemSelected}\n                    toolbars={this.props.toolbars}\n                    showCanvas={this.props.showCanvas}\n                    titleModeToggled={this.props.titleModeToggled}\n                    title={this.props.title}\n                />);\n            }\n        } else {\n            canvasContent = (<Col id=\"containedCanvas\"\n                md={12}\n                xs={12}\n                style={{\n                    height: \"100%\",\n                    padding: 0,\n                    display: this.props.containedViewSelected !== 0 ? 'initial' : 'none',\n                }} />);\n\n        }\n        return (\n            canvasContent\n        );\n    }\n\n    /**\n     * Before component receives props\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.boxSelected !== -1) {\n            this.setState({ showTitle: false });\n        }\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "ContainedCanvas",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx",
    "importStyle": "ContainedCanvas",
    "description": "Container component to render contained views",
    "lineNumber": 11,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "{showTitle: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/contained_canvas/ContainedCanvas.jsx~ContainedCanvas#componentWillReceiveProps",
    "access": "public",
    "description": "Before component receives props",
    "lineNumber": 121,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport i18n from 'i18next';\nimport { FormControl } from 'react-bootstrap';\nimport { ID_PREFIX_RICH_MARK, ID_PREFIX_CONTAINED_VIEW, ID_PREFIX_SORTABLE_BOX, PAGE_TYPES } from '../../../../common/constants';\nimport { nextAvailName } from '../../../../common/utils';\nimport Alert from './../../common/alert/Alert';\n\n/**\n * Mark Creator overlay component\n */\nexport default class MarkCreator extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{onCreation: boolean, triggeredMarkCreator: boolean, showAlert: boolean, value: number, promptRes: string}}\n         */\n        this.state = {\n            onCreation: false,\n            triggeredMarkCreator: false,\n            showAlert: false,\n            value: 0,\n            promptRes: \"\",\n\n        };\n        /**\n         * Binded function\n         */\n        this.exitFunction = this.exitFunction.bind(this);\n\n        /**\n         * Binded function\n         */\n        this.processPrompt = this.processPrompt.bind(this);\n        /**\n         * Binded function\n         */\n        this.keyListener = this.keyListener.bind(this);\n    }\n\n    /**\n     * React render component\n     * @returns {code}\n     */\n    render() {\n        return (\n            <Alert className=\"pageModal\"\n                show={this.state.showAlert}\n                hasHeader title={<span><i style={{ fontSize: '14px', marginRight: '5px' }} className=\"material-icons\">room</i>{i18n.t(\"marks.new_mark\")}</span>}\n                closeButton\n                cancelButton\n                acceptButtonText={'OK'}\n                onClose={(bool)=>{this.setState({ showAlert: false, promptRes: bool ? this.state.promptRes : null }); this.processPrompt(bool);}}>\n                {i18n.t(\"marks.create_mark\")}<br/><br/>\n                <FormControl type=\"text\" autoFocus placeholder={i18n.t(\"marks.new_mark\")} onChange={(e)=>{this.setState({ promptRes: e.target.value });}} />\n            </Alert>);\n    }\n\n    /**\n     * Before component updates\n     * @param nextProps\n     * @param nextState\n     */\n    componentWillUpdate(nextProps, nextState) {\n        if(this.props.content !== undefined) {\n            let element = this.props.content;\n            let dom_element = ReactDOM.findDOMNode(element);\n            let dropableElement = dom_element.getElementsByClassName('dropableRichZone')[0];\n\n            if(!nextState.onCreation && nextProps.markCreatorId !== false && this.props.currentId === nextProps.markCreatorId) {\n                /* find dropableRichZone*/\n\n                let overlay = document.createElement(\"div\");\n                overlay.classList.add('overlay');\n                overlay.id = 'markOverlay';\n\n                /* OVERLAY */\n                dropableElement.classList.add(\"rich_overlay\");\n                overlay.style.top = dropableElement.offsetTop + \"px\";\n                overlay.style.left = dropableElement.offsetLeft + \"px\";\n                overlay.style.width = dropableElement.offsetWidth + \"px\";\n                overlay.style.height = dropableElement.offsetHeight + \"px\";\n\n                let cursor_x_offset = 12;\n                let cursor_y_offset = 20;\n\n                document.body.style.cursor = 'url(\"/images/mark.svg\") ' + cursor_x_offset + ' ' + cursor_y_offset + ', crosshair !important';\n                /* OVERLAY */\n\n                let component = this;\n                let parseRichMarkInput = this.props.parseRichMarkInput;\n                let toolbarState = this.props.toolbar.state;\n\n                /* NEW MARK DEFAULT PARAMS*/\n\n                window.addEventListener('keyup', component.keyListener);\n\n                overlay.oncontextmenu = function(event) {\n                    component.exitFunction();\n                    event.preventDefault();\n                };\n\n                overlay.onmouseup = function(e) {\n                    if (e.which === 3) {\n                        component.exitFunction();\n                        return;\n                    }\n                    let square = this.getClientRects()[0];\n                    let x = e.clientX - square.left - cursor_x_offset;// e.offsetX;\n                    let y = e.clientY - square.top - cursor_y_offset;// e.offsetY;\n                    let width = square.right - square.left;\n                    let height = square.bottom - square.top;\n\n                    let richMarkValues = [];\n                    let value = parseRichMarkInput(x, y, width, height, richMarkValues, toolbarState);\n\n                    component.setState({ showAlert: true, value: value });\n                };\n                // document.documentElement.style.cursor = 'url(\"https://storage.googleapis.com/material-icons/external-assets/v4/icons/svg/ic_room_black_24px.svg\"), default';\n                dropableElement.parentElement.appendChild(overlay);\n                this.setState({ onCreation: true });\n\n            }\n        }\n    }\n\n    /**\n     * After mark is created, overlay disappears\n     */\n    exitFunction() {\n        let element = this.props.content;\n        let dom_element = ReactDOM.findDOMNode(element);\n        let dropableElement = dom_element.getElementsByClassName('dropableRichZone')[0];\n        let overlay = document.getElementById('markOverlay');\n        document.body.style.cursor = 'default';\n        window.removeEventListener('keyup', this.keyListener);\n        overlay.remove();\n        dropableElement.classList.remove('rich_overlay');\n        this.props.deleteMarkCreator();\n        this.setState({ onCreation: false, promptRes: \"\" });\n    }\n\n    /**\n     * Key pressed callback\n     * @param event\n     */\n    keyListener(event) {\n        const ESCAPE_KEY_CODE = 27;\n        if (event.keyCode === ESCAPE_KEY_CODE) {\n            this.exitFunction();\n        }\n    }\n\n    /**\n     * Mark name entered callback\n     * @param exit\n     */\n    processPrompt(exit) {\n        let connectMode = 'new';\n        let title = i18n.t('marks.new_mark');\n        let type = this.props.pageType;\n        let newId = ID_PREFIX_CONTAINED_VIEW + Date.now();\n        let markId = ID_PREFIX_RICH_MARK + Date.now();\n        let marksType = this.props.toolbar && this.props.toolbar.config && this.props.toolbar.config.marksType && this.props.toolbar.config.marksType[0] ? this.props.toolbar.config.marksType[0] : {};\n        let color = marksType.defaultColor || '#222222'; // default dark grey\n        let pageName = nextAvailName(i18n.t('contained_view'), this.props.containedViews);\n        let connection = {\n            id: newId,\n            parent: { [this.props.boxSelected]: [markId] },\n            name: pageName,\n            boxes: [],\n            type: type,\n            extraFiles: {},\n            header: {\n                elementContent: {\n                    documentTitle: pageName,\n                    documentSubTitle: '',\n                    numPage: '' },\n                display: {\n                    courseTitle: 'hidden',\n                    documentTitle: 'expanded',\n                    documentSubTitle: 'hidden',\n                    breadcrumb: \"reduced\",\n                    pageNumber: \"hidden\" },\n            },\n        };\n\n        let displayMode = 'navigate';\n\n        let promptRes = this.state.promptRes;// prompt(i18n.t(\"marks.create_mark\"));\n        if (promptRes === null || !exit) {\n            this.exitFunction();\n            return;\n        }\n        if(this.props.toolbar && this.props.toolbar.state && this.props.toolbar.state.__marks) {\n            title = promptRes || nextAvailName(title, this.props.toolbar.state.__marks, 'title');\n        }\n\n        pageName = promptRes || pageName;\n        connection.name = pageName;\n        connection.header.elementContent.documentTitle = pageName;\n\n        let value = this.state.value;\n        this.props.addMarkShortcut({ id: markId, title, connectMode, connection, displayMode, value, color });\n        if(type === PAGE_TYPES.DOCUMENT) {\n            this.props.onBoxAdded({ parent: newId, container: 0, id: ID_PREFIX_SORTABLE_BOX + Date.now() }, false, false);\n        }\n        /* This is to delete all elements involved */\n        this.exitFunction();\n    }\n\n}\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "MarkCreator",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx",
    "importStyle": "MarkCreator",
    "description": "Mark Creator overlay component",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "{onCreation: boolean, triggeredMarkCreator: boolean, showAlert: boolean, value: number, promptRes: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator#render",
    "access": "public",
    "description": "React render component",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator#componentWillUpdate",
    "access": "public",
    "description": "Before component updates",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "exitFunction",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator#exitFunction",
    "access": "public",
    "description": "After mark is created, overlay disappears",
    "lineNumber": 135,
    "params": [],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "keyListener",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator#keyListener",
    "access": "public",
    "description": "Key pressed callback",
    "lineNumber": 152,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "processPrompt",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/mark_creator/MarkCreator.jsx~MarkCreator#processPrompt",
    "access": "public",
    "description": "Mark name entered callback",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "exit",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/rich_plugins/marks_list/MarksList.jsx",
    "content": "import React, { Component } from 'react';\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport i18n from 'i18next';\nexport default class MarksList extends Component {\n    render() {\n        return (\n            <div>\n                <Button\n                    className='toolbarButton marksListButton'\n                    onClick={e => {\n                        this.props.onRichMarksModalToggled();\n                        e.stopPropagation();\n                    }}>\n                    {i18n.t(\"marks.add_mark\")}\n                </Button>\n                <br/>\n                {\n                    Object.keys(this.props.state.__marks).map(id => {\n                        let mark = this.props.state.__marks[id];\n                        let name = mark.connection;\n                        let color = mark.color || '#337ab7';\n                        let widthScroll = Math.max(mark.title.length / 11 * 100, 100);\n                        try {\n                            name = this.props.toolbars[mark.connection.id || mark.connection] ? this.props.toolbars[mark.connection.id || mark.connection].controls.main.accordions.basic.buttons.navitem_name.value : mark.connection;\n                        } catch(e) { }\n                        return (\n                            <div className=\"markListBox\" key={id}>\n                                {mark.connection ? (\n                                    <OverlayTrigger placement=\"top\" overlay={(<Tooltip id={\"markToolTip-\" + id}>{i18n.t('marks.hover_message') + \"\\\"\" + name + \"\\\"\"}</Tooltip>)}>\n                                        <i style={{ color: color }} className=\"material-icons marklist main\">room</i>\n                                    </OverlayTrigger>) :\n                                    (<i style={{ color: color }} className=\"material-icons marklist\">room</i>)}\n                                <div className=\"markNameInToolbarContainer\"\n                                    onMouseOver={() =>{\n                                        let markEl = document.getElementById('mark_' + id);\n                                        markEl.style.transitionDuration = widthScroll / 100 + 's';\n                                        markEl.style.width = widthScroll + '%';\n                                        markEl.style.left = '-' + (widthScroll - 100) + '%';\n                                    }}\n                                    onMouseOut={() =>{\n                                        let markEl = document.getElementById('mark_' + id);\n                                        markEl.style.width = '100%';\n                                        markEl.style.left = '0%';\n                                    }}>\n                                    <div id={'mark_' + id} className=\"markNameInToolbar\">\n                                        {mark.title}\n                                    </div>\n                                </div>\n\n                                {/* <span className=\"markValueInToolbar\">{mark.value}</span>*/}\n\n                                <i className=\"material-icons marklist\" style={{ float: 'right' }}\n                                    onClick={() => {\n                                        this.props.onRichMarkDeleted(id);\n                                    }}>delete</i>\n                                <i className=\"material-icons marklist\" style={{ float: 'right' }}\n                                    onClick={() => {\n                                        this.props.onRichMarkEditPressed(mark);\n                                        this.props.onRichMarksModalToggled();\n                                    }}>edit</i><br/>\n\n                            </div>\n                        );\n                    })\n                }\n            </div>\n            /* jshint ignore: end */\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/rich_plugins/marks_list/MarksList.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "class",
    "name": "MarksList",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/marks_list/MarksList.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/marks_list/MarksList.jsx~MarksList",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/rich_plugins/marks_list/MarksList.jsx",
    "importStyle": "MarksList",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/marks_list/MarksList.jsx~MarksList",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/marks_list/MarksList.jsx~MarksList#render",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Alert from './../../common/alert/Alert';\nimport { Modal, Button, Row, Col, FormGroup, ControlLabel, FormControl, Radio } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { ID_PREFIX_RICH_MARK, ID_PREFIX_SORTABLE_BOX, ID_PREFIX_CONTAINED_VIEW, PAGE_TYPES } from '../../../../common/constants';\nimport i18n from 'i18next';\nimport { isSection, isContainedView, nextAvailName } from '../../../../common/utils';\nrequire('./_richMarksModal.scss');\n\n/**\n * Modal component to edit marks' configuration\n */\nexport default class RichMarksModal extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{connectMode: string, displayMode: string, newSelected: string, existingSelected: string, newType: string, viewNames: *, showAlert: boolean}}\n         */\n        this.state = {\n            connectMode: \"new\",\n            displayMode: \"navigate\",\n            newSelected: \"\",\n            existingSelected: \"\",\n            newType: PAGE_TYPES.SLIDE,\n            viewNames: this.returnAllViews(this.props),\n            showAlert: false,\n        };\n    }\n\n    /**\n     * Before component receives props\n     * Updates component's state with toolbar's state info\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        let current = nextProps.currentRichMark;\n        let allViews = this.returnAllViews(nextProps);\n\n        if (current) {\n            this.setState({\n                viewNames: allViews,\n                color: current.color,\n                connectMode: current.connectMode || \"new\",\n                displayMode: current.displayMode || \"navigate\",\n                newSelected: (current.connectMode === \"new\" ? current.connection : \"\"),\n                newType: PAGE_TYPES.SLIDE,\n                existingSelected: (current.connectMode === \"existing\" && this.remapInObject(nextProps.navItems, nextProps.containedViews)[current.connection] ?\n                    this.remapInObject(nextProps.navItems, nextProps.containedViews)[current.connection].id : \"\"),\n            });\n        } else {\n            this.setState({\n                viewNames: allViews,\n                color: null,\n                connectMode: \"new\",\n                displayMode: \"navigate\",\n                newSelected: \"\",\n                newType: PAGE_TYPES.SLIDE,\n                existingSelected: \"\",\n            });\n        }\n\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        let richMarkValue = null;\n        let marksType = this.props.pluginToolbar && this.props.pluginToolbar.config && this.props.pluginToolbar.config.marksType && this.props.pluginToolbar.config.marksType[0] ? this.props.pluginToolbar.config.marksType[0] : {};\n        function getRichMarkInput(value) {\n            richMarkValue = value;\n        }\n\n        let current = this.props.currentRichMark;\n        // Por defecto la página actual si no hay ninguna seleccionada\n        let currentView = this.props.containedViewSelected && this.props.containedViewSelected !== 0 ? { label: this.props.containedViews[this.props.containedViewSelected].name, id: this.props.containedViewSelected } :\n            { label: this.props.navItems[this.props.navItemSelected].name, id: this.props.navItemSelected };\n\n        let selected = this.state.existingSelected && (this.props.containedViews[this.state.existingSelected] || this.props.navItems[this.state.existingSelected]) ? (isContainedView(this.state.existingSelected) ? { label: this.props.containedViews[this.state.existingSelected].name, id: this.state.existingSelected } :\n            { label: this.props.navItems[this.state.existingSelected].name, id: this.state.existingSelected }) : currentView;\n        let newSelected = \"\";\n\n        // if (this.state.connectMode === 'existing') {\n        if (this.props.containedViews[this.state.newSelected]) {\n            newSelected = this.props.containedViews[this.state.newSelected].name;\n        } else if (this.props.navItems[this.state.newSelected]) {\n            newSelected = this.props.navItems[this.state.newSelected].name;\n        }\n        // }\n        let pluginType = this.props.pluginToolbar && this.props.pluginToolbar.config ? this.props.pluginToolbar.config.displayName : 'Plugin';\n        return (\n            /* jshint ignore:start */\n            <Modal className=\"pageModal richMarksModal\" backdrop bsSize=\"large\" show={this.props.visible}>\n                <Modal.Header>\n                    <Modal.Title><i style={{ fontSize: '18px' }} className=\"material-icons\">room</i> {(current ? i18n.t(\"marks.edit_mark_to\") : i18n.t(\"marks.add_mark_to\")) + pluginType }</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Row>\n                        <FormGroup>\n                            <Col xs={4} md={2}>\n                                <ControlLabel>{i18n.t(\"marks.mark_name\")}</ControlLabel>\n                            </Col>\n                            <Col xs={8} md={6}>\n                                <FormControl ref=\"title\"\n                                    type=\"text\"\n                                    defaultValue={current ? current.title : ''}/><br/>\n                            </Col>\n                        </FormGroup>\n                    </Row>\n                    <Row>\n                        <FormGroup>\n                            <Col xs={4} md={2}>\n                                <ControlLabel>{i18n.t(\"marks.mark_color\")}</ControlLabel>\n                            </Col>\n                            <Col xs={8} md={6}>\n                                {/* <ColorPicker\n                                    value={this.state.color || marksType.defaultColor}\n                                    label={i18n.t(\"marks.mark_color\")}\n                                    onChange={e=>{this.setState({ color: e.color });}}\n                                    mode='RGB' />*/}\n                                <FormControl ref=\"color\"\n                                    type=\"color\"\n                                    value={this.state.color || marksType.defaultColor}\n                                    onChange={e=>{this.setState({ color: e.target.value });}}\n                                /><br/>\n                            </Col>\n                        </FormGroup>\n                    </Row>\n                    <Row>\n                        <FormGroup>\n                            <Col xs={4} md={2}>\n                                <ControlLabel>{i18n.t(\"marks.link_to\")}</ControlLabel>\n                            </Col>\n                            <Col xs={5} md={3}>\n                                <Radio value=\"new\"\n                                    name=\"connect_mode\"\n                                    checked={this.state.connectMode === \"new\"}\n                                    onChange={e => {\n                                        this.setState({ connectMode: \"new\" });\n                                    }}>{i18n.t(\"marks.new_content\")}</Radio>\n                                <Radio value=\"existing\"\n                                    name=\"connect_mode\"\n                                    checked={this.state.connectMode === \"existing\"}\n                                    onChange={e => {\n                                        this.setState({ connectMode: \"existing\" });\n                                    }}>{i18n.t(\"marks.existing_content\")}</Radio>\n                                <Radio value=\"external\"\n                                    name=\"connect_mode\"\n                                    checked={this.state.connectMode === \"external\"}\n                                    onChange={e => {\n                                        this.setState({ connectMode: \"external\" });\n                                    }}>{i18n.t(\"marks.external_url\")}</Radio>\n\n                            </Col>\n                        </FormGroup>\n                        <Col xs={5} md={3}>\n                            <FormGroup style={{ display: this.state.connectMode === \"new\" ? \"initial\" : \"none\" }}>\n                                <FormControl componentClass=\"select\"\n                                    defaultValue={this.state.newType}\n                                    style={{\n                                        display: /* this.state.newType === PAGE_TYPES.SLIDE || this.state.newType === PAGE_TYPES.DOCUMENT*/ this.state.newSelected === \"\" ? \"initial\" : \"none\",\n                                    }}\n                                    onChange={e => {\n                                        this.setState({ newType: e.nativeEvent.target.value });\n                                    }}>\n                                    <option value={PAGE_TYPES.DOCUMENT}>{i18n.t(\"marks.new_document\")}</option>\n                                    <option value={PAGE_TYPES.SLIDE}>{i18n.t(\"marks.new_slide\")}</option>\n                                </FormControl>\n                                <span style={{\n                                    display: this.state.newSelected === \"\" ? \"none\" : \"initial\",\n                                }}>\n                                    {i18n.t(\"marks.hover_message\")} {newSelected}\n                                </span>\n                            </FormGroup>\n                            <FormGroup style={{ display: this.state.connectMode === \"existing\" ? \"initial\" : \"none\" }}>\n                                <Typeahead options={this.returnAllViews(this.props)}\n                                    placeholder=\"Search view by name\"\n                                    ignoreDiacritics={false}\n                                    selected={[selected]}\n                                    onChange={items => {\n                                        this.setState({ existingSelected: items.length !== 0 ? items[0].id : \"\" });\n                                    }}/>\n                            </FormGroup>\n                            <FormGroup style={{ display: this.state.connectMode === \"external\" ? \"initial\" : \"none\" }}>\n                                <FormControl ref=\"externalSelected\"\n                                    type=\"text\"\n                                    defaultValue={current && this.state.connectMode === \"external\" ? current.connection : \"http://vishub.org/\"}\n                                    placeholder=\"URL\"/>\n                            </FormGroup>\n                        </Col>\n                    </Row>\n                    {/* <FormGroup>\n                            <ControlLabel>Display mode</ControlLabel>\n                            <Radio name=\"display_mode\"\n                                   checked={this.state.displayMode === \"navigate\"}\n                                   onChange={e => {\n                                        this.setState({displayMode: \"navigate\"});\n                                   }}>Navigate to content</Radio>\n                            <Radio name=\"display_mode\"\n                                   checked={this.state.displayMode === \"popup\"}\n                                   onChange={e => {\n                                        this.setState({displayMode: \"popup\"});\n                                   }}>Show as popup</Radio>\n                            <Radio name=\"display_mode\"\n                                   checked={this.state.displayMode === \"new_tab\"}\n                                   disabled={this.state.connectMode !== \"external\"}\n                                   onChange={e => {\n                                        this.setState({displayMode: \"new_tab\"});\n                                   }}>Open in new tab</Radio>\n                        </FormGroup>*/}\n                    <Row>\n                        <FormGroup>\n                            {/* Input need to have certain label like richValue*/}\n                            <Col xs={4} md={2}>\n                                <ControlLabel>{marksType.name ? marksType.name : i18n.t(\"marks.value\")}</ControlLabel><br/>\n                                <ControlLabel style={{ color: 'grey', fontWeight: 'lighter', marginTop: '-5px' }}>{this.props.pluginToolbar && this.props.pluginToolbar.config && this.props.pluginToolbar.config.marksType && this.props.pluginToolbar.config.marksType[0] && this.props.pluginToolbar.config.marksType[0].format ? this.props.pluginToolbar.config.marksType[0].format : \"x,y\"}</ControlLabel>\n\n                            </Col>\n                            <Col xs={8} md={6}>\n                                <FormControl\n                                    ref=\"value\"\n                                    type={this.state.actualMarkType}\n                                    defaultValue={current ? current.value : (marksType.default ? marksType.default : 0)}/>\n                            </Col>\n                        </FormGroup>\n                    </Row>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    {/* <span>También puedes arrastrar el icono <i className=\"material-icons\">room</i> dentro del plugin del vídeo para añadir una nueva marca</span>*/}\n                    <Button onClick={e => {\n                        this.props.onRichMarksModalToggled();\n                    }}>Cancel</Button>\n                    <Button bsStyle=\"primary\" onClick={e => {\n                        let title = ReactDOM.findDOMNode(this.refs.title).value;\n                        let newId = ID_PREFIX_CONTAINED_VIEW + Date.now();\n                        let newMark = current && current.id ? current.id : ID_PREFIX_RICH_MARK + Date.now();\n                        let connectMode = this.state.connectMode;\n                        let color = this.state.color || marksType.defaultColor || '#222222';\n                        let connection;\n                        // CV name\n                        let name = title || nextAvailName(i18n.t('contained_view'), this.props.containedViews);\n                        // Mark name\n                        title = title || nextAvailName(i18n.t(\"marks.new_mark\"), this.props.pluginToolbar.state.__marks, 'title');\n                        switch (connectMode) {\n                        case \"new\":\n                            connection = current && current.connection && current.connectMode === 'new' ?\n                                current.connection :\n                                {\n                                    id: newId,\n                                    parent: { [this.props.boxSelected]: [newMark] },\n                                    name: name,\n                                    boxes: [],\n                                    type: this.state.newType,\n                                    extraFiles: {},\n                                    header: {\n                                        elementContent: {\n                                            documentTitle: name,\n                                            documentSubTitle: '',\n                                            numPage: '' },\n                                        display: {\n                                            courseTitle: 'hidden',\n                                            documentTitle: 'expanded',\n                                            documentSubTitle: 'hidden',\n                                            breadcrumb: \"reduced\",\n                                            pageNumber: \"hidden\" },\n                                    },\n                                };\n\n                            break;\n                        case \"existing\":\n                            connection = selected.id || this.props.navItemSelected;\n                            break;\n                        case \"external\":\n                            connection = ReactDOM.findDOMNode(this.refs.externalSelected).value;\n                            break;\n                        }\n                        let displayMode = this.state.displayMode;\n                        let value = ReactDOM.findDOMNode(this.refs.value).value;\n                        // First of all we need to check if the plugin creator has provided a function to check if the input value is allowed\n                        if(this.props.validateValueInput) {\n                            let val = this.props.validateValueInput(value);\n                            // If the value is not allowed, we show an alert with the predefined message and we abort the Save operation\n                            if (val && val.isWrong) {\n                                this.setState({ showAlert: true, alertMsg: (val.message ? val.message : i18n.t(\"mark_input\")) });\n                                return;\n                            // If the value is allowed we check if it has been modified (like rounded decimals) and we assign it to value\n                            } else if (val && val.value) {\n                                value = val.value;\n                            }\n                        }\n                        this.props.onRichMarkUpdated({ id: (current ? current.id : newMark), title, connectMode, connection, displayMode, value, color }, this.state.newSelected === \"\");\n                        if(connectMode === 'new' && !this.props.toolbars[connection.id] && this.state.newType === PAGE_TYPES.DOCUMENT) {\n                            this.props.onBoxAdded({ parent: newId, container: 0, id: ID_PREFIX_SORTABLE_BOX + Date.now() }, false, false);\n                        }\n                        this.props.onRichMarksModalToggled();\n\n                    }}>Save changes</Button>\n                </Modal.Footer>\n                <Alert className=\"pageModal\"\n                    show={this.state.showAlert}\n                    hasHeader\n                    title={i18n.t(\"marks.wrong_value\")}\n                    closeButton onClose={()=>{this.setState({ showAlert: false });}}>\n                    <span> {this.state.alertMsg} </span>\n                </Alert>\n            </Modal>\n            /* jshint ignore:end */\n        );\n\n    }\n\n    /**\n     * Mapping method that joins cointained views and navItems in array but excluding the ones that can't be\n     * @param props Component's props\n     * @returns {Array} Array of views\n     */\n    returnAllViews(props) {\n        let viewNames = [];\n        props.navItemsIds.map(id => {\n            if (id === 0) {\n                return;\n            }\n            if (props.navItems[id].hidden) {\n                return;\n            }\n            if(!Dali.Config.sections_have_content && isSection(id)) {\n                return;\n            }\n            // We need to turn off this requisite in case there is no more pages available and we need to link to the same page the box is in\n            /* if(props.containedViewSelected === 0 && props.navItemSelected === id){\n                return;\n            }*/\n\n            viewNames.push({ label: props.navItems[id].name, id: id });\n        });\n        Object.keys(props.containedViews).map(cv=>{\n            if(cv === 0) {\n                return;\n            }\n\n            if(props.containedViewSelected === cv) {\n                return;\n            }\n\n            viewNames.push({ label: props.containedViews[cv].name, id: props.containedViews[cv].id });\n        });\n        return viewNames;\n    }\n\n    /**\n     * Method used to remap navItems and containedViews together\n     * @param objects\n     * @returns {*}\n     */\n    remapInObject(...objects) {\n        return Object.assign({}, ...objects);\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "class",
    "name": "RichMarksModal",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx",
    "importStyle": "RichMarksModal",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 219,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "{connectMode: string, displayMode: string, newSelected: string, existingSelected: string, newType: string, viewNames: *, showAlert: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal#componentWillReceiveProps",
    "access": "public",
    "description": "Before component receives props\nUpdates component's state with toolbar's state info",
    "lineNumber": 41,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal#render",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "returnAllViews",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal#returnAllViews",
    "access": "public",
    "description": "Mapping method that joins cointained views and navItems in array but excluding the ones that can't be",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} Array of views"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "Component's props"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "Array of views"
    }
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "remapInObject",
    "memberof": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/rich_plugins/rich_marks_modal/RichMarksModal.jsx~RichMarksModal#remapInObject",
    "access": "public",
    "description": "Method used to remap navItems and containedViews together",
    "lineNumber": 364,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objects",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 225,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/server_feedback/ServerFeedback.jsx",
    "content": "import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport i18n from 'i18next';\n\n/**\n * Server Feedback Alert\n */\nexport default class ServerFeedback extends Component {\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        const isSaving = this.props.isBusy.value;\n        let alert = null;\n        if(isSaving || this.props.isBusy.msg === i18n.t(\"success_transaction\")) {\n            alert = <i className=\"material-icons success\">check</i>;\n        } else {\n            alert = <i className=\"material-icons error\">close</i>;\n        }\n        return (\n            <Modal id=\"serverModal\"\n                onHide={this.props.hideModal}\n                show={this.props.show}\n                dialogClassName=\"custom-modal\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-lg\"> {this.props.title} </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {alert}\n                    <div className=\"msg_text\">{this.props.isBusy.msg}</div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/server_feedback/ServerFeedback.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 226,
    "kind": "class",
    "name": "ServerFeedback",
    "memberof": "DALI_EDITOR/_editor/components/server_feedback/ServerFeedback.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/server_feedback/ServerFeedback.jsx~ServerFeedback",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/server_feedback/ServerFeedback.jsx",
    "importStyle": "ServerFeedback",
    "description": "Server Feedback Alert",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/server_feedback/ServerFeedback.jsx~ServerFeedback",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/server_feedback/ServerFeedback.jsx~ServerFeedback#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 228,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx",
    "content": "import React, { Component } from 'react';\nimport { FormControl, InputGroup, FormGroup, ControlLabel, OverlayTrigger, Popover, Tooltip } from 'react-bootstrap';\nimport ColorPicker from './../../common/color-picker/ColorPicker';\nimport i18n from 'i18next';\nimport RadioButtonFormGroup from '../radio_button_form_group/RadioButtonFormGroup';\n\nrequire('./_gridConfigurator.scss');\n\n/**\n * Toolbar structure component for Sortable Containers\n */\nexport default class GridConfigurator extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Default height\n         * @type {number}\n         */\n        this.height = 200;\n    }\n\n    /**\n     * Render React Component\n     * @returns {XML}\n     */\n    render() {\n        let alignment = this.props.container.style ? (this.props.container.style.textAlign ? this.props.container.style.textAlign : 'center') : 'center';\n        let advancedColumns = (\n            <FormGroup>\n                <ControlLabel>{i18n.t('messages.columns_distribution')}</ControlLabel>\n                <FormControl type=\"text\"\n                    key=\"grid\"\n                    value={this.props.container.colDistribution.join(\" \")}\n                    label={i18n.t('messages.columns_distribution')}\n                    style={{ width: '100%' }}\n                    onChange={e => {\n                        let dist = e.target.value.split(\" \").map(function(i) {\n                            if (i && !isNaN(parseFloat(i, 10))) {\n                                return parseFloat(i, 10);\n                            }\n                            return 0;\n\n                        });\n                        this.props.onColsChanged(this.props.id, this.props.parentId, dist, this.props.container.children);\n                    }}/>\n            </FormGroup>\n        );\n        let tooltip = (\n            <Tooltip id=\"tooltipHeight\">\n                {i18n.t('messages.height_auto_warning')}\n            </Tooltip>\n        );\n        let height = this.props.sortableProps.height;\n\n        return (\n            <div style={{ width: '100%' }}>\n                <h4 className=\"sortableToolbarTitle\">{i18n.t('Structure')}</h4>\n                <FormGroup>\n                    <OverlayTrigger rootClose trigger=\"click\" placement=\"left\"\n                        overlay={height !== 'auto' ? tooltip : <Tooltip id=\"none\" style={{ display: 'none' }}/>}>\n                        <InputGroup style={{ width: '10%', float: 'right' }}>\n                            <ControlLabel> auto</ControlLabel>\n                            <FormControl type=\"checkbox\"\n                                key=\"height\"\n                                value={height === 'auto' ? \"checked\" : \"unchecked\"}\n                                checked={height === 'auto'}\n                                label=\"auto\"\n                                style={{ width: '100%' }}\n                                onChange={e => {\n                                    let current = height === 'auto';\n                                    let newHeight = current ? parseFloat(document.getElementById(this.props.id).clientHeight, 10) : 'auto';\n                                    this.props.onSortableContainerResized(this.props.id, this.props.parentId, newHeight);\n                                }}/>\n                        </InputGroup>\n                    </OverlayTrigger>\n                    <ControlLabel>{i18n.t('Height')}</ControlLabel>\n                    <InputGroup style={{ width: '50%' }}>\n                        <FormControl type={height === 'auto' ? 'text' : 'number'}\n                            key=\"height\"\n                            disabled={height === 'auto'}\n                            value={height === 'auto' ? 'auto' : parseFloat(height, 10) /* parseFloat(document.getElementById(this.props.id).style.height)*/}\n                            style={{ width: '100%' }}\n                            min={1}\n                            step={1}\n                            onChange={e => {\n                                this.props.onSortableContainerResized(this.props.id, this.props.parentId, e.target.value);\n                            }}/>\n                    </InputGroup>\n\n                    <RadioButtonFormGroup key=\"alignment\"\n                        title={i18n.t('Alignment')}\n                        options={['left', 'center', 'right']}\n                        selected={alignment}\n                        click={(option) => {this.props.onSortablePropsChanged(this.props.id, this.props.parentId, 'textAlign', option);}}\n                        tooltips={[i18n.t('messages.align_left'), i18n.t('messages.align_center'), i18n.t('messages.align_right')]}\n                        icons={['format_align_left', 'format_align_center', 'format_align_right']}/>\n                </FormGroup>\n                <div className=\"configurator\">\n                    {this.props.container.cols.map((item, index) => {\n                        return (<div className=\"gc_columns\" key={index}\n                            style={{ width: this.props.container.colDistribution[index] + '%' }}>\n                            { item.map((it, ind) => {\n                                return <div className=\"gc_rows\" key={ind} style={{ height: it + '%' }} />;\n                            })}\n                        </div>);\n                    })}\n                </div>\n\n                <FormGroup>\n                    <ControlLabel>{i18n.t('col_number')}</ControlLabel>\n                    <InputGroup style={{ width: '50%' }}>\n                        <FormControl type=\"number\"\n                            key=\"grid\"\n                            value={this.props.container.colDistribution.length}\n                            style={{ width: '100%' }}\n                            min={1}\n                            step={1}\n                            onChange={e => {\n                                let dist = [];\n                                let arr = e.target.value;\n                                for (let i = 0; i < arr; i++) {\n                                    dist.push(Math.round(100 / arr * 100) / 100);\n                                }\n                                this.props.onColsChanged(this.props.id, this.props.parentId, dist, this.props.container.children);\n                            }}/>\n                        <OverlayTrigger trigger=\"click\" rootClose placement=\"bottom\"\n                            overlay={<Popover id=\"advancedcols\" className=\"advancedPopover\" title=\"Avanzado\">{advancedColumns}</Popover>}>\n                            <InputGroup.Addon className=\"gc_addon\"><i\n                                className=\"material-icons gridconficons \">settings</i></InputGroup.Addon>\n                        </OverlayTrigger>\n                    </InputGroup>\n                </FormGroup>\n\n                { this.props.container.cols.map((item, index) => {\n                    let advancedRows = (\n                        <FormGroup key={index}>\n                            <ControlLabel>{i18n.t('col_dist') + (index + 1)}</ControlLabel>\n                            <FormControl type=\"text\"\n                                value={item.join(\" \")}\n                                label={i18n.t('col_dist') + (index + 1)}\n                                min={1}\n                                step={1}\n                                style={{ width: '100%' }}\n                                onChange={e => {\n                                    let dist = e.target.value.split(\" \").map(function(i) {\n                                        if(i && !isNaN(parseFloat(i, 10))) {\n                                            return parseFloat(i, 10);\n                                        }\n                                        return 0;\n\n                                    });\n                                    this.props.onRowsChanged(this.props.id, this.props.parentId, index, dist, this.props.container.children);\n                                }}/>\n                        </FormGroup>\n\n                    );\n                    return (\n                        <FormGroup key={index + '_0'}>\n                            <ControlLabel>{i18n.t('row_number') + (index + 1)}</ControlLabel>\n                            <InputGroup style={{ width: '50%' }}>\n                                <FormControl type=\"number\"\n                                    value={item.length}\n                                    label={i18n.t('row_number') + (index + 1)}\n                                    min={1}\n                                    step={1}\n                                    style={{ width: '100%' }}\n                                    onChange={e => {\n                                        let dist = [];\n                                        let arr = e.target.value;\n                                        for (let i = 0; i < arr; i++) {\n                                            dist.push(Math.round(100 / arr * 100) / 100);\n                                        }\n                                        this.props.onRowsChanged(this.props.id, this.props.parentId, index, dist, this.props.container.children);\n                                    }}/>\n                                <OverlayTrigger trigger=\"click\" rootClose placement=\"bottom\"\n                                    overlay={<Popover id=\"advancedrows\" className=\"advancedPopover\" title={i18n.t('Advanced')}>{advancedRows}</Popover>}>\n                                    <InputGroup.Addon className=\"gc_addon\"><i className=\"material-icons gridconficons \">settings</i></InputGroup.Addon>\n                                </OverlayTrigger>\n                            </InputGroup>\n                        </FormGroup>);\n                })\n                }\n                <h4 className=\"sortableToolbarTitle\">{i18n.t('Style')}</h4>\n                {/* <FormGroup>\n                    <ControlLabel>{\"ClassName\"}</ControlLabel>\n                    <FormControl type=\"text\"\n                        value={this.props.container.style.className}\n                        onChange={e => {\n                            this.props.onSortablePropsChanged(this.props.id, this.props.parentId, 'className', e.target.value || \"\");\n                        }}/>\n                </FormGroup>*/}\n                <FormGroup>\n                    <ControlLabel>{i18n.t('styles.padding') + ' (px)'}</ControlLabel>\n                    <FormControl type=\"number\"\n                        value={this.props.container.style ? parseFloat(this.props.container.style.padding, 10) : 0}\n                        label={\"Padding\"}\n                        min={0}\n                        max={100}\n                        style={{ width: '100%' }}\n                        onChange={e => {\n                            this.props.onSortablePropsChanged(this.props.id, this.props.parentId, 'padding', e.target.value + 'px');\n                        }}/>\n                </FormGroup>\n                <FormGroup>\n                    <ControlLabel>{i18n.t('styles.border_color')}</ControlLabel>\n                    <ColorPicker\n                        value={this.props.container.style ? this.props.container.style.borderColor : '#ffffff'}\n                        onChange={e => {\n                            this.props.onSortablePropsChanged(this.props.id, this.props.parentId, 'borderColor', e.color);\n                        }}\n                        mode='RGB' />\n                </FormGroup>\n                <FormGroup>\n                    <ControlLabel>{i18n.t('styles.border_size')}</ControlLabel>\n                    <FormControl type=\"number\"\n                        value={this.props.container.style ? parseFloat(this.props.container.style.borderWidth, 10) : 0}\n                        min={0}\n                        style={{ width: '100%' }}\n                        onChange={e => {\n                            this.props.onSortablePropsChanged(this.props.id, this.props.parentId, 'borderWidth', e.target.value + 'px');\n                        }}/>\n                </FormGroup>\n                <FormGroup>\n                    <ControlLabel>{i18n.t('styles.opacity')}</ControlLabel>\n                    <span className='rangeOutput'>\n                        {this.props.container.style ? this.props.container.style.opacity : 1 + '%'}\n                    </span>\n                    <FormControl type=\"range\"\n                        value={this.props.container.style ? this.props.container.style.opacity : 1 + '%'}\n                        style={{ width: '100%' }}\n                        min={0}\n                        step={0.05}\n                        max={1}\n                        onChange={e => {\n                            this.props.onSortablePropsChanged(this.props.id, this.props.parentId, 'opacity', e.target.value);\n                        }}/>\n                </FormGroup>\n                {React.createElement(FormGroup, { key: 'borderstyle' },\n                    [React.createElement(ControlLabel, { key: 'estiloborde' }, i18n.t('styles.border_style')),\n                        React.createElement(FormControl, {\n                            componentClass: 'select',\n                            value: this.props.container.style ? this.props.container.style.borderStyle : 'none',\n                            key: 'sel',\n                            onChange: e => {\n                                this.props.onSortablePropsChanged(this.props.id, this.props.parentId, 'borderStyle', e.target.value);\n                            },\n                        },\n                        ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit']\n                            .map((option, index) => {\n                                return (React.createElement('option',\n                                    { key: 'child_' + index, value: option }, option));\n                            }))])\n                }\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 229,
    "kind": "class",
    "name": "GridConfigurator",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx~GridConfigurator",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx",
    "importStyle": "GridConfigurator",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx~GridConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx~GridConfigurator#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "height",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx~GridConfigurator",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx~GridConfigurator#height",
    "access": "public",
    "description": "Default height",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx~GridConfigurator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/grid_configurator/GridConfigurator.jsx~GridConfigurator#render",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx",
    "content": "import React, { Component } from 'react';\nimport { Tooltip, FormControl, OverlayTrigger, Popover, InputGroup, FormGroup, Radio, ControlLabel, Checkbox, Button, PanelGroup, Panel } from 'react-bootstrap';\nimport GridConfigurator from '../grid_configurator/GridConfigurator.jsx';\nimport RadioButtonFormGroup from '../radio_button_form_group/RadioButtonFormGroup.jsx';\nimport Select from 'react-select';\nimport VishProvider from './../../vish_provider/vish_provider/VishProvider';\nimport MarksList from './../../rich_plugins/marks_list/MarksList.jsx';\nimport Dali from './../../../../core/main';\nimport ColorPicker from './../../common/color-picker/ColorPicker';\nimport { UPDATE_TOOLBAR, UPDATE_BOX } from '../../../../common/actions';\nimport { isSortableContainer, isCanvasElement, isContainedView, isSlide } from '../../../../common/utils';\nimport i18n from 'i18next';\n\nrequire('./_pluginToolbar.scss');\n\n/**\n * Toolbar component for configuring boxes or pages\n */\nexport default class PluginToolbar extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{open: boolean}}\n         */\n        this.state = {\n            open: false,\n        };\n    }\n\n    /**\n     * Render React component\n     * @returns {code}\n     */\n    render() {\n        if (!isCanvasElement(this.props.navItemSelected, Dali.Config.sections_have_content)) {\n            return (\n                <div id=\"wrap\"\n                    className=\"wrapper hiddenWrapper\"\n                    style={{\n                        top: this.props.top,\n                    }}>\n                    <div id=\"tools\" className=\"toolbox\" />\n                </div>\n            );\n        }\n        // when no plugin selected, but new navitem\n        if (this.props.boxSelected === -1 && isCanvasElement(this.props.navItemSelected, Dali.Config.sections_have_content)) {\n            let toolbar = this.props.toolbars[this.props.navItemSelected];\n\n            return (\n                <div id=\"wrap\"\n                    className=\"wrapper\"\n                    style={{\n                        right: '0px',\n                        top: this.props.top,\n                    }}>\n                    <div className=\"pestana\"\n                        onClick={() => {\n                            this.setState({ open: !this.state.open });\n                        }} />\n                    <div id=\"tools\"\n                        style={{\n                            width: this.state.open ? '250px' : '40px',\n                        }}\n                        className=\"toolbox\">\n                        <OverlayTrigger placement=\"left\"\n                            overlay={\n                                <Tooltip className={this.state.open ? 'hidden' : ''}\n                                    id=\"tooltip_props\">\n                                    {i18n.t('Properties')}\n                                </Tooltip>\n                            }>\n                            <div onClick={() => {\n                                this.setState({ open: !this.state.open });\n                            }}\n                            style={{ display: this.props.carouselShow ? 'block' : 'block' }}\n                            className={this.state.open ? 'carouselListTitle toolbarSpread' : 'carouselListTitle toolbarHide'}>\n                                <div className=\"toolbarTitle\">\n                                    <i className=\"material-icons\">settings</i>\n                                    <span className=\"toolbarTitletxt\">\n                                        {i18n.t('Properties')}\n                                    </span>\n                                </div>\n                                <div className=\"pluginTitleInToolbar\">\n                                    {toolbar.config.displayName || \"\"}\n                                </div>\n                            </div>\n                        </OverlayTrigger>\n                        <div id=\"insidetools\" style={{ display: this.state.open ? 'block' : 'none' }}>\n                            <div className=\"toolbarTabs\">\n                                {Object.keys(toolbar.controls).map((tabKey, index) => {\n                                    let tab = toolbar.controls[tabKey];\n                                    return (\n                                        <div key={'key_' + index} className=\"toolbarTab\">\n                                            <PanelGroup>\n                                                {Object.keys(tab.accordions).sort().map((accordionKey, ind) => {\n                                                    return this.renderAccordion(\n                                                        tab.accordions[accordionKey],\n                                                        tabKey,\n                                                        [accordionKey],\n                                                        toolbar.state,\n                                                        ind\n                                                    );\n                                                })}\n                                            </PanelGroup>\n                                        </div>\n                                    );\n                                })}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        let toolbar = this.props.toolbars[this.props.box.id];\n        // We define the extra buttons we need depending on plugin's configuration\n        let textButton;\n        if (toolbar.config.needsTextEdition) {\n            textButton = (\n                <div className=\"panel-body\">\n                    <Button key={'text'}\n                        className={toolbar.showTextEditor ? 'toolbarButton textediting' : 'toolbarButton'}\n                        onClick={() => {\n                            this.props.onTextEditorToggled(toolbar.id, !toolbar.showTextEditor);\n                            if(!toolbar.showTextEditor && this.props.box && this.props.box.id) {\n                                // Código duplicado en DaliBox, DaliShortcuts y PluginToolbar. Extraer a common_tools?\n                                let CKstring = CKEDITOR.instances[this.props.box.id].getData();\n                                let initString = \"<p>\" + i18n.t(\"text_here\") + \"</p>\\n\";\n                                if (CKstring === initString) {\n                                    CKEDITOR.instances[this.props.box.id].setData(\"\");\n\n                                }\n                            }\n                        }}>\n                        <i className=\"toolbarIcons material-icons\">mode_edit</i>\n                        {i18n.t(\"edit_text\")}\n                    </Button>\n                </div>\n            );\n        }\n        let xmlButton;\n        if (toolbar.config.needsXMLEdition) {\n            xmlButton = (\n                <Button key={'xml'}\n                    className={toolbar.showXMLEditor ? 'toolbarButton textediting' : 'toolbarButton'}\n                    onClick={() => {\n                        this.props.onXMLEditorToggled();\n                    }}>\n                    Edit XML\n                </Button>\n            );\n        }\n        let configButton;\n        if (toolbar.config && toolbar.config.needsConfigModal) {\n            configButton = (\n                <div className=\"panel-body\">\n                    <Button key={'config'}\n                        className='toolbarButton'\n                        onClick={() => {\n                            Dali.Plugins.get(toolbar.config.name).openConfigModal(UPDATE_BOX, toolbar.state, toolbar.id);\n                        }}>\n                        <i className=\"toolbarIcons material-icons\">build</i>\n                        {i18n.t('open_conf')}\n                    </Button>\n                </div>\n            );\n        }\n        let duplicateButton;\n        if (this.props.box.id[1] !== 's') {\n            duplicateButton = (\n                <Button key={'duplicate'}\n                    className=\"pluginToolbarMainButton\"\n                    onClick={e => {\n                        this.props.onBoxDuplicated(this.props.box.id, this.props.box.parent, this.props.box.container);\n                        e.stopPropagation();\n                    }}>\n                    <i className=\"material-icons\">content_copy</i>\n                </Button>\n            );\n        }\n\n        return (\n            <div id=\"wrap\"\n                className=\"wrapper\"\n                style={{\n                    right: '0px',\n                    top: this.props.top,\n                }}>\n                <div className=\"pestana\"\n                    onClick={() => {\n                        this.setState({ open: !this.state.open });\n                    }} />\n                <div id=\"tools\"\n                    style={{\n                        width: this.state.open ? '250px' : '40px',\n                    }}\n                    className=\"toolbox\">\n                    <OverlayTrigger placement=\"left\"\n                        overlay={\n                            <Tooltip className={this.state.open ? 'hidden' : ''}\n                                id=\"tooltip_props\">\n                                {i18n.t('Properties')}\n                            </Tooltip>\n                        }>\n                        <div onClick={() => {\n                            this.setState({ open: !this.state.open });\n                        }}\n                        style={{ display: 'block' }}\n                        className={this.state.open ? 'carouselListTitle toolbarSpread' : 'carouselListTitle toolbarHide'}>\n                            <div className=\"toolbarTitle\">\n                                <i className=\"material-icons\">settings</i>\n                                <span className=\"toolbarTitletxt\">\n                                    {i18n.t('Properties')}\n                                </span>\n                            </div>\n                            <div className=\"pluginTitleInToolbar\">\n                                {toolbar.config.displayName || \"\"}\n                            </div>\n                        </div>\n                    </OverlayTrigger>\n                    <div id=\"insidetools\" style={{ display: this.state.open ? 'block' : 'none' }}>\n                        <div className=\"toolbarTabs\">\n                            {Object.keys(toolbar.controls).map((tabKey, index) => {\n                                let tab = toolbar.controls[tabKey];\n                                return (\n                                    <div key={'key_' + index} className=\"toolbarTab\">\n                                        <PanelGroup>\n                                            {Object.keys(tab.accordions).sort().map((accordionKey, ind) => {\n                                                return this.renderAccordion(\n                                                    tab.accordions[accordionKey],\n                                                    tabKey,\n                                                    [accordionKey],\n                                                    toolbar.state,\n                                                    ind\n                                                );\n                                            })}\n                                            {this.props.box.children.map((id, ind) => {\n                                                let container = this.props.box.sortableContainers[id];\n                                                if (tabKey === \"main\") {\n                                                    return (\n                                                        <Panel key={'panel_' + id}\n                                                            className=\"panelPluginToolbar\"\n                                                            collapsible\n                                                            onEnter={(panel) => {\n                                                                panel.parentNode.classList.add(\"extendedPanel\");\n                                                            }}\n                                                            onExited={(panel) => {\n                                                                panel.parentNode.classList.remove(\"extendedPanel\");\n                                                            }}\n                                                            header={\n                                                                <span>\n                                                                    <i className=\"toolbarIcons material-icons\">web_asset</i>\n                                                                    {(toolbar.state.__pluginContainerIds && toolbar.state.__pluginContainerIds[container.key].name) ?\n                                                                        toolbar.state.__pluginContainerIds[container.key].name :\n                                                                        (i18n.t('Block') + ' ' + (ind + 1))\n                                                                    }\n                                                                </span>\n                                                            }>\n                                                            <GridConfigurator id={id}\n                                                                parentId={this.props.box.id}\n                                                                container={container}\n                                                                onColsChanged={this.props.onColsChanged}\n                                                                onRowsChanged={this.props.onRowsChanged}\n                                                                sortableProps={this.props.box.sortableContainers[id]}\n                                                                onSortablePropsChanged={this.props.onSortablePropsChanged}\n                                                                onSortableContainerResized={this.props.onSortableContainerResized}/>\n                                                        </Panel>);\n                                                }\n                                                return null;\n                                            })}\n                                        </PanelGroup>\n\n                                        {textButton}\n                                        {xmlButton}\n                                        {configButton}\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    /**\n     * Header configuration\n     * @param name type of title\n     * @param value value of the field\n     */\n    handlecanvasToolbar(name, value) {\n        let navitem = this.props.navItems[this.props.navItemSelected];\n        let toolbar = this.props.toolbars[this.props.navItemSelected].controls.main.accordions;\n        switch (name) {\n        // change page/slide title\n        case \"custom_title\":\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: value,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: navitem.header.display.documentTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n            break;\n            // change page/slide title\n        case \"custom_subtitle\":\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: value,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: navitem.header.display.documentTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n            break;\n            // change page/slide title\n        case \"custom_pagenum\":\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: value,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: navitem.header.display.documentTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n            break;\n        // preview / export document\n        case i18n.t('display_page'):\n            this.props.onNavItemToggled(this.props.navItemSelected);\n            break;\n        // change document(navitem) name\n        case i18n.t('NavItem_name'):\n            if (isContainedView(this.props.navItemSelected)) {\n                this.props.onContainedViewNameChanged(this.props.navItemSelected, value);\n            } else {\n                this.props.onNavItemNameChanged(this.props.navItemSelected, value);\n            }\n            break;\n        // display - course title\n        case i18n.t('course_title'):\n            let courseTitle = value ? 'reduced' : 'hidden';\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: courseTitle,\n                    documentTitle: navitem.header.display.documentTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n            break; // display - page title\n        case i18n.t('Title') + i18n.t('document'):\n            let docTitle = value ? 'reduced' : 'hidden';\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: docTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n\n            break;\n        // display - page title\n        case i18n.t('Title') + i18n.t('page'):\n            let pageTitle = value ? 'reduced' : 'hidden';\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: pageTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n\n            break;\n        // display - slide title\n        case i18n.t('Title') + i18n.t('slide'):\n            let slideTitle = value ? 'reduced' : 'hidden';\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: slideTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n            break;\n        // display - subtitle\n        case i18n.t('subtitle'):\n            let subTitle = value ? 'reduced' : 'hidden';\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle ? navitem.header.elementContent.documentSubTitle : i18n.t('subtitle'),\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: navitem.header.display.documentTitle,\n                    documentSubTitle: subTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n            break;\n        // display - breadcrumb\n        case i18n.t('Breadcrumb'):\n            let breadcrumb = value ? 'reduced' : 'hidden';\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: navitem.header.display.documentTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: breadcrumb,\n                    pageNumber: navitem.header.display.pageNumber,\n                },\n            });\n            break;\n        // display - pagenumber\n        case i18n.t('pagenumber'):\n            let pagenumber = value ? 'reduced' : 'hidden';\n            this.props.titleModeToggled(this.props.navItemSelected, {\n                elementContent: {\n                    documentTitle: navitem.header.elementContent.documentTitle,\n                    documentSubTitle: navitem.header.elementContent.documentSubTitle,\n                    numPage: navitem.header.elementContent.numPage,\n                },\n                display: {\n                    courseTitle: navitem.header.display.courseTitle,\n                    documentTitle: navitem.header.display.documentTitle,\n                    documentSubTitle: navitem.header.display.documentSubTitle,\n                    breadcrumb: navitem.header.display.breadcrumb,\n                    pageNumber: pagenumber,\n                },\n            });\n            break;\n        default:\n            break;\n        }\n\n    }\n\n    /**\n     * Render toolbar accordion\n     * @param accordion Name of the accordion\n     * @param tabKey Unique key of the tab\n     * @param accordionKeys Unique keys of the accordion\n     * @param state Toolbar state\n     * @param key Current key\n     */\n    renderAccordion(accordion, tabKey, accordionKeys, state, key) {\n        let props = {\n            key: key,\n            className: \"panelPluginToolbar\",\n            collapsible: true,\n            onEntered: (panel) => {\n                panel.parentNode.classList.add(\"extendedPanel\");\n            },\n            onExited: (panel) => {\n                panel.parentNode.classList.remove(\"extendedPanel\");\n            },\n            header: (\n                <span key={'span' + key}>\n                    <i className=\"toolbarIcons material-icons\">\n                        {accordion.icon ? accordion.icon : <span className=\"toolbarIcons\"/>}\n                    </i>{accordion.__name}\n                </span>\n            ),\n        };\n        let children = [];\n        if (accordion.order) {\n            for (let i = 0; i < accordion.order.length; i++) {\n                if (accordion.accordions[accordion.order[i]]) {\n                    children.push(this.renderAccordion(accordion.accordions[accordion.order[i]], tabKey, [accordionKeys[0], accordion.order[i]], state, i));\n                } else if (accordion.buttons[accordion.order[i]]) {\n                    children.push(this.renderButton(accordion, tabKey, accordionKeys, accordion.order[i], state, i));\n                } else {\n                    // eslint-disable-next-line no-console\n                    console.error(\"Element %s not defined\", accordion.order[i]);\n                }\n            }\n        } else {\n            let buttonKeys = Object.keys(accordion.buttons);\n            for (let i = 0; i < buttonKeys.length; i++) {\n                let buttonWidth = (buttonKeys[i] === '__width' || buttonKeys[i] === '__height') ? '60%' : '100%';\n                let buttonMargin = (buttonKeys[i] === '__width' || buttonKeys[i] === '__height') ? '5%' : '0px';\n                children.push(\n                    <div key={'div_' + i }\n                        style={{\n                            width: buttonWidth,\n                            marginRight: buttonMargin,\n                        }}>\n                        {this.renderButton(accordion, tabKey, accordionKeys, buttonKeys[i], state, i)}\n\n                    </div>\n                );\n            }\n\n        }\n\n        if (accordion.key === 'marks_list') {\n            children.push(\n                <MarksList key=\"marks_list\"\n                    state={state}\n                    toolbars={this.props.toolbars}\n                    onRichMarksModalToggled={this.props.onRichMarksModalToggled}\n                    onRichMarkEditPressed={this.props.onRichMarkEditPressed}\n                    onRichMarkDeleted={this.props.onRichMarkDeleted}/>\n            );\n        }\n\n        return React.createElement(Panel, props, children);\n    }\n\n    /**\n     * Render toolbar button\n     * @param accordion Name of the accordion\n     * @param tabKey Unique key of the tab\n     * @param accordionKeys Unique keys of the accordion\n     * @param buttonKey Unique key of the button\n     * @param state Toolbar state\n     * @param key Current key\n     * @returns {code} Button code\n     */\n    renderButton(accordion, tabKey, accordionKeys, buttonKey, state, key) {\n        let button = accordion.buttons[buttonKey];\n        let children = null;\n        let id;\n        if(this.props.boxSelected === -1) {\n            id = this.props.navItemSelected;\n        }else{\n            id = this.props.box.id;\n        }\n\n        let props = {\n            key: ('child_' + key),\n            id: ('page' + '_' + buttonKey),\n            type: button.type,\n            value: button.value,\n            checked: button.checked,\n            label: button.__name,\n            min: button.min,\n            max: button.max,\n            step: button.step,\n            disabled: false,\n            title: button.title ? button.title : '',\n            className: button.class,\n            style: { width: '100%' },\n            onBlur: e => {\n                let value = e.target.value;\n                if (button.type === 'number' && value === \"\") {\n                    value = button.min ? button.min : 0;\n                }\n\n                if (!button.autoManaged && button.callback) {\n                    button.callback(state, buttonKey, value, id, UPDATE_TOOLBAR);\n                }\n            },\n            onChange: e => {\n                let value;\n                if(typeof e.target !== 'undefined') {\n                    value = e.target.value;\n                } else {\n                    value = e.value;\n                }\n                if (buttonKey === '__width' || buttonKey === '__height') {\n                    let newButton = Object.assign({}, (buttonKey === '__width' ? accordion.buttons.__width : accordion.buttons.__height));\n                    let otherButton = Object.assign({}, (buttonKey === '__height' ? accordion.buttons.__width : accordion.buttons.__height));\n\n                    switch (e.target.type) {\n                    case \"checkbox\":\n                        newButton.auto = e.target.checked;\n                        newButton.displayValue = newButton.auto ? 'auto' : button.value;\n                        newButton.type = newButton.auto ? 'text' : 'number';\n                        newButton.disabled = newButton.auto;\n                        break;\n                    case \"select-one\":\n                        newButton.units = value;\n                        break;\n                    default:\n                        if (isNaN(parseInt(value, 10))) {\n                            if (value === \"\") {\n                                value = 0;\n                            } else {\n                                value = 100;\n                            }\n                        } else {\n                            value = parseInt(value, 10);\n                        }\n                        let val;\n                        if (newButton.units === \"%\") {\n                            val = Math.min(Math.max(value, 0), 100);\n                            newButton.displayValue = val;\n                            newButton.value = val;\n                        } else if (newButton.units === \"px\") {\n                            val = Math.max(value, 0);\n                            newButton.displayValue = val;\n                            newButton.value = val;\n                        }\n                        break;\n                    }\n                    if(accordion.buttons.__aspectRatio && accordion.buttons.__aspectRatio.checked) {\n                        otherButton.value = otherButton.value * newButton.value / button.value;\n                        if(!otherButton.auto) {\n                            otherButton.displayValue = otherButton.value;\n                        }\n                    }\n\n                    // If next values are going to be over 100%, prevent action\n                    if((newButton.units === \"%\" && newButton.value > 100) || (otherButton.units === \"%\" && otherButton.value > 100)) {\n                        return;\n                    }\n\n                    if(buttonKey === \"__width\") {\n                        this.props.onBoxResized(id, newButton, otherButton);\n                    }else{\n                        this.props.onBoxResized(id, otherButton, newButton);\n                    }\n                    return;\n                }\n                if (button.type === 'number') {\n                    // If there's any problem when parsing (NaN) -> take min value if defined; otherwise take 0\n                    if (!(value && value.length >= 1 && (value.charAt(value.length - 1) === '.' || value.charAt(value.length - 1) === ',' || value === 0))) {\n                        value = parseFloat(value) || button.min || 0;\n                        if (button.max && value > button.max) {\n                            value = button.max;\n                        }\n                    }\n\n                }\n\n                if (button.type === 'checkbox') {\n                    value = e.target.checked;\n                }\n                if (button.type === 'radio') {\n                    value = button.options[value];\n                    if (buttonKey === '__position') {\n                        this.props.onToolbarUpdated(id, tabKey, accordionKeys, '__position', value);\n                        let parentId = this.props.box.parent;\n                        let containerId = this.props.box.container;\n                        this.props.onBoxMoved(id, 0, 0, value, parentId, containerId);\n                        if (isSortableContainer(containerId)) {\n                            let newHeight = parseFloat(document.getElementById(containerId).clientHeight, 10);\n                            this.props.onSortableContainerResized(containerId, parentId, newHeight);\n                        }\n                    }\n                }\n\n                if (button.type === 'select' && button.multiple === true) {\n                    value = button.value;\n                    let ind = button.value.indexOf(e);\n                    value = e; // [...e.target.options].filter(o => o.selected).map(o => o.value);\n                }\n\n                if (button.type === 'colorOptions') {\n                    value = e.value;\n                }\n                if (button.type === 'color') {\n                    value = e.color;\n                    if (!value) {return;}\n                }\n\n                this.props.onToolbarUpdated(id, tabKey, accordionKeys, buttonKey, value);\n\n                if (!button.autoManaged) {\n                    if(!button.callback) {\n                        this.handlecanvasToolbar(button.__name, value);\n                    }else{\n                        button.callback(state, buttonKey, value, id, UPDATE_TOOLBAR);\n                    }\n\n                }\n            },\n\n        };\n\n        if (button.type === \"color\") {\n            return React.createElement(\n                FormGroup,\n                { key: button.__name },\n                [\n                    React.createElement(\n                        ControlLabel,\n                        { key: 'label_' + button.__name },\n                        button.__name),\n                    /* React.createElement(\n                      FormControl,\n                        props,\n                        null\n                    ),*/\n                    React.createElement(\n                        ColorPicker, { key: props.label, value: props.value, onChange: props.onChange, mode: 'RGB' },\n                        []),\n                ]);\n\n        }\n        if (button.options) {\n            if (button.type === \"colorOptions\") {\n                props.options = button.options;\n                props.optionRenderer = this.renderOption;\n                props.valueRenderer = this.renderValue;\n                return React.createElement(\n                    FormGroup,\n                    { key: button.__name },\n                    [\n                        React.createElement(\n                            ControlLabel,\n                            { key: 'label_' + button.__name },\n                            button.__name),\n                        React.createElement(\n                            Select,\n                            props,\n                            null),\n                    ]\n                );\n            }\n\n            if (button.type === \"select\") {\n                if (!button.multiple) {\n                    button.options.map((option, index) => {\n                        if (!children) {\n                            children = [];\n                        }\n                        children.push(React.createElement('option', { key: 'child_' + index, value: option }, option));\n                    });\n                    props.componentClass = 'select';\n                    return React.createElement(\n                        FormGroup,\n                        { key: button.__name },\n                        [\n                            React.createElement(\n                                ControlLabel,\n                                { key: 'label_' + button.__name },\n                                button.__name),\n                            React.createElement(\n                                FormControl,\n                                props,\n                                children),\n                        ]\n                    );\n                }\n\n                props.multiple = 'multiple';\n                props.options = button.options;\n                props.multi = true;\n                props.simpleValue = true;\n                props.placeholder = \"No has elegido ninguna opción\";\n                return React.createElement(\n                    FormGroup,\n                    { key: button.__name },\n                    [\n                        React.createElement(\n                            ControlLabel,\n                            { key: 'label_' + button.__name },\n                            button.__name),\n                        React.createElement(\n                            Select,\n                            props,\n                            null),\n                    ]\n                );\n            }\n\n            if (button.type === 'radio') {\n                button.options.map((radio, index) => {\n                    if (!children) {\n                        children = [];\n                        children.push(React.createElement(ControlLabel, { key: 'child_' + index }, button.__name));\n                    }\n                    children.push(React.createElement(Radio, {\n                        key: index,\n                        name: button.__name,\n                        value: index,\n                        id: (button.__name + radio),\n                        onChange: props.onChange,\n                        checked: (button.value === button.options[index]),\n                    }, radio));\n                });\n                return React.createElement(FormGroup, props, children);\n            }\n\n            if (button.type === 'fancy_radio') {\n                if (buttonKey === '__verticalAlign') {\n                    return React.createElement(RadioButtonFormGroup, {\n                        key: button.__name,\n                        title: button.__name,\n                        options: button.options,\n                        selected: button.value,\n                        click: (option) => {\n                            this.props.onVerticallyAlignBox(this.props.boxSelected, option);\n                        },\n                        tooltips: button.tooltips,\n                        icons: button.icons,\n                    }, null);\n                }\n                return null;\n            }\n        }\n\n        if (button.type === 'checkbox') {\n            return React.createElement(\n                FormGroup,\n                { key: (button.__name) },\n                React.createElement(\n                    Checkbox,\n                    props,\n                    button.__name)\n            );\n        }\n\n        if (button.type === 'conditionalText') {\n            props.style.marginTop = '5px';\n            props.style.marginBottom = '15px';\n\n            return React.createElement(\n                FormGroup,\n                { key: button.__name, style: { display: accordion.buttons[button.associatedKey].checked ? \"block\" : \"none\" } },\n                [\n                    React.createElement(\n                        \"span\",\n                        { key: 'output_span' + button.__name, className: 'rangeOutput' },\n                        button.type === \"range\" ? button.value : null),\n                    React.createElement(\n                        FormControl,\n                        props,\n                        null),\n                ]\n            );\n        }\n\n        if (button.type === \"vish_provider\") {\n            return React.createElement(VishProvider, {\n                key: button.__name,\n                formControlProps: props,\n                isBusy: this.props.isBusy,\n                fetchResults: this.props.fetchResults,\n                onFetchVishResources: this.props.onFetchVishResources,\n                onUploadVishResource: this.props.onUploadVishResource,\n                onChange: props.onChange,\n            }, null);\n        }\n\n        // If it's none of previous types (number, text, color, range, ...)\n        if (buttonKey === '__width' || buttonKey === '__height') {\n            let advancedPanel = (\n                <FormGroup>\n                    <Checkbox label={i18n.t(\"Auto\")}\n                        checked={button.auto}\n                        onChange={props.onChange}>\n                        {i18n.t(\"Auto\")}\n                    </Checkbox>\n                    {/* Disable px size in slides*/}\n                    {isSlide(this.props.navItems[this.props.navItemSelected].type) ?\n                        (<span />) :\n                        (<div><ControlLabel>{i18n.t(\"Units\")}</ControlLabel>\n                            <FormControl componentClass='select'\n                                value={button.units}\n                                onChange={props.onChange}>\n                                <option value=\"px\">{i18n.t(\"Pixels\")}</option>\n                                <option value=\"%\">{i18n.t(\"Percentage\")}</option>\n                            </FormControl></div>)}\n                </FormGroup>\n            );\n\n            props.value = button.auto ? 'auto' : button.value;\n            props.type = button.auto ? 'text' : 'number';\n            props.disabled = button.auto;\n            return (\n                <FormGroup key={button.__name}>\n                    <ControlLabel key={\"label_\" + button.__name}>\n                        {button.__name + (!button.auto ? \" (\" + button.units + \")\" : \"\")}\n                    </ControlLabel>\n                    <InputGroup>\n                        <FormControl {...props} />\n                        <OverlayTrigger trigger=\"click\"\n                            placement=\"bottom\"\n                            rootClose\n                            overlay={\n                                <Popover id=\"advancedpanel\"\n                                    className=\"advancedPopover\"\n                                    title={i18n.t('Advanced')}>\n                                    {advancedPanel}\n                                </Popover>\n                            }>\n                            <InputGroup.Addon className=\"gc_addon\">\n                                <i className=\"material-icons gridconficons\">settings</i>\n                            </InputGroup.Addon>\n                        </OverlayTrigger>\n                    </InputGroup>\n                </FormGroup>\n            );\n        }\n\n        return React.createElement(\n            FormGroup,\n            { key: button.__name },\n            [\n                React.createElement(\n                    ControlLabel,\n                    { key: 'label_' + button.__name },\n                    button.__name),\n                React.createElement(\n                    \"span\",\n                    { key: 'output_span' + button.__name, className: 'rangeOutput' },\n                    button.type === \"range\" ? button.value : null),\n                React.createElement(\n                    FormControl,\n                    props,\n                    null),\n            ]\n        );\n    }\n\n    /**\n     * Renders options or multiple select inputs\n     * @param option Option object wihth its label\n     * @returns {code}\n     */\n    renderOption(option) {\n        return (\n            <span>{option.label}<i style={{ color: option.color, float: 'right' }} className=\"fa fa-stop\" /></span>\n        );\n    }\n\n    /**\n     * Rende option value\n     * @param option Option object wihth its label\n     * @returns {code}\n     */\n    renderValue(option) {\n        return (\n            <span>{option.label}</span>\n        );\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 234,
    "kind": "class",
    "name": "PluginToolbar",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx",
    "importStyle": "PluginToolbar",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 235,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 24,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 236,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "{open: boolean}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#render",
    "access": "public",
    "description": "Render React component",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "handlecanvasToolbar",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#handlecanvasToolbar",
    "access": "public",
    "description": "Header configuration",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "type of title"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "value of the field"
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "renderAccordion",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#renderAccordion",
    "access": "public",
    "description": "Render toolbar accordion",
    "lineNumber": 504,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "accordion",
        "description": "Name of the accordion"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tabKey",
        "description": "Unique key of the tab"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "accordionKeys",
        "description": "Unique keys of the accordion"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "Toolbar state"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": "Current key"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "renderButton",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#renderButton",
    "access": "public",
    "description": null,
    "lineNumber": 578,
    "undocument": true,
    "params": [
      {
        "name": "accordion",
        "types": [
          "*"
        ]
      },
      {
        "name": "tabKey",
        "types": [
          "*"
        ]
      },
      {
        "name": "accordionKeys",
        "types": [
          "*"
        ]
      },
      {
        "name": "buttonKey",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "renderOption",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#renderOption",
    "access": "public",
    "description": "Renders options or multiple select inputs",
    "lineNumber": 972,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": "Option object wihth its label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "renderValue",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/plugin_toolbar/PluginToolbar.jsx~PluginToolbar#renderValue",
    "access": "public",
    "description": "Rende option value",
    "lineNumber": 983,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "option",
        "description": "Option object wihth its label"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx",
    "content": "import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormGroup, ControlLabel, Tooltip, OverlayTrigger } from 'react-bootstrap';\nrequire('./_radiobuttonformgroup.scss');\n/** *\n * Radio Button component that displays material icons instead of plain text options\n * @example <RadioButtonFormGroup\n *    key=\"alignment\"\n *    title='Alineación'       // Label for Input\n *    options={['left', 'center', 'right']}      // The actual value of the option\n *    selected={this.props.box.textAlign}        // Current value\n *    tooltips={['Alinear a la izquierda', 'Alinear al centro','Alinear a la derecha']} // Optional: Help message for the user. Default: option value\n *    icons={['format_align_left', 'format_align_center', 'format_align_right']}   // Material icon code in the same order as the options\n *    click={(option) => {this.props.onChangeSortableProps(this.props.id, this.props.parentId, 'textAlign', option)}} /> // Change handler\n */\n\nexport default class RadioButtonFormGroup extends Component {\n    /**\n     * Constructor\n     * @param props React component properties\n     */\n    constructor(props) {\n        super(props);\n\n    }\n\n    /**\n     * Tooltip creator\n     * @param text Tooltip Content\n     * @returns {Tooltip} React Tooltip component\n     */\n    tooltip(text) {\n        return (\n            <Tooltip id=\"tooltip_radio\">{text}</Tooltip>\n        );\n    }\n\n    /**\n     * Renders React Component\n     * @returns {ccde} Rendered React component\n     */\n    render() {\n        return React.createElement(FormGroup, {},\n            React.createElement(ControlLabel, { key: 'label' }, this.props.title), <br key=\"space\"/>,\n            this.props.options\n                .map((option, index) => {\n                    return (<OverlayTrigger placement=\"top\" key={'item_' + index} overlay={this.props.tooltips ? this.tooltip(this.props.tooltips[index]) : this.tooltip(option)}>\n                        {React.createElement('button',\n                            { value: option,\n                                className: (this.props.selected === option ? 'radioButtonCustom selectedAlignment' : 'radioButtonCustom unselectedAlignment'),\n                                onClick: e => {this.props.click(option); e.stopPropagation();},\n                            },\n                            <i className=\"material-icons\">{this.props.icons[index]}</i>)}\n                    </OverlayTrigger>);\n                })\n        );\n\n    }\n\n    /**\n     * Before component updates\n     * @param nextProps React next props\n     * @param nextState React next state\n     * @returns {boolean} True\n     */\n    componentWillUpdate(nextProps, nextState) {\n        return true;\n    }\n\n}\n/**\n * Prop Types\n * @type {{key: shim, title: shim, options: shim, selected: shim, click: shim, tooltips: *, icons: *}}\n */\nRadioButtonFormGroup.defaultProps = {\n    // key: PropTypes.string,\n    title: PropTypes.string,\n    options: PropTypes.object,\n    selected: PropTypes.string,\n    click: PropTypes.func,\n    tooltips: PropTypes.arrayOf(PropTypes.string),\n    icons: PropTypes.arrayOf(PropTypes.string),\n};\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "class",
    "name": "RadioButtonFormGroup",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx",
    "importStyle": "RadioButtonFormGroup",
    "description": "Radio Button component that displays material icons instead of plain text options",
    "examples": [
      "<RadioButtonFormGroup\n   key=\"alignment\"\n   title='Alineación'       // Label for Input\n   options={['left', 'center', 'right']}      // The actual value of the option\n   selected={this.props.box.textAlign}        // Current value\n   tooltips={['Alinear a la izquierda', 'Alinear al centro','Alinear a la derecha']} // Optional: Help message for the user. Default: option value\n   icons={['format_align_left', 'format_align_center', 'format_align_right']}   // Material icon code in the same order as the options\n   click={(option) => {this.props.onChangeSortableProps(this.props.id, this.props.parentId, 'textAlign', option)}} /> // Change handler"
    ],
    "lineNumber": 17,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 245,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": "React component properties"
      }
    ]
  },
  {
    "__docId__": 246,
    "kind": "method",
    "name": "tooltip",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup#tooltip",
    "access": "public",
    "description": "Tooltip creator",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Tooltip} React Tooltip component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Tooltip Content"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Tooltip"
      ],
      "spread": false,
      "description": "React Tooltip component"
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ccde} Rendered React component"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ccde"
      ],
      "spread": false,
      "description": "Rendered React component"
    },
    "params": []
  },
  {
    "__docId__": 248,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/toolbar/radio_button_form_group/RadioButtonFormGroup.jsx~RadioButtonFormGroup#componentWillUpdate",
    "access": "public",
    "description": "Before component updates",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": "React next props"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextState",
        "description": "React next state"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True"
    }
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx",
    "content": "import React, { Component } from 'react';\nimport { Modal, Form, FormGroup, Button } from 'react-bootstrap';\nimport i18n from 'i18next';\n\n/**\n * VISH Catalog Modal\n */\nexport default class VishCatalogModal extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        return (\n            <Modal className=\"pageModal\" backdrop bsSize=\"large\" show={this.props.visible}>\n                <Modal.Header>\n                    <Modal.Title>{i18n.t(\"Uploaded_Images\")}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form style={{ minHeight: 250 }}>\n                        <FormGroup>\n                            {(this.props.state || this.props.images.length !== 0) ? this.props.images.map((item, index) => {\n                                return (\n                                    <img key={index}\n                                        src={item}\n                                        style={{\n                                            width: 160,\n                                            height: 160,\n                                            border: \"solid transparent 3px\",\n                                        }} />\n                                );\n                            }) : <div className=\"alert alert-info\">{i18n.t(\"Uploaded_Images_No\")}</div>}\n                        </FormGroup>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button onClick={e => {\n                        this.props.onVishCatalogToggled();\n                    }}>{i18n.t(\"OK\")}</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "class",
    "name": "VishCatalogModal",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx~VishCatalogModal",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx",
    "importStyle": "VishCatalogModal",
    "description": "VISH Catalog Modal",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 251,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx~VishCatalogModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx~VishCatalogModal#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 252,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx~VishCatalogModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/VishCatalogModal.jsx~VishCatalogModal#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 253,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx",
    "content": "import React, { Component } from 'react';\nimport { FormGroup, FormControl, ControlLabel, Button } from 'react-bootstrap';\nimport VishSearcherModal from './../vish_searcher_modal/VishSearcherModal';\nimport VishUploaderModal from './../vish_uploader_modal/VishUploaderModal';\nimport i18n from 'i18next';\n\n/**\n * VishProvider Component\n */\nexport default class VishProvider extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.index = 0;\n        /**\n         * Component's initial state\n         * @type {{searching: boolean, uploading: boolean, resourceUrl: string}}\n         */\n        this.state = {\n            searching: false,\n            uploading: false,\n            resourceUrl: \"\",\n        };\n    }\n\n    /**\n     * Render React Component\n     * @returns {XML}\n     */\n    render() {\n        return (\n            <FormGroup>\n                <ControlLabel>{this.props.formControlProps.label}</ControlLabel>\n                <FormControl {...this.props.formControlProps} onChange={e => {\n                    this.props.formControlProps.onChange(e, this.state);\n                }}/>\n                <br />\n                <Button className={'toolbarButton'}\n                    onClick={() => {\n                        this.setState({ searching: true });\n                    }}>{i18n.t('Search_in_ViSH')}</Button>\n                <br />\n                <br />\n                <Button className={'toolbarButton'}\n                    onClick={() => {\n                        this.setState({ uploading: true });\n                    }}>{i18n.t('Upload_to_ViSH')}</Button>\n                <VishSearcherModal visible={this.state.searching}\n                    isBusy={this.props.isBusy}\n                    fetchResults={this.props.fetchResults}\n                    onVishSearcherToggled={(resourceUrl) => {\n                        if(resourceUrl) {\n                            this.props.onChange({ target: { value: resourceUrl } });\n                        }\n                        this.setState({ searching: !this.state.searching });\n                    }}\n                    onFetchVishResources={this.props.onFetchVishResources}/>\n                <VishUploaderModal visible={this.state.uploading}\n                    isBusy={this.props.isBusy}\n                    onVishUploaderToggled={(resourceUrl) => {\n                        if(resourceUrl) {\n                            this.props.onChange({ target: { value: resourceUrl } });\n                        }\n                        this.setState({ uploading: !this.state.uploading });\n                    }}\n                    onUploadVishResource={this.props.onUploadVishResource}/>\n            </FormGroup>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 254,
    "kind": "class",
    "name": "VishProvider",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx",
    "importStyle": "VishProvider",
    "description": "VishProvider Component",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 255,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "index",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider#index",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "{searching: boolean, uploading: boolean, resourceUrl: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_provider/VishProvider.jsx~VishProvider#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XML}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XML"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 259,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Modal, FormControl, Col, Form, FormGroup, ControlLabel, Button } from 'react-bootstrap';\nimport Dali from './../../../../core/main';\nimport i18n from 'i18next';\n/**\n * VISH Search Component\n */\nexport default class VishSearcherModal extends Component {\n    /**\n     * Constructor\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Index\n         * @type {number}\n         */\n        this.index = 0;\n        /**\n         * Component's initial state\n         */\n        this.state = {\n            itemSelected: 0,\n            resourceUrl: \"\",\n        };\n    }\n    /**\n     * Render React Component\n     *\n     */\n    render() {\n        return (\n            <Modal className=\"pageModal\" backdrop bsSize=\"large\" show={this.props.visible}>\n                <Modal.Header>\n                    <Modal.Title>{i18n.t(\"vish_search\")}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form horizontal>\n                        <FormGroup>\n                            <Col md={4}>\n                                <ControlLabel>{i18n.t(\"vish_search_terms\")}</ControlLabel>\n                                <FormControl ref=\"query\" type=\"text\"/>\n                            </Col>\n                            <Col md={3}>\n                                <ControlLabel>{i18n.t(\"vish_search_by_type\")}</ControlLabel>\n                                <FormControl ref=\"type\" componentClass=\"select\">\n                                    <option value=\"Picture\">{i18n.t(\"vish_search_types.Picture\")}</option>\n                                    {/*\n                                     <option value=\"Resource\">All</option>\n                                     <option value=\"Audio\">Audio</option>\n                                     <option value=\"Embed\">Embed</option>\n                                     <option value=\"Excursion\">Excursion</option>\n                                     <option value=\"Swf\">Flash Object</option>\n                                     <option value=\"Link\">Link</option>\n                                     <option value=\"Officedoc\">Office Document</option>\n                                     <option value=\"Scormfile\">SCORM Package</option>\n                                     <option value=\"Video\">Video</option>\n                                     <option value=\"Webapp\">Web Application</option>\n                                     <option value=\"Workshop\">Workshop</option>\n                                     <option value=\"Writing\">Writing</option>\n                                     <option value=\"Zipfile\">ZIP File</option>\n                                     */}\n                                </FormControl>\n                            </Col>\n                            <Col md={3}>\n                                <ControlLabel>{i18n.t(\"vish_search_by\")}</ControlLabel>\n                                <FormControl ref=\"sort_by\" componentClass=\"select\">\n                                    <option value=\"ranking\">{i18n.t(\"vish_search_filters.ranking\")}</option>\n                                    <option value=\"popularity\">{i18n.t(\"vish_search_filters.popularity\")}</option>\n                                    <option value=\"modification\">{i18n.t(\"vish_search_filters.modification\")}</option>\n                                    <option value=\"creation\">{i18n.t(\"vish_search_filters.creation\")}</option>\n                                    <option value=\"visits\">{i18n.t(\"vish_search_filters.visits\")}</option>\n                                    <option value=\"favorites\">{i18n.t(\"vish_search_filters.favorites\")}</option>\n                                    <option value=\"quality\">{i18n.t(\"vish_search_filters.quality\")}</option>\n                                </FormControl>\n                            </Col>\n                            <Col md={2}>\n                                <Button className=\"btn-primary\" onClick={(e) => {\n                                    let url = encodeURI(Dali.Config.search_vish_url +\n                                        \"?q=\" + ReactDOM.findDOMNode(this.refs.query).value +\n                                        \"&type=\" + ReactDOM.findDOMNode(this.refs.type).value +\n                                        \"&sort_by=\" + ReactDOM.findDOMNode(this.refs.sort_by).value\n                                    );\n\n                                    this.props.onFetchVishResources(url);\n                                    e.preventDefault();\n                                }}>{i18n.t(\"vish_search_button\")}\n                                </Button>\n                            </Col>\n                        </FormGroup>\n\n                    </Form>\n                    <Form style={{ minHeight: 250 }}>\n                        {this.props.fetchResults.total_results ?\n                            (\n                                <FormGroup>\n                                    <ControlLabel>{ this.props.fetchResults.total_results + \" Resultados\"}</ControlLabel>\n                                    <br />\n                                    {this.props.fetchResults.results.map((item, index) => {\n                                        let border = this.state.itemSelected === index ? \"solid orange 3px\" : \"solid transparent 3px\";\n                                        return (\n                                            <img key={index}\n                                                src={item.file_url}\n                                                style={{\n                                                    width: 160,\n                                                    height: 160,\n                                                    border: border,\n                                                }}\n                                                onClick={e => {\n                                                    this.setState({\n                                                        itemSelected: index,\n                                                        resourceUrl: item.file_url,\n                                                    });\n                                                }}\n                                            />\n                                        );\n                                    })}\n                                </FormGroup>\n                            ) :\n                            (\n                                <FormGroup>\n                                    <ControlLabel>{this.props.isBusy.msg}</ControlLabel>\n                                </FormGroup>\n                            )\n                        }\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button onClick={e => {\n                        this.props.onVishSearcherToggled();\n                    }}>{i18n.t(\"Cancel\")}</Button>\n                    <Button bsStyle=\"primary\" onClick={e => {\n                        this.props.onVishSearcherToggled(this.state.resourceUrl);\n                    }}>{i18n.t(\"global_config.Accept\")}</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 260,
    "kind": "class",
    "name": "VishSearcherModal",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx",
    "importStyle": "VishSearcherModal",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 261,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 13
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "index",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal#index",
    "access": "public",
    "description": "Index",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 23,
    "type": {
      "types": [
        "{\"itemSelected\": *, \"resourceUrl\": *}"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_searcher_modal/VishSearcherModal.jsx~VishSearcherModal#render",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx",
    "content": "import React, { Component } from 'react';\nimport FileInput from './../../common/file-input/FileInput';\n\n/**\n * VISH Dropzone component\n */\nexport default class VishDropzone extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{hover: boolean, file: null}}\n         */\n        this.state = {\n            hover: false,\n            file: null,\n        };\n        /**\n         * Binded function\n         */\n        this.onDrop = this.onDrop.bind(this);\n    }\n\n    /**\n     * Dropped file callback\n     * @param acceptedFile\n     * @param rejectedFile\n     */\n    onDrop(acceptedFile, rejectedFile) {\n\n        if (acceptedFile.length === 1) {\n            this.setState({ file: acceptedFile[0] });\n        }\n    }\n\n    /* toggleHover() {\n        this.setState({ hover: !this.state.hover });\n    }\n    mouseOver() {\n        this.setState({ hover: true });\n    }\n    mouseOut() {\n        this.setState({ hover: false });\n    }*/\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n        let file = this.state.file;\n\n        let dropStyle = {\n            borderColor: \"#92B0B3\",\n            borderStyle: \"dashed\",\n            borderWidth: \"2px\",\n            width: \"100%\",\n            height: \"200px\",\n            display: \"table\",\n        };\n\n        if (this.state.hover) {\n            dropStyle.background = \"#C8DADF\";\n        } else {\n            dropStyle.background = \"#FFFFFF\";\n        }\n        /* <Dropzone onDrop={this.onDrop} multiple={false} style={dropStyle}>\n         {(file) ?\n         (<div\n         style={{ verticalAlign: \"middle\", textAlign: \"center\", display: \"table-cell\" }}>{file.name}</div>) :\n         (<div style={{ verticalAlign: \"middle\", textAlign: \"center\", display: \"table-cell\" }}>\n         <div><Glyphicon glyph=\"hdd\"/></div>\n         <span><strong>Choose a file</strong> or drag it here</span>\n         </div>)\n         }\n         </Dropzone>*/\n        return (\n            <FileInput onChange={this.onDrop} className=\"fileInput\">\n                {/* <Button className=\"btn btn-primary\" style={{ marginTop: '0px' }}>{ Dali.i18n.t('FileDialog') }</Button>*/}\n                {/* <span style={{ marginLeft: '10px' }}>*/}\n                {/* <label className=\"control-label\">{ Dali.i18n.t('FileDialog') + ':   ' } </label> { this.state.name || '' }</span>*/}\n                <div className=\"fileDrag\">\n                    <span style={{ display: this.state.name ? 'none' : 'block' }}><i className=\"material-icons\">ic_file_upload</i><b>{ Dali.i18n.t('FileInput.Drag') }</b>{ Dali.i18n.t('FileInput.Drag_2') }<b>{ Dali.i18n.t('FileInput.Click') }</b>{ Dali.i18n.t('FileInput.Click_2') }</span>\n                    <span className=\"fileUploaded\" style={{ display: this.state.name ? 'block' : 'none' }}><i className=\"material-icons\">insert_drive_file</i> { this.state.name || '' }</span>\n                </div>\n            </FileInput>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "class",
    "name": "VishDropzone",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx",
    "importStyle": "VishDropzone",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 267,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone",
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "{hover: boolean, file: null}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "onDrop",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone#onDrop",
    "access": "public",
    "description": "Dropped file callback",
    "lineNumber": 33,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "acceptedFile",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rejectedFile",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 271,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishDropzone.jsx~VishDropzone#render",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx",
    "content": "import React, { Component } from 'react';\nimport VishDropzone from './VishDropzone';\nimport ReactDOM from 'react-dom';\nimport { Modal, FormControl, Form, FormGroup, ControlLabel, Button } from 'react-bootstrap';\nimport i18n from 'i18next';\n\n/**\n * VISH Uploader Component\n */\nexport default class VishUploaderModal extends Component {\n    /**\n     * Renders React Component\n     * @returns {code}\n     */\n    render() {\n        return (\n            <Modal className=\"pageModal\" backdrop bsSize=\"large\" show={this.props.visible}>\n                <Modal.Header>\n                    <Modal.Title>{i18n.t(\"vish_upload_other\")}</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Form>\n                        <FormGroup>\n                            <ControlLabel>{i18n.t(\"vish_upload_title\")}</ControlLabel>\n                            <FormControl ref=\"title\" type=\"text\"/>\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>{i18n.t(\"vish_upload_desc\")}</ControlLabel>\n                            <FormControl ref=\"desc\" componentClass=\"textarea\" style={{ resize: 'none' }}/>\n                        </FormGroup>\n                        <FormGroup>\n                            <VishDropzone ref=\"dropZone\" />\n                        </FormGroup>\n                        <FormGroup>\n                            <ControlLabel>{this.props.isBusy.value ? this.props.isBusy.msg : \"\"}</ControlLabel>\n                        </FormGroup>\n                    </Form>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button disabled={this.props.isBusy.value} onClick={e => {\n                        this.props.onVishUploaderToggled();\n                    }}>Cancel</Button>\n                    <Button bsStyle=\"primary\"\n                        disabled={this.props.isBusy.value}\n                        onClick={e => {\n                            this.props.onUploadVishResource(\n                                {\n                                    title: ReactDOM.findDOMNode(this.refs.title).value,\n                                    description: ReactDOM.findDOMNode(this.refs.desc).value,\n                                    file: this.refs.dropZone.state.file,\n                                }\n                            );\n                        }}>\n                        {i18n.t(\"vish_upload\")}\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    /**\n     * Before component receives props\n     * Displays busy message\n     * @param nextProps\n     */\n    componentWillReceiveProps(nextProps) {\n        if (!nextProps.isBusy.value && this.props.isBusy.value && this.props.visible) {\n            this.props.onVishUploaderToggled(nextProps.isBusy.msg);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 273,
    "kind": "class",
    "name": "VishUploaderModal",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx~VishUploaderModal",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx",
    "importStyle": "VishUploaderModal",
    "description": "VISH Uploader Component",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx~VishUploaderModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx~VishUploaderModal#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx~VishUploaderModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/vish_provider/vish_uploader_modal/VishUploaderModal.jsx~VishUploaderModal#componentWillReceiveProps",
    "access": "public",
    "description": "Before component receives props\nDisplays busy message",
    "lineNumber": 68,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nextProps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 276,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx",
    "content": "import React, { Component } from 'react';\nimport { Modal, Button, Row } from 'react-bootstrap';\nimport Dali from './../../../core/main';\nimport { UPDATE_NAV_ITEM_EXTRA_FILES } from '../../../common/actions';\n\n/**\n * @deprecated\n */\nexport default class XMLConfigModal extends Component {\n    render() {\n        return (\n            <Modal className=\"pageModal pluginconfig\" backdrop bsSize=\"large\" show={this.props.visible}>\n                <Modal.Header>\n                    <Modal.Title>XML Configuration</Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <Row>\n                        <div ref={\"container\"}>\n                            Import XML\n                        </div>\n                    </Row>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    <Button onClick={e => {\n                        this.props.onXMLEditorToggled();\n                    }}>Cancel</Button>\n                    <Button bsStyle=\"primary\" onClick={e => {\n                        let state = Object.assign({}, this.props.toolbar.state);\n                        let xml = this.generateXMLFromView(state);\n                        $.ajax({\n                            url: state.__xml_path ? state.__xml_path : Dali.Config.xml_path,\n                            type: state.__xml_path ? 'PUT' : 'POST',\n                            data: {\n                                url: window.location.pathname,\n                                xml: new XMLSerializer().serializeToString(xml),\n                            },\n                            success: function(response, status, xhr) {\n                                if(!state.__xml_path) {\n                                    window.history.pushState({}, \"\", response.dali_document_path);\n                                }\n                                state.__xml_path = response.dali_exercise_path;\n                            },\n                            error: function(xhr, status, error) {\n                                // eslint-disable-next-line no-console\n                                console.error(\"Could not save\");\n                            },\n                            complete: function(xhr, status) {\n                                if(status === \"error\") {\n                                    state.__xml_path = Dali.Config.xml_fake_path;\n                                }\n                                Dali.Plugins.get(this.props.toolbar.config.name).forceUpdate(state, this.props.id, UPDATE_NAV_ITEM_EXTRA_FILES);\n                                this.props.onXMLEditorToggled();\n                            }.bind(this),\n                        });\n                    }}>Save changes</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.visible && !prevProps.visible) {\n            this.refs.container.innerHTML = this.generateViewFromXML(this.props.toolbar.state.__xml);\n        }\n    }\n\n    componentDidMount() {\n        if (this.props.toolbar && this.props.toolbar.state.__xml) {\n            this.refs.container.innerHtml = this.generateViewFromXML(this.props.toolbar.state.__xml);\n        }\n    }\n\n    generateViewFromXML(xml) {\n        let i, j, n;\n        // Esto es por si se quiere hacer diccionarios de palabras\n        let scormWords = ['tries', 'notaCorteGlobal', 'scoreBase', 'recordScore'];\n\n        let tipo = '', scorm = '', stuffItems = '', stuffItem = '', moreStuff = '', enunciado = '', preguntas = '', respuestas = '', preguntasArray = [], respuestasArray = [], solArr = [], feedBack = '';\n\n        const colX12 = '<div class=\"col-xs-12\">', colX6 = '<div class=\"col-xs-6\">', colX4 = '<div class=\"col-xs-4\">', colX3 = '<div class=\"col-xs-3\">', close = '</div>', raw = '<div class=\"raw\">';\n        let auxName = '', auxValue = '', auxTemplate = '';\n\n        let x = xml.getElementsByTagName('ITEMS');\n\n        for (i = 0; i < x.length; i++) {\n            for (j = 0; j < x[i].attributes.length; j++) {\n                auxName = x[i].attributes[j].name;\n                auxValue = x[i].attributes[j].value;\n                if (auxName.match('col') || auxName === 'esquinas' || auxName === 'grosLine') {\n                    stuffItems += colX3 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\" type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                } else if (scormWords.indexOf(auxName) >= 0) {\n                    scorm += colX3 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\" type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                } else if (auxName === 'obj') {\n                    tipo += colX6 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\"  type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                } else {\n                    moreStuff += colX3 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\"  type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                }\n            }\n        }\n\n        let y = xml.getElementsByTagName('ITEM');\n\n        for (i = 0; i < y.length; i++) {\n\n            for (let a = 0; a < y[i].attributes.length; a++) {\n                auxName = y[i].attributes[a].name;\n                auxValue = y[i].attributes[a].value;\n                if (auxName === 'tipo') {\n                    tipo += colX6 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\" type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                } else if (auxName === 'enunciado' || auxName === 'instrucciones' || auxName === 'img') {\n                    enunciado += colX12 + '<label  for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\" type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                } else if (auxName === 'anchoDrop' || auxName === 'anchoDrag' || auxName === 'sidesSpace') {\n                    stuffItem += colX3 + '<label  for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\" type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                } else if (auxName === 'sol') {\n                    solArr = auxValue.split(',');\n                    enunciado += colX12 + '<label  for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\"  type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                } else {\n                    moreStuff += colX3 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\"  type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                }\n            }\n\n            let numQuest = 0;\n            let numAns = 0;\n\n            for (n = 0; n < y[i].childNodes.length; n++) {\n                if (y[i].childNodes[n].tagName) {\n                    auxName = y[i].childNodes[n].tagName;\n                    auxValue = y[i].childNodes[n].textContent;\n                    if (auxName === 'DRAG') {\n                        preguntasArray.push(auxValue);\n                        preguntas += colX12 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\" type=\"text\" autofocus id=\"' + auxName + '-' + numQuest + '\" value =\" ' + auxValue + '\">' + '<p>Solución:' + solArr.shift() + '</p>' + close;\n                        numQuest++;\n                    } else if (auxName === 'DROP') {\n                        respuestasArray.push(auxValue);\n                        respuestas += colX12 + '<label for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\"  type=\"text\" autofocus id=\"' + auxName + '-' + numAns + '\" value= \"' + auxValue + '\">' + close;\n                        numAns++;\n                    } else if (auxName.match('FEED') || auxName === 'NOTRIED' || auxName === 'JUSTIFICACION') {\n                        feedBack += colX12 + '<label  for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\"  type=\"text\" autofocus id=\"' + auxName + '\" value= \"' + auxValue + '\">' + close;\n                    } else {\n                        moreStuff += colX3 + '<label  for=\"' + auxName + '\">' + auxName + ':</label> <input class=\"form-control\"  type=\"text\" autofocus id=\"' + auxName + '\" value=\"' + auxValue + '\">' + close;\n                    }\n                }\n            }\n\n        }\n\n        preguntas = '<div id=\"preguntasRespuestas\">' + preguntas;\n        respuestas = respuestas + '</div>';\n        auxTemplate = '<div class=\"form-group\">' + tipo + stuffItems + scorm + enunciado + stuffItem + preguntas + respuestas + feedBack + moreStuff + '</div>';\n\n        return auxTemplate;\n\n    }\n\n    generateXMLFromView(state) {\n        let auxXml = state.__xml;\n        let inputs = this.refs.container.getElementsByTagName('input');\n        let x = auxXml.getElementsByTagName('ITEMS');\n        let y = auxXml.getElementsByTagName('ITEM');\n        let i;\n\n        let auxVisitado = '';\n        let numVisitado = 0;\n        let nameValue = '';\n        let payloadIndex = 0;\n\n        for (i = 0; i < inputs.length; i++) {\n\n            nameValue = inputs[i].id;\n\n            if (auxVisitado === nameValue) {\n                numVisitado++;\n                nameValue = nameValue + '-' + numVisitado;\n            } else {\n                numVisitado = 0;\n            }\n\n            if (x[0].attributes[nameValue]) {\n                auxXml.getElementsByTagName(\"ITEMS\")[0].setAttribute(nameValue, inputs[i].value);\n            } else if (y[0].attributes[nameValue]) {\n                auxXml.getElementsByTagName(\"ITEM\")[0].setAttribute(nameValue, inputs[i].value);\n            } else {\n                auxXml.getElementsByTagName(\"ITEM\")[0].childNodes[payloadIndex].textContent = inputs[i].value;\n                payloadIndex++;\n            }\n\n            auxVisitado = inputs[i].id;\n        }\n\n        return auxXml;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 277,
    "kind": "class",
    "name": "XMLConfigModal",
    "memberof": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx",
    "importStyle": "XMLConfigModal",
    "description": "",
    "lineNumber": 9,
    "deprecated": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal#render",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "generateViewFromXML",
    "memberof": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal#generateViewFromXML",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "xml",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "generateXMLFromView",
    "memberof": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/components/xml_config_modal/XMLConfigModal.jsx~XMLConfigModal#generateXMLFromView",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/containers/DaliApp.jsx",
    "content": "import React, { Component, PropTypes } from 'react';\nimport { connect } from 'react-redux';\nimport { ActionCreators } from 'redux-undo';\nimport { Grid, Col, Row } from 'react-bootstrap';\nimport { addNavItem, selectNavItem, expandNavItem, deleteNavItem, reorderNavItem, toggleNavItem, updateNavItemExtraFiles,\n    changeNavItemName, changeUnitNumber, selectIndex,\n    addBox, selectBox, moveBox, resizeBox, updateBox, duplicateBox, deleteBox, reorderSortableContainer, dropBox, increaseBoxLevel,\n    resizeSortableContainer, deleteSortableContainer, changeCols, changeRows, changeSortableProps, reorderBoxes, verticallyAlignBox,\n    toggleTextEditor, toggleTitleMode,\n    changeDisplayMode, updateToolbar,\n    exportStateAsync, importStateAsync, changeGlobalConfig,\n    fetchVishResourcesSuccess, fetchVishResourcesAsync, uploadVishResourceAsync,\n    deleteContainedView, selectContainedView, changeContainedViewName,\n    addRichMark, editRichMark, deleteRichMark,\n    ADD_BOX, ADD_RICH_MARK, EDIT_RICH_MARK, EDIT_PLUGIN_TEXT, DELETE_CONTAINED_VIEW, DELETE_NAV_ITEM, DELETE_RICH_MARK, UPDATE_BOX, UPDATE_TOOLBAR } from '../../common/actions';\nimport { ID_PREFIX_BOX, ID_PREFIX_SORTABLE_CONTAINER } from '../../common/constants';\nimport DaliCanvas from '../components/canvas/dali_canvas/DaliCanvas';\nimport ContainedCanvas from '../components/rich_plugins/contained_canvas/ContainedCanvas';\nimport DaliCarousel from '../components/carrousel/dali_carrousel/DaliCarousel';\nimport PluginConfigModal from '../components/plugin_config_modal/PluginConfigModal';\nimport XMLConfigModal from '../components/xml_config_modal/XMLConfigModal';\nimport PluginToolbar from '../components/toolbar/plugin_toolbar/PluginToolbar';\nimport Visor from '../../_visor/containers/Visor';\nimport VishCatalogModal from '../components/vish_provider/VishCatalogModal';\nimport PluginRibbon from '../components/nav_bar/plugin_ribbon/PluginRibbon';\nimport DaliNavBar from '../components/nav_bar/dali_nav_bar/DaliNavBar';\nimport ServerFeedback from '../components/server_feedback/ServerFeedback';\nimport RichMarksModal from '../components/rich_plugins/rich_marks_modal/RichMarksModal';\nimport AutoSave from '../components/autosave/AutoSave';\nimport Alert from '../components/common/alert/Alert';\nimport i18n from 'i18next';\nimport Dali from '../../core/main';\nimport { isSortableBox, isSection, isContainedView, isSortableContainer } from '../../common/utils';\nrequire('typeface-ubuntu');\nrequire('typeface-source-sans-pro');\n\n/**\n * DaliApp. Main application component that renders everything else\n */\nclass DaliApp extends Component {\n    /**\n     * Constructor\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        /**\n         * Plugin index. It means that it will start in the first category available (text)\n         * @type {number}\n         */\n        this.index = 0;\n        /**\n         * @TODO Comment\n         * @type {number}\n         */\n        this.severalBoxes = 0;\n        /**\n         * Component's initial state\n         * @type {{alert: null, pluginTab: string, hideTab: string, visorVisible: boolean, xmlEditorVisible: boolean, richMarksVisible: boolean, markCreatorVisible: boolean, containedViewsVisible: boolean, currentRichMark: null, carouselShow: boolean, carouselFull: boolean, serverModal: boolean, catalogModal: boolean, lastAction: string}}\n         */\n        this.state = {\n            alert: null,\n            pluginTab: 'text',\n            hideTab: 'show',\n            visorVisible: false,\n            xmlEditorVisible: false,\n            richMarksVisible: false,\n            markCreatorVisible: false,\n            containedViewsVisible: false,\n            currentRichMark: null,\n            carouselShow: true,\n            carouselFull: false,\n            serverModal: false,\n            catalogModal: false,\n            lastAction: \"\",\n        };\n    }\n\n    /**\n     * Renders React Component\n     * @returns {code}\n     */\n    render() {\n        const { dispatch, boxes, boxesIds, boxSelected, boxLevelSelected, navItemsIds, navItems, navItemSelected,\n            containedViews, containedViewSelected, imagesUploaded, indexSelected,\n            undoDisabled, redoDisabled, displayMode, isBusy, toolbars, globalConfig, fetchVishResults } = this.props;\n        let ribbonHeight = this.state.hideTab === 'hide' ? 0 : 47;\n        let title = globalConfig.title || '---';\n        let canvasRatio = globalConfig.canvasRatio;\n        return (\n            /* jshint ignore:start */\n            <Grid id=\"app\" fluid style={{ height: '100%' }}>\n                <Row className=\"navBar\">\n                    {this.state.alert}\n                    <DaliNavBar hideTab={this.state.hideTab}\n                        globalConfig={globalConfig}\n                        changeGlobalConfig={(prop, value) => {this.dispatchAndSetState(changeGlobalConfig(prop, value));}}\n                        undoDisabled={undoDisabled}\n                        redoDisabled={redoDisabled}\n                        navItemsIds={navItemsIds}\n                        navItems={navItems}\n                        onTitleChanged={(id, titleStr) => {this.dispatchAndSetState(changeGlobalConfig('title', titleStr));}}\n                        containedViewSelected={containedViewSelected}\n                        navItemSelected={navItemSelected}\n                        boxSelected={boxSelected}\n                        onTextEditorToggled={(caller, value) => this.dispatchAndSetState(toggleTextEditor(caller, value))}\n                        undo={() => {this.dispatchAndSetState(ActionCreators.undo());}}\n                        redo={() => {this.dispatchAndSetState(ActionCreators.redo());}}\n                        visor={() =>{this.setState({ visorVisible: true });}}\n                        export={() => {Dali.Visor.exports(this.props.store.getState().present);}}\n                        scorm={() => {Dali.Visor.exportScorm(this.props.store.getState().present);}}\n                        save={() => {this.dispatchAndSetState(exportStateAsync({ present: this.props.store.getState().present }));}}\n                        category={this.state.pluginTab}\n                        opens={() => {this.dispatchAndSetState(importStateAsync());}}\n                        serverModalOpen={()=>{this.setState({ serverModal: true });}}\n                        onVishCatalogToggled={() => this.setState({ catalogModal: true })}\n                        setcat={(category) => {this.setState({ pluginTab: category, hideTab: 'show' });}}/>\n                    <AutoSave save={() => {this.dispatchAndSetState(exportStateAsync({ present: this.props.store.getState().present }));}}\n                        serverModalOpen={()=>{this.setState({ serverModal: true });}}\n                        isBusy={isBusy}\n                        visorVisible={this.state.visorVisible}/>\n                </Row>\n                <Row style={{ height: 'calc(100% - 60px)' }} id=\"mainRow\">\n                    <DaliCarousel boxes={boxes}\n                        title={title}\n                        containedViews={containedViews}\n                        containedViewSelected={containedViewSelected}\n                        indexSelected={indexSelected}\n                        navItemsIds={navItemsIds}\n                        navItems={navItems}\n                        navItemSelected={navItemSelected}\n                        displayMode={displayMode}\n                        onBoxAdded={(ids, draggable, resizable, content, toolbar, config, state) => this.dispatchAndSetState(addBox(ids, draggable, resizable, content, toolbar, config, state))}\n                        onIndexSelected={(id) => this.dispatchAndSetState(selectIndex(id))}\n                        onContainedViewNameChanged={(id, titleStr) => this.dispatchAndSetState(changeContainedViewName(id, titleStr))}\n                        onContainedViewSelected={ (id) => this.dispatchAndSetState(selectContainedView(id)) }\n                        onContainedViewDeleted={(cvid)=>{\n                            let boxesRemoving = [];\n                            containedViews[cvid].boxes.map(boxId => {\n                                boxesRemoving.push(boxId);\n                                boxesRemoving = boxesRemoving.concat(this.getDescendantBoxes(boxes[boxId]));\n                            });\n\n                            this.dispatchAndSetState(deleteContainedView([cvid], boxesRemoving, containedViews[cvid].parent));\n\n                            Object.keys(containedViews[cvid].parent).forEach((el)=>{\n                                if (toolbars[el] && toolbars[el].state && toolbars[el].state.__marks) {\n                                    Dali.Plugins.get(toolbars[el].config.name).forceUpdate(\n                                        toolbars[el].state,\n                                        el,\n                                        DELETE_CONTAINED_VIEW\n                                    );\n                                }\n                            });\n                        }}\n                        onNavItemNameChanged={(id, titleStr) => this.dispatchAndSetState(changeNavItemName(id, titleStr))}\n                        onNavItemAdded={(id, name, parent, type, position) => this.dispatchAndSetState(addNavItem(id, name, parent, type, position, (type !== 'section' || (type === 'section' && Dali.Config.sections_have_content))))}\n                        onNavItemSelected={id => this.dispatchAndSetState(selectNavItem(id))}\n                        onNavItemExpanded={(id, value) => this.dispatchAndSetState(expandNavItem(id, value))}\n                        onNavItemDeleted={(navsel) => {\n                            let viewRemoving = [navsel].concat(this.getDescendantViews(navItems[navsel]));\n                            let boxesRemoving = [];\n                            let containedRemoving = {};\n                            viewRemoving.map(id => {\n                                navItems[id].boxes.map(boxId => {\n                                    boxesRemoving.push(boxId);\n                                    boxesRemoving = boxesRemoving.concat(this.getDescendantBoxes(boxes[boxId]));\n                                    // containedRemoving = containedRemoving.concat(this.getDescendantContainedViews(boxes[boxId]));\n\n                                });\n\n                            });\n                            let marksRemoving = this.getDescendantLinkedBoxes(viewRemoving, navItems) || [];\n                            this.dispatchAndSetState(deleteNavItem(viewRemoving, navItems[navsel].parent, boxesRemoving, containedRemoving, marksRemoving));\n\n                            Object.keys(marksRemoving).forEach((el) => {\n                                if(toolbars[el]) {\n                                    if (toolbars[el].state && toolbars[el].state.__marks) {\n                                        Dali.Plugins.get(toolbars[el].config.name).forceUpdate(\n                                            toolbars[el].state,\n                                            el,\n                                            DELETE_NAV_ITEM\n                                        );\n                                    }\n\n                                }\n                            });\n                        }}\n                        onNavItemReordered={(id, newParent, oldParent, idsInOrder, childrenInOrder) => this.dispatchAndSetState(reorderNavItem(id, newParent, oldParent, idsInOrder, childrenInOrder))}\n                        onNavItemToggled={ id => this.dispatchAndSetState(toggleNavItem(id)) }\n                        onDisplayModeChanged={mode => this.dispatchAndSetState(changeDisplayMode(mode))}\n                        containedViewsVisible={this.state.containedViewsVisible}\n                        onContainedViewsExpand={()=>{\n                            this.setState({ containedViewsVisible: !this.state.containedViewsVisible });\n                        }}\n                        carouselShow={this.state.carouselShow}\n                        carouselFull={this.state.carouselFull}\n                        onToggleFull={() => {\n                            if(this.state.carouselFull) {\n                                this.setState({ carouselFull: false });\n                            }else{\n                                this.setState({ carouselFull: true, carouselShow: true });\n                            }\n                        }}\n                        onToggleWidth={()=>{\n                            if(this.state.carouselShow) {\n                                this.setState({ carouselFull: false, carouselShow: false });\n                            }else{\n                                this.setState({ carouselShow: true });\n                            }\n                        }}/>\n\n                    <Col id=\"colRight\" xs={12}\n                        style={{ height: (this.state.carouselFull ? 0 : '100%'),\n                            width: (this.state.carouselShow ? 'calc(100% - 212px)' : 'calc(100% - 80px)') }}>\n                        <Row id=\"ribbonRow\">\n                            <PluginRibbon disabled={navItemSelected === 0 || (!Dali.Config.sections_have_content && navItemSelected && isSection(navItemSelected)) || this.hasExerciseBox(navItemSelected, navItems, this.state, boxes)} // ADD condition navItemSelected There are extrafiles\n                                boxSelected={boxes[boxSelected]}\n                                undoDisabled={undoDisabled}\n                                redoDisabled={redoDisabled}\n                                navItemSelected={navItems[navItemSelected]}\n                                containedViewSelected={containedViewSelected}\n                                category={this.state.pluginTab}\n                                hideTab={this.state.hideTab}\n                                undo={() => {this.dispatchAndSetState(ActionCreators.undo());}}\n                                redo={() => {this.dispatchAndSetState(ActionCreators.redo());}}\n                                ribbonHeight={ribbonHeight + 'px'}\n                                onBoxDuplicated={(id, parent, container)=> this.dispatchAndSetState(duplicateBox(id, parent, container, this.getDescendantBoxes(boxes[id]), this.getDuplicatedBoxesIds(this.getDescendantBoxes(boxes[id])), Date.now() - 1))}/>\n                        </Row>\n                        <Row id=\"canvasRow\" style={{ height: 'calc(100% - ' + ribbonHeight + 'px)' }}>\n                            <DaliCanvas boxes={boxes}\n                                canvasRatio={canvasRatio}\n                                boxSelected={boxSelected}\n                                boxLevelSelected={boxLevelSelected}\n                                navItems={navItems}\n                                navItemSelected={navItems[navItemSelected]}\n                                containedViews={containedViews}\n                                containedViewSelected={containedViews[containedViewSelected] || 0}\n                                showCanvas={(navItemSelected !== 0)}\n                                toolbars={toolbars}\n                                title={title}\n                                markCreatorId={this.state.markCreatorVisible}\n                                onBoxAdded={(ids, draggable, resizable, content, toolbar, config, state) => this.dispatchAndSetState(addBox(ids, draggable, resizable, content, toolbar, config, state))}\n                                addMarkShortcut= {(mark) => {\n                                    let toolbar = toolbars[boxSelected];\n                                    let state = JSON.parse(JSON.stringify(toolbar.state));\n                                    state.__marks[mark.id] = JSON.parse(JSON.stringify(mark));\n                                    if(mark.connection.id) {\n                                        state.__marks[mark.id].connection = mark.connection.id;\n                                    }\n                                    // this.dispatchAndSetState(addRichMark(boxSelected, mark, state));\n\n                                    Dali.Plugins.get(toolbar.config.name).forceUpdate(\n                                        state,\n                                        boxSelected,\n                                        addRichMark(boxSelected, mark, state)\n                                    );\n                                }}\n                                deleteMarkCreator={()=>this.setState({ markCreatorVisible: false })}\n                                lastActionDispatched={this.state.lastAction}\n                                onBoxSelected={(id) => this.dispatchAndSetState(selectBox(id))}\n                                onBoxLevelIncreased={() => this.dispatchAndSetState(increaseBoxLevel())}\n                                onBoxMoved={(id, x, y, position, parent, container) => this.dispatchAndSetState(moveBox(id, x, y, position, parent, container))}\n                                onBoxResized={(id, widthButton, heightButton) => this.dispatchAndSetState(resizeBox(id, widthButton, heightButton))}\n                                onSortableContainerResized={(id, parent, height) => this.dispatchAndSetState(resizeSortableContainer(id, parent, height))}\n                                onSortableContainerDeleted={(id, parent) => this.dispatchAndSetState(deleteSortableContainer(id, parent, this.getDescendantBoxesFromContainer(boxes[parent], id)/* , this.getDescendantContainedViewsFromContainer(boxes[parent], id)*/))}\n                                onSortableContainerReordered={(ids, parent) => this.dispatchAndSetState(reorderSortableContainer(ids, parent))}\n                                onBoxDropped={(id, row, col) => this.dispatchAndSetState(dropBox(id, row, col))}\n                                onBoxDeleted={(id, parent, container)=> this.dispatchAndSetState(deleteBox(id, parent, container, this.getDescendantBoxes(boxes[id])/* , this.getDescendantContainedViews(boxes[id])*/))}\n                                onContainedViewSelected={id => this.dispatchAndSetState(selectContainedView(id))}\n                                onVerticallyAlignBox={(id, verticalAlign)=>this.dispatchAndSetState(verticallyAlignBox(id, verticalAlign))}\n                                onUnitNumberChanged={(id, value) => this.dispatchAndSetState(changeUnitNumber(id, value))}\n                                onTextEditorToggled={(caller, value) => this.dispatchAndSetState(toggleTextEditor(caller, value))}\n                                onBoxesInsideSortableReorder={(parent, container, order) => {this.dispatchAndSetState(reorderBoxes(parent, container, order));}}\n                                titleModeToggled={(id, value) => this.dispatchAndSetState(toggleTitleMode(id, value))}\n                                onMarkCreatorToggled={(id) => this.setState({ markCreatorVisible: id })}/>\n                            <ContainedCanvas boxes={boxes}\n                                boxSelected={boxSelected}\n                                canvasRatio={canvasRatio}\n                                boxLevelSelected={boxLevelSelected}\n                                navItems={navItems}\n                                navItemSelected={navItems[navItemSelected]}\n                                containedViews={containedViews}\n                                containedViewSelected={containedViews[containedViewSelected] || 0}\n                                markCreatorId={this.state.markCreatorVisible}\n                                addMarkShortcut= {(mark) => {\n                                    let toolbar = toolbars[boxSelected];\n                                    let state = JSON.parse(JSON.stringify(toolbar.state));\n                                    state.__marks[mark.id] = JSON.parse(JSON.stringify(mark));\n                                    if(mark.connection.id) {\n                                        state.__marks[mark.id].connection = mark.connection.id;\n                                    }\n                                    Dali.Plugins.get(toolbar.config.name).forceUpdate(\n                                        state,\n                                        boxSelected,\n                                        addRichMark(boxSelected, mark, state)\n                                    );\n                                }}\n                                onBoxAdded={(ids, draggable, resizable, content, toolbar, config, state) => this.dispatchAndSetState(addBox(ids, draggable, resizable, content, toolbar, config, state))}\n                                deleteMarkCreator={()=>this.setState({ markCreatorVisible: false })}\n                                title={title}\n                                toolbars={toolbars}\n                                titleModeToggled={(id, value) => this.dispatchAndSetState(toggleTitleMode(id, value))}\n                                lastActionDispatched={this.state.lastAction}\n                                onContainedViewSelected={id => this.dispatchAndSetState(selectContainedView(id))}\n                                onBoxSelected={(id) => this.dispatchAndSetState(selectBox(id))}\n                                onBoxLevelIncreased={() => this.dispatchAndSetState(increaseBoxLevel())}\n                                onBoxMoved={(id, x, y, position, parent, container) => this.dispatchAndSetState(moveBox(id, x, y, position, parent, container))}\n                                onBoxResized={(id, widthButton, heightButton) => this.dispatchAndSetState(resizeBox(id, widthButton, heightButton))}\n                                onSortableContainerResized={(id, parent, height) => this.dispatchAndSetState(resizeSortableContainer(id, parent, height))}\n                                onSortableContainerDeleted={(id, parent) => this.dispatchAndSetState(deleteSortableContainer(id, parent, this.getDescendantBoxesFromContainer(boxes[parent], id)/* , this.getDescendantContainedViewsFromContainer(boxes[parent], id)*/))}\n                                onSortableContainerReordered={(ids, parent) => this.dispatchAndSetState(reorderSortableContainer(ids, parent))}\n                                onBoxDropped={(id, row, col) => this.dispatchAndSetState(dropBox(id, row, col))}\n                                onBoxDeleted={(id, parent, container)=> this.dispatchAndSetState(deleteBox(id, parent, container, this.getDescendantBoxes(boxes[id])/* , this.getDescendantContainedViews(boxes[id])*/))}\n                                onMarkCreatorToggled={(id) => this.setState({ markCreatorVisible: id })}\n                                onVerticallyAlignBox={(id, verticalAlign)=>this.dispatchAndSetState(verticallyAlignBox(id, verticalAlign))}\n                                onTextEditorToggled={(caller, value) => this.dispatchAndSetState(toggleTextEditor(caller, value))}\n                                onBoxesInsideSortableReorder={(parent, container, order) => {this.dispatchAndSetState(reorderBoxes(parent, container, order));}}\n                                showCanvas={(containedViewSelected !== 0)}/>\n                        </Row>\n                    </Col>\n                </Row>\n                <ServerFeedback show={this.state.serverModal}\n                    title={\"Guardar cambios\"}\n                    isBusy={isBusy}\n                    hideModal={() => this.setState({ serverModal: false })}/>\n                <Visor id=\"visor\"\n                    title={title}\n                    visorVisible={this.state.visorVisible}\n                    onVisibilityToggled={()=> this.setState({ visorVisible: !this.state.visorVisible })}\n                    state={this.props.store.getState().present}/>\n                <PluginConfigModal />\n\n                <XMLConfigModal id={boxSelected}\n                    toolbar={toolbars[boxSelected]}\n                    visible={this.state.xmlEditorVisible}\n                    onXMLEditorToggled={() => this.setState({ xmlEditorVisible: !this.state.xmlEditorVisible })}/>\n                <VishCatalogModal images={imagesUploaded}\n                    visible={this.state.catalogModal}\n                    onVishCatalogToggled={() => this.setState({ catalogModal: !this.state.catalogModal })}/>\n                <RichMarksModal boxSelected={boxSelected}\n                    pluginToolbar={toolbars[boxSelected]}\n                    navItemSelected={navItemSelected}\n                    toolbars={toolbars}\n                    containedViewSelected={containedViewSelected}\n                    containedViews={containedViews}\n                    navItems={navItems}\n                    navItemsIds={navItemsIds}\n                    visible={this.state.richMarksVisible}\n                    currentRichMark={this.state.currentRichMark}\n                    defaultValueMark={toolbars[boxSelected] && toolbars[boxSelected].config && Dali.Plugins.get(toolbars[boxSelected].config.name) ? Dali.Plugins.get(toolbars[boxSelected].config.name).getConfig().defaultMarkValue : 0}\n                    validateValueInput={toolbars[boxSelected] && toolbars[boxSelected].config && Dali.Plugins.get(toolbars[boxSelected].config.name) ? Dali.Plugins.get(toolbars[boxSelected].config.name).validateValueInput : null}\n                    onBoxAdded={(ids, draggable, resizable, content, toolbar, config, state) => this.dispatchAndSetState(addBox(ids, draggable, resizable, content, toolbar, config, state))}\n                    onRichMarkUpdated={(mark, createNew) => {\n                        let toolbar = toolbars[boxSelected];\n                        let state = JSON.parse(JSON.stringify(toolbar.state));\n                        let oldConnection = state.__marks[mark.id] ? state.__marks[mark.id].connection : 0;\n                        state.__marks[mark.id] = JSON.parse(JSON.stringify(mark));\n                        let newConnection = mark.connection;\n                        if(mark.connection.id) {\n                            newConnection = mark.connection.id;\n                            state.__marks[mark.id].connection = mark.connection.id;\n                        }\n                        this.dispatchAndSetState(editRichMark(boxSelected, state, mark.id, oldConnection, newConnection));\n                        Dali.Plugins.get(toolbar.config.name).forceUpdate(\n                            state,\n                            boxSelected,\n                            this.state.currentRichMark && !createNew ? UPDATE_TOOLBAR : addRichMark(boxSelected, mark, state)\n                        );\n                    }}\n                    onRichMarksModalToggled={() => {\n                        this.setState({ richMarksVisible: !this.state.richMarksVisible });\n                        if(this.state.richMarksVisible) {\n                            this.setState({ currentRichMark: null });\n                        }\n                    }}/>\n                <PluginToolbar top={(60 + ribbonHeight) + 'px'}\n                    toolbars={toolbars}\n                    box={boxes[boxSelected]}\n                    boxSelected={boxSelected}\n                    containedViews={containedViews}\n                    navItemSelected={containedViewSelected !== 0 ? containedViewSelected : navItemSelected}\n                    navItems={containedViewSelected !== 0 ? containedViews : navItems}\n                    carouselShow={this.state.carouselShow}\n                    isBusy={isBusy}\n                    fetchResults={fetchVishResults}\n                    titleModeToggled={(id, value) => this.dispatchAndSetState(toggleTitleMode(id, value))}\n                    onContainedViewNameChanged={(id, titleStr) => this.dispatchAndSetState(changeContainedViewName(id, titleStr))}\n                    onNavItemToggled={ id => this.dispatchAndSetState(toggleNavItem(navItemSelected)) }\n                    onNavItemSelected={id => this.dispatchAndSetState(selectNavItem(id))}\n                    onNavItemNameChanged={(id, titleStr) => this.dispatchAndSetState(changeNavItemName(id, titleStr))}\n                    onContainedViewSelected={id => this.dispatchAndSetState(selectContainedView(id))}\n                    onColsChanged={(id, parent, distribution, boxesAffected) => this.dispatchAndSetState(changeCols(id, parent, distribution, boxesAffected))}\n                    onRowsChanged={(id, parent, column, distribution, boxesAffected) => this.dispatchAndSetState(changeRows(id, parent, column, distribution, boxesAffected))}\n                    onBoxResized={(id, widthButton, heightButton) => this.dispatchAndSetState(resizeBox(id, widthButton, heightButton))}\n                    onBoxMoved={(id, x, y, position, parent, container) => this.dispatchAndSetState(moveBox(id, x, y, position, parent, container))}\n                    onVerticallyAlignBox={(id, verticalAlign) => this.dispatchAndSetState(verticallyAlignBox(id, verticalAlign))}\n                    onTextEditorToggled={(caller, value) => this.dispatchAndSetState(toggleTextEditor(caller, value))}\n                    onSortableContainerResized={(id, parent, height) => this.dispatchAndSetState(resizeSortableContainer(id, parent, height))}\n                    onSortableContainerDeleted={(id, parent) => this.dispatchAndSetState(deleteSortableContainer(id, parent, this.getDescendantBoxesFromContainer(boxes[parent], id)/* , this.getDescendantContainedViewsFromContainer(boxes[parent], id)*/))}\n                    onSortablePropsChanged={(id, parent, prop, value) => this.dispatchAndSetState(changeSortableProps(id, parent, prop, value))}\n                    onToolbarUpdated={(id, tab, accordion, name, value) => this.dispatchAndSetState(updateToolbar(id, tab, accordion, name, value))}\n                    onBoxDuplicated={(id, parent, container)=> this.dispatchAndSetState(duplicateBox(id, parent, container, this.getDescendantBoxes(boxes[id]), this.getDuplicatedBoxesIds(this.getDescendantBoxes(boxes[id])), Date.now() - 1))}\n                    onBoxDeleted={(id, parent, container)=> this.dispatchAndSetState(deleteBox(id, parent, container, this.getDescendantBoxes(boxes[id])/* , this.getDescendantContainedViews(boxes[id])*/))}\n                    onXMLEditorToggled={() => this.setState({ xmlEditorVisible: !this.state.xmlEditorVisible })}\n                    onRichMarksModalToggled={() => {\n                        this.setState({ richMarksVisible: !this.state.richMarksVisible });\n                        if(this.state.richMarksVisible) {\n                            this.setState({ currentRichMark: null });\n                        }\n                    }}\n                    onRichMarkEditPressed={(mark) => {\n                        this.setState({ currentRichMark: mark });\n                    }}\n                    onRichMarkDeleted={id => {\n                        let toolbar = toolbars[boxSelected];\n                        let state = JSON.parse(JSON.stringify(toolbar.state));\n                        let cvid = state.__marks[id].connection;\n\n                        delete state.__marks[id];\n                        this.dispatchAndSetState(deleteRichMark(id, boxSelected, cvid, state));\n                        Dali.Plugins.get(toolbar.config.name).forceUpdate(\n                            state,\n                            boxSelected,\n                            DELETE_RICH_MARK);\n\n                        // This checks if the deleted mark leaves an orphan contained view, and displays a message asking if the user would like to delete it as well\n                        if (isContainedView(cvid)) {\n                            let thiscv = containedViews[cvid];\n                            if(thiscv && Object.keys(thiscv.parent).indexOf(boxSelected) !== -1) {\n                                let remainingMarks = [];\n                                for (let linkedbox in thiscv.parent) {\n                                    if (toolbars[linkedbox] && toolbars[linkedbox].state && toolbars[linkedbox].state.__marks) {\n                                        for (let i in toolbars[linkedbox].state.__marks) {\n                                            let mark = toolbars[linkedbox].state.__marks[i];\n                                            if (mark.connection === cvid) {\n                                                remainingMarks.push(cvid);\n                                            }\n                                        }\n                                    }\n                                }\n\n                                if (remainingMarks.length === 1) {\n                                    let confirmText = i18n.t(\"messages.confirm_delete_CV_also_1\") + containedViews[cvid].name + i18n.t(\"messages.confirm_delete_CV_also_2\");\n                                    let alertComponent = (<Alert className=\"pageModal\"\n                                        show\n                                        hasHeader\n                                        title={<span><i style={{ fontSize: '14px', marginRight: '5px' }} className=\"material-icons\">delete</i>{i18n.t(\"messages.confirm_delete_cv\")}</span>}\n                                        acceptButtonText={i18n.t(\"messages.confirm_delete_cv_as_well\")}\n                                        cancelButton\n                                        cancelButtonText={i18n.t(\"messages.confirm_delete_cv_not\")}\n                                        closeButton onClose={(bool)=>{\n                                            if (bool) {\n                                                let boxesRemoving = [];\n                                                containedViews[cvid].boxes.map(boxId => {\n                                                    boxesRemoving.push(boxId);\n                                                    boxesRemoving = boxesRemoving.concat(this.getDescendantBoxes(boxes[boxId]));\n                                                });\n\n                                                this.dispatchAndSetState(deleteContainedView([cvid], boxesRemoving, thiscv.parent));\n                                            }\n                                            this.setState({ alert: null });}}>\n                                        <span> {confirmText} </span>\n                                    </Alert>);\n                                    this.setState({ alert: alertComponent });\n                                }\n                            }\n                        }\n\n                    }}\n                    onUploadVishResource={(query) => this.dispatchAndSetState(uploadVishResourceAsync(query))}\n                    onFetchVishResources={(query) => this.dispatchAndSetState(fetchVishResourcesAsync(query))}\n                />\n\n            </Grid>\n            /* jshint ignore:end */\n        );\n    }\n\n    /**\n     * Dispatches Redux action and records it in React state as well\n     * @param actionCreator\n     */\n    dispatchAndSetState(actionCreator) {\n        let lastAction = this.props.dispatch(actionCreator);\n        this.setState({ lastAction: lastAction });\n    }\n\n    /**\n     * After component mounts\n     * Loads plugin API and sets listeners for plugin events, marks and keyboard keys pressed\n     */\n    componentDidMount() {\n        Dali.Plugins.loadAll();\n        Dali.API_Private.listenEmission(Dali.API_Private.events.render, e => {\n            this.index = 0;\n            let newPluginState = {};\n            let navItemSelected = this.props.navItems[this.props.navItemSelected];\n\n            if (e.detail.config.flavor !== \"react\") {\n                this.parsePluginContainers(e.detail.content, newPluginState);\n                e.detail.state.__pluginContainerIds = newPluginState;\n            }\n\n            let reason = e.detail.reason;\n            if (reason.type) {\n                reason = reason.type;\n            }\n\n            switch (reason) {\n            case ADD_RICH_MARK:\n                this.dispatchAndSetState(e.detail.reason); // The action was created previously //TODO: here is the problem we need to trigger update box as well\n                this.dispatchAndSetState(updateBox(\n                    e.detail.ids.id,\n                    e.detail.content,\n                    e.detail.toolbar,\n                    e.detail.state\n                ));\n                break;\n            case EDIT_RICH_MARK:\n                // this.dispatchAndSetState(editRichMark(e.detail.ids.id, e.detail.state));\n                this.dispatchAndSetState(updateBox(\n                    e.detail.ids.id,\n                    e.detail.content,\n                    e.detail.toolbar,\n                    e.detail.state\n                ));\n                break;\n            case ADD_BOX:\n                if(this.severalBoxes === 0) {\n                    this.severalBoxes = Date.now() + this.index++;\n                }\n                e.detail.ids.id = (this.severalBoxes !== 0) ? ID_PREFIX_BOX + this.severalBoxes++ : ID_PREFIX_BOX + Date.now() + this.index++;\n                this.dispatchAndSetState(addBox(\n                    {\n                        parent: e.detail.ids.parent,\n                        id: e.detail.ids.id,\n                        container: e.detail.ids.container,\n                    },\n                    true,\n                    !isSortableContainer(e.detail.ids.container),\n                    e.detail.content,\n                    e.detail.toolbar,\n                    e.detail.config,\n                    e.detail.state,\n                    e.detail.initialParams\n                ));\n                break;\n            case DELETE_RICH_MARK:\n            case DELETE_NAV_ITEM:\n            case DELETE_CONTAINED_VIEW:\n            case EDIT_PLUGIN_TEXT:\n            case UPDATE_BOX:\n            case UPDATE_TOOLBAR:\n                this.dispatchAndSetState(updateBox(\n                    e.detail.ids.id || this.props.boxSelected,\n                    e.detail.content,\n                    e.detail.toolbar,\n                    e.detail.state\n                ));\n                break;\n            default:\n                // eslint-disable-next-line no-console\n                console.error(\"I don't know how to manage this\");\n            }\n\n            if (e.detail.config.flavor !== \"react\") {\n                this.addDefaultContainerPlugins(e.detail, e.detail.content);\n            }\n            if (e.detail.state.__xml_path) {\n                if (!navItemSelected.extraFiles[e.detail.ids.id] || navItemSelected.extraFiles[e.detail.ids.id] !== e.detail.state.__xml_path) {\n                    this.dispatchAndSetState(updateNavItemExtraFiles(this.props.navItemSelected, e.detail.ids.id, e.detail.state.__xml_path));\n                }\n            }\n        });\n        Dali.API_Private.listenEmission(Dali.API_Private.events.getPluginsInView, e => {\n            let plugins = {};\n            let ids = [];\n            let view = e.detail.view ? e.detail.view : this.props.navItemSelected;\n\n            this.props.navItems[view].boxes.map(id => {\n                ids.push(id);\n                ids = ids.concat(this.getDescendantBoxes(this.props.boxes[id]));\n            });\n\n            ids.map(id => {\n                let toolbar = this.props.toolbars[id];\n                if (e.detail.getAliasedPlugins) {\n                    if (!isSortableBox(id)) {\n                        let button = toolbar.controls.main.accordions.z__extra.buttons.alias;\n                        if (button.value.length !== 0) {\n                            if (!plugins[toolbar.config.name]) {\n                                plugins[toolbar.config.name] = [];\n                            }\n                            plugins[toolbar.config.name].push(button.value);\n                        }\n                    }\n                } else if (plugins[toolbar.config.name]) {\n                    plugins[toolbar.config.name] = true;\n                }\n            });\n\n            Dali.API_Private.answer(Dali.API_Private.events.getPluginsInView, plugins);\n        });\n\n        Dali.API_Private.listenEmission(Dali.API_Private.events.editRichMark, e =>{\n            let toolbar = this.props.toolbars[this.props.boxSelected];\n            let state = JSON.parse(JSON.stringify(toolbar.state));\n            state.__marks[e.detail.id].value = e.detail.value;\n\n            this.dispatchAndSetState(editRichMark(e.detail.id, e.detail.value));\n\n        });\n\n        window.onkeyup = function(e) {\n            let key = e.keyCode ? e.keyCode : e.which;\n            // Ctrl + Z\n            if (key === 90 && e.ctrlKey) {\n                this.dispatchAndSetState(ActionCreators.undo());\n            }\n            // Ctrl + Y\n            if (key === 89 && e.ctrlKey) {\n                this.dispatchAndSetState(ActionCreators.redo());\n            }\n\n            // Supr\n            else if (key === 46) {\n                // Checks what element has the cursor focus currently\n                let focus = document.activeElement.className;\n                if (this.props.boxSelected !== -1 && !isSortableBox(this.props.boxSelected)) {\n                    // If it is not an input or any other kind of text edition AND there is a box selected, it deletes said box\n                    if (focus.indexOf('form-control') === -1 && focus.indexOf('tituloCurso') === -1 && focus.indexOf('cke_editable') === -1) {\n                        let box = this.props.boxes[this.props.boxSelected];\n                        let toolbar = this.props.toolbars[this.props.boxSelected];\n                        if (!toolbar.showTextEditor) {\n                            this.dispatchAndSetState(deleteBox(box.id, box.parent, box.container, this.getDescendantBoxes(box)/* , this.getDescendantContainedViews(box)*/));\n                        }\n                    }\n                }\n            }\n        }.bind(this);\n    }\n\n    /**\n     * Views that hang from the given view\n     * @param view\n     * @returns {Array}\n     */\n    getDescendantViews(view) {\n        let selected = [];\n\n        for (let i = 0; i < view.children.length; i++) {\n            let vw = view.children[i];\n            selected.push(vw);\n            selected = selected.concat(this.getDescendantViews(this.props.navItems[vw]));\n        }\n\n        return selected;\n    }\n\n    /**\n     * Children boxes of a given box\n     * @param box\n     * @returns {Array}\n     */\n    getDescendantBoxes(box) {\n        let selected = [];\n\n        for (let i = 0; i < box.children.length; i++) {\n            for (let j = 0; j < box.sortableContainers[box.children[i]].children.length; j++) {\n                let bx = box.sortableContainers[box.children[i]].children[j];\n                selected.push(bx);\n                selected = selected.concat(this.getDescendantBoxes(this.props.boxes[bx]));\n            }\n        }\n        /* for (let i = 0; i < box.containedViews.length; i++) {\n            let cv = box.containedViews[i];\n            for (let j = 0; j < this.props.containedViews[cv].boxes.length; j++) {\n                let bx = this.props.containedViews[cv].boxes[j];\n                selected.push(bx);\n                selected = selected.concat(this.getDescendantBoxes(this.props.boxes[bx]));\n            }\n        }*/\n        return selected;\n    }\n\n    /**\n     * Children boxes of a given container\n     * @param box\n     * @param container\n     * @returns {Array}\n     */\n    getDescendantBoxesFromContainer(box, container) {\n        let selected = [];\n\n        for (let j = 0; j < box.sortableContainers[container].children.length; j++) {\n            let bx = box.sortableContainers[container].children[j];\n            selected.push(bx);\n            selected = selected.concat(this.getDescendantBoxes(this.props.boxes[bx]));\n        }\n\n        for (let i = 0; i < box.containedViews.length; i++) {\n            let cv = box.containedViews[i];\n            for (let j = 0; j < this.props.containedViews[cv].boxes.length; j++) {\n                let bx = this.props.containedViews[cv].boxes[j];\n                selected.push(bx);\n                selected = selected.concat(this.getDescendantBoxes(this.props.boxes[bx]));\n            }\n        }\n        return selected;\n    }\n\n    /**\n     * Get descendant contained views from a given box\n     * @param box\n     * @returns {Array}\n     */\n    getDescendantContainedViews(box) {\n        let selected = [];\n\n        for (let i = 0; i < box.children.length; i++) {\n            for (let j = 0; j < box.sortableContainers[box.children[i]].children.length; j++) {\n                let bx = box.sortableContainers[box.children[i]].children[j];\n                selected = selected.concat(this.getDescendantContainedViews(this.props.boxes[bx]));\n            }\n        }\n        for (let i = 0; i < box.containedViews.length; i++) {\n            let cv = box.containedViews[i];\n            selected.push(cv);\n            for (let j = 0; j < this.props.containedViews[cv].boxes.length; j++) {\n                selected = selected.concat(this.getDescendantContainedViews(this.props.boxes[this.props.containedViews[cv].boxes[j]]));\n            }\n        }\n\n        return selected;\n    }\n\n    /**\n     * Boxes that link to the given views\n     * @param ids Views ids\n     * @param navs navItemsById\n     * @returns {{}}\n     */\n    getDescendantLinkedBoxes(ids, navs) {\n        let boxes = {};\n\n        ids.forEach((nav) => {\n            for (let lb in navs[nav].linkedBoxes) {\n                boxes[lb] = [(boxes[lb] || []), ...navs[nav].linkedBoxes[lb]];\n            }\n            // boxes = [...new Set([...boxes, ...navs[nav].linkedBoxes])];\n            // boxes.concat(navs[nav].linkedBoxes);\n        });\n        return boxes;\n    }\n\n    /**\n     * Container's linked contained views\n     * @param box DaliBoxSortable\n     * @param container SortableContainer\n     * @returns {Array}\n     */\n    getDescendantContainedViewsFromContainer(box, container) {\n        let selected = [];\n\n        for (let j = 0; j < box.sortableContainers[container].children.length; j++) {\n            let bx = box.sortableContainers[container].children[j];\n            selected = selected.concat(this.getDescendantContainedViews(this.props.boxes[bx]));\n        }\n        for (let i = 0; i < box.containedViews.length; i++) {\n            let cv = box.containedViews[i];\n            selected.push(cv);\n            for (let j = 0; j < this.props.containedViews[cv].boxes.length; j++) {\n                selected = selected.concat(this.getDescendantContainedViews(this.props.boxes[this.props.containedViews[cv].boxes[j]]));\n            }\n        }\n\n        return selected;\n    }\n\n    /**\n     * Get descendants of duplicated boxes\n     * @param descendants\n     * @returns {{}}\n     */\n    getDuplicatedBoxesIds(descendants) {\n        let newIds = {};\n        let date = Date.now();\n        descendants.map(box => {\n            newIds[box.substr(3)] = date++;\n        });\n        return newIds;\n    }\n\n    /**\n     *\n     * @param obj\n     * @param state\n     */\n    parsePluginContainers(obj, state) {\n        if (obj.child) {\n            for (let i = 0; i < obj.child.length; i++) {\n                if (obj.child[i].tag && obj.child[i].tag === \"plugin\") {\n                    if (obj.child.length > 1) {\n                        // eslint-disable-next-line no-console\n                        console.error(\"A plugin tag must not have siblings. Please check renderTemplate method\");\n                    }\n                    let height = \"auto\";\n                    let child = obj.child[i];\n                    if (child.attr) {\n                        if (child.attr['plugin-data-height']) {\n                            height = child.attr['plugin-data-height'];\n                        } else if (child.attr['plugin-data-initial-height']) {\n                            height = child.attr['plugin-data-initial-height'];\n                        } else {\n                            height = child.attr.hasOwnProperty('plugin-data-resizable') ? \"auto\" : \"auto\";\n                        }\n                    }\n                    if (!obj.attr) {\n                        obj.attr = {\n                            style: { height: height },\n                        };\n                    } else if (!obj.attr.style) {\n                        obj.attr.style = { height: height };\n                    } else {\n                        obj.attr.style.height = height;\n                    }\n                    if (obj.attr.style.minHeight) {\n                        delete obj.attr.style.minHeight;\n                    }\n                }\n                this.parsePluginContainers(obj.child[i], state);\n            }\n        }\n        if (obj.tag && obj.tag === \"plugin\") {\n            if (obj.attr) {\n                if (!obj.attr['plugin-data-id']) {\n                    obj.attr['plugin-data-id'] = ID_PREFIX_SORTABLE_CONTAINER + Date.now() + this.index++ + new Date().getUTCMilliseconds();\n                }\n                if (!obj.attr['plugin-data-height']) {\n                    obj.attr['plugin-data-height'] = obj.attr['plugin-data-initial-height'] || (obj.attr.hasOwnProperty('plugin-data-resizable') ? \"auto\" : \"auto\");\n                }\n                if (obj.attr['plugin-data-key'] && !state[obj.attr['plugin-data-key']]) {\n                    state[obj.attr['plugin-data-key']] = {\n                        id: obj.attr['plugin-data-id'],\n                        name: obj.attr['plugin-data-display-name'] || obj.attr['plugin-data-key'],\n                        height: obj.attr['plugin-data-height'],\n                    };\n                }\n            }\n        }\n        if (obj.attr && obj.attr.class) {\n            obj.attr.className = obj.attr.class.join(' ');\n            delete obj.attr.class;\n        }\n    }\n\n    hasExerciseBox(navItemId, navItems, state, boxes) {\n        if(state.pluginTab === \"exercises\" && (navItems[navItemId].boxes.length > 1 || boxes[navItems[navItemId].boxes[0]].children.length !== 0)) {\n            return true;\n        }\n        if(navItems[navItemId] && Object.keys(navItems[navItemId].extraFiles).length !== 0) {\n            return true;\n        }\n        return false;\n    }\n\n    addDefaultContainerPlugins(eventDetails, obj) {\n        if (obj.child) {\n            for (let i = 0; i < obj.child.length; i++) {\n                this.addDefaultContainerPlugins(eventDetails, obj.child[i]);\n            }\n        }\n        if (obj.tag && obj.tag === \"plugin\" && obj.attr['plugin-data-default']) {\n            let boxes = this.props.store.getState().present.boxesById;\n            let plug_children = boxes[eventDetails.ids.id].sortableContainers[obj.attr['plugin-data-id']];\n            if (plug_children && plug_children.children && plug_children.children.length === 0) {\n                obj.attr['plugin-data-default'].split(\" \").map(name => {\n                    if (!Dali.Plugins.get(name)) {\n                        // eslint-disable-next-line no-console\n                        console.error(\"Plugin \" + name + \" does not exist\");\n                        return;\n                    }\n                    Dali.Plugins.get(name).getConfig().callback({\n                        parent: eventDetails.ids.id,\n                        container: obj.attr['plugin-data-id'],\n                        isDefaultPlugin: true,\n                    }, ADD_BOX);\n                });\n            }\n        }\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        globalConfig: state.present.globalConfig,\n        imagesUploaded: state.present.imagesUploaded,\n        boxes: state.present.boxesById,\n        boxSelected: state.present.boxSelected,\n        boxLevelSelected: state.present.boxLevelSelected,\n        indexSelected: state.present.indexSelected,\n        navItemsIds: state.present.navItemsIds,\n        navItems: state.present.navItemsById,\n        navItemSelected: state.present.navItemSelected,\n        containedViews: state.present.containedViewsById,\n        containedViewSelected: state.present.containedViewSelected,\n        undoDisabled: state.past.length === 0,\n        redoDisabled: state.future.length === 0,\n        displayMode: state.present.displayMode,\n        toolbars: state.present.toolbarsById,\n        isBusy: state.present.isBusy,\n        fetchVishResults: state.present.fetchVishResults,\n    };\n}\n\nexport default connect(mapStateToProps)(DaliApp);\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/containers/DaliApp.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 284,
    "kind": "class",
    "name": "DaliApp",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/_editor/containers/DaliApp.jsx",
    "importStyle": null,
    "description": "DaliApp. Main application component that renders everything else",
    "lineNumber": 40,
    "interface": false,
    "extends": [
      "react~Component"
    ],
    "ignore": true
  },
  {
    "__docId__": 285,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "index",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#index",
    "access": "public",
    "description": "Plugin index. It means that it will start in the first category available (text)",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "severalBoxes",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#severalBoxes",
    "access": "public",
    "description": "",
    "lineNumber": 56,
    "unknown": [
      {
        "tagName": "@TODO",
        "tagValue": "Comment"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "{alert: null, pluginTab: string, hideTab: string, visorVisible: boolean, xmlEditorVisible: boolean, richMarksVisible: boolean, markCreatorVisible: boolean, containedViewsVisible: boolean, currentRichMark: null, carouselShow: boolean, carouselFull: boolean, serverModal: boolean, catalogModal: boolean, lastAction: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#render",
    "access": "public",
    "description": "Renders React Component",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "dispatchAndSetState",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#dispatchAndSetState",
    "access": "public",
    "description": "Dispatches Redux action and records it in React state as well",
    "lineNumber": 484,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "actionCreator",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#componentDidMount",
    "access": "public",
    "description": "After component mounts\nLoads plugin API and sets listeners for plugin events, marks and keyboard keys pressed",
    "lineNumber": 493,
    "params": [],
    "return": null
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "getDescendantViews",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#getDescendantViews",
    "access": "public",
    "description": "Views that hang from the given view",
    "lineNumber": 649,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "getDescendantBoxes",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#getDescendantBoxes",
    "access": "public",
    "description": "Children boxes of a given box",
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "box",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "getDescendantBoxesFromContainer",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#getDescendantBoxesFromContainer",
    "access": "public",
    "description": "Children boxes of a given container",
    "lineNumber": 693,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "box",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "getDescendantContainedViews",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#getDescendantContainedViews",
    "access": "public",
    "description": "Get descendant contained views from a given box",
    "lineNumber": 718,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "box",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "getDescendantLinkedBoxes",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#getDescendantLinkedBoxes",
    "access": "public",
    "description": "Boxes that link to the given views",
    "lineNumber": 744,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "Views ids"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navs",
        "description": "navItemsById"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "getDescendantContainedViewsFromContainer",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#getDescendantContainedViewsFromContainer",
    "access": "public",
    "description": "Container's linked contained views",
    "lineNumber": 763,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "box",
        "description": "DaliBoxSortable"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": "SortableContainer"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "getDuplicatedBoxesIds",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#getDuplicatedBoxesIds",
    "access": "public",
    "description": "Get descendants of duplicated boxes",
    "lineNumber": 786,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "descendants",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "parsePluginContainers",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#parsePluginContainers",
    "access": "public",
    "description": "",
    "lineNumber": 800,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "hasExerciseBox",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#hasExerciseBox",
    "access": "public",
    "description": null,
    "lineNumber": 858,
    "undocument": true,
    "params": [
      {
        "name": "navItemId",
        "types": [
          "*"
        ]
      },
      {
        "name": "navItems",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "boxes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "addDefaultContainerPlugins",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~DaliApp#addDefaultContainerPlugins",
    "access": "public",
    "description": null,
    "lineNumber": 868,
    "undocument": true,
    "params": [
      {
        "name": "eventDetails",
        "types": [
          "*"
        ]
      },
      {
        "name": "obj",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "function",
    "name": "mapStateToProps",
    "memberof": "DALI_EDITOR/_editor/containers/DaliApp.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/_editor/containers/DaliApp.jsx~mapStateToProps",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/_editor/containers/DaliApp.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 896,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"globalConfig\": *, \"imagesUploaded\": *, \"boxes\": *, \"boxSelected\": *, \"boxLevelSelected\": *, \"indexSelected\": *, \"navItemsIds\": *, \"navItems\": *, \"navItemSelected\": *, \"containedViews\": *, \"containedViewSelected\": *, \"undoDisabled\": *, \"redoDisabled\": *, \"displayMode\": *, \"toolbars\": *, \"isBusy\": *, \"fetchVishResults\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 305,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/containers/DevTools.jsx",
    "content": "import React from 'react';\n\n// Exported from redux-devtools\nimport { createDevTools } from 'redux-devtools';\n\n// Monitors are separate packages, and you can make a custom one\nimport LogMonitor from 'redux-devtools-log-monitor';\nimport DockMonitor from 'redux-devtools-dock-monitor';\n\n// createDevTools takes a monitor and produces a DevTools component\nconst DevTools = createDevTools(\n    // Monitors are individually adjustable with props.\n    // Consult their repositories to learn about those props.\n    // Here, we put LogMonitor inside a DockMonitor.\n    /* jshint ignore:start */\n    <DockMonitor toggleVisibilityKey='ctrl-h'\n        changePositionKey='ctrl-q'>\n        <LogMonitor theme='tomorrow'/>\n    </DockMonitor>\n    /* jshint ignore:end */\n);\n\nexport default DevTools;\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/containers/DevTools.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "variable",
    "name": "DevTools",
    "memberof": "DALI_EDITOR/_editor/containers/DevTools.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/containers/DevTools.jsx~DevTools",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/containers/DevTools.jsx",
    "importStyle": "DevTools",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 307,
    "kind": "file",
    "name": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx",
    "content": "import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport DevTools from './DevTools';\nimport GlobalState from '../../reducers/reducers';\nimport DaliApp from './DaliApp';\nimport i18n from 'i18next';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport Dali from '../../core/main';\n\nexport default class ReduxProvider extends Component {\n    constructor(props) {\n        super(props);\n\n        this.initialState = Dali.Config.sections_have_content ?\n            ({ present: {\n                globalConfig: { title: i18n.t('course_title'), canvasRatio: 16 / 9, visorNav: { player: true, sidebar: true }, trackProgess: true, age: { min: 0, max: 100 }, context: 'school', rights: \"Public Domain\", keywords: [], typicalLearningTime: { h: 0, m: 0, s: 0 }, version: '1.0.0', status: 'draft', structure: 'linear', difficulty: 'easy' },\n                displayMode: \"list\",\n                imagesUploaded: [],\n                indexSelected: \"se-1467887497411\",\n                navItemsById: {\n                    0: { id: 0, children: [\"se-1467887497411\"], boxes: [], level: 0, type: '', hidden: false },\n                    \"se-1467887497411\": {\n                        id: \"se-1467887497411\",\n                        name: i18n.t('section'),\n                        isExpanded: true,\n                        parent: 0,\n                        children: [],\n                        unitNumber: 1,\n                        hidden: false,\n                        linkedBoxes: {},\n                        boxes: Dali.Config.sections_have_content ? ['bs-1467887497412'] : [],\n                        level: 1,\n                        type: \"section\",\n                        extraFiles: {},\n                        header: {\n                            elementContent: {\n                                documentTitle: '',\n                                documentSubTitle: '',\n                                numPage: '',\n                            },\n                            display: {\n                                courseTitle: 'hidden',\n                                documentTitle: 'expanded',\n                                documentSubTitle: 'hidden',\n                                breadcrumb: \"reduced\",\n                                pageNumber: \"hidden\",\n                            },\n                        },\n                    },\n                },\n                navItemsIds: ['se-1467887497411'],\n                navItemSelected: 'se-1467887497411',\n                boxesById: Dali.Config.sections_have_content ? {\n                    'bs-1467887497412': {\n                        id: \"bs-1467887497412\",\n                        parent: \"se-1467887497411\",\n                        container: 0,\n                        content: null,\n                        type: \"sortable\",\n                        level: -1,\n                        col: 0,\n                        row: 0,\n                        position: { x: 0, y: 0 },\n                        width: \"100%\",\n                        height: null,\n                        text: null,\n                        draggable: false,\n                        resizable: false,\n                        showTextEditor: false,\n                        fragment: {},\n                        children: [],\n                        sortableContainers: {},\n                        containedViews: [],\n                    },\n                } : {},\n                toolbarsById: Dali.Config.sections_have_content ? ({\n                    'bs-1467887497412': {\n                        id: \"bs-1467887497412\",\n                        state: {},\n                        controls: {\n                            main: {\n                                __name: \"Main\",\n                                accordions: {},\n                            },\n                        },\n                        config: { displayName: i18n.t('Container_') },\n                        showTextEditor: false,\n                    },\n                    \"se-1467887497411\": {\n                        \"id\": \"se-1467887497411\",\n                        \"controls\": {\n                            \"main\": {\n                                \"__name\": \"Main\",\n                                \"accordions\": {\n                                    \"basic\": {\n                                        \"__name\": \"Generales\",\n                                        \"icon\": \"settings\",\n                                        \"buttons\": {\n                                            \"page_display\": {\n                                                \"__name\": \"Previsualizar / exportar\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"navitem_name\": {\n                                                \"__name\": \"Nombre documento\",\n                                                \"type\": \"text\",\n                                                \"autoManaged\": false,\n                                            },\n                                        },\n                                    },\n                                    \"header\": {\n                                        \"__name\": \"Cabecera\",\n                                        \"icon\": \"format_color_text\",\n                                        \"buttons\": {\n                                            \"display_title\": {\n                                                \"__name\": \"Título Curso\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"display_pagetitle\": {\n                                                \"__name\": \"Título undefined\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"pagetitle_name\": {\n                                                \"__name\": \"custom_title\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagetitle\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true,\n                                            },\n                                            \"display_pagesubtitle\": {\n                                                \"__name\": \"Subtítulo\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"pagesubtitle_name\": {\n                                                \"__name\": \"custom_subtitle\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagesubtitle\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true,\n                                            },\n                                            \"display_breadcrumb\": {\n                                                \"__name\": \"Breadcrumb\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"display_pagenumber\": {\n                                                \"__name\": \"Nº Página\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"pagenumber_name\": {\n                                                \"__name\": \"custom_pagenum\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagenumber\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true,\n                                            },\n                                        },\n                                    },\n                                    \"__extra\": {\n                                        \"__name\": \"Alias\",\n                                        \"icon\": \"rate_review\",\n                                        \"buttons\": {\n                                            \"alias\": {\n                                                \"__name\": \"Alias\",\n                                                \"type\": \"text\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": true,\n                                                \"isAttribute\": true,\n                                            },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                        \"config\": { displayName: i18n.t('section') },\n                        \"state\": {},\n                    },\n                }) : ({}),\n                isBusy: \"\",\n                fetchVishResults: { \"results\": [] },\n            } }) :\n            ({ present: {\n                globalConfig: { title: i18n.t('course_title'), canvasRatio: 16 / 9, visorNav: { player: true, sidebar: true }, trackProgress: true, age: { min: 0, max: 100 }, context: 'school', keywords: [], rights: \"Public Domain\", status: 'draft', structure: 'linear', version: '1.0.0', typicalLearningTime: { h: 0, m: 0, s: 0 }, difficulty: 'easy' },\n                imagesUploaded: [],\n                indexSelected: 'pa-1497983247795',\n                boxesById: {\n                    \"bs-1497983247797\":\n                        { id: \"bs-1497983247797\",\n                            parent: \"pa-1497983247795\",\n                            container: 0,\n                            level: -1,\n                            col: 0,\n                            row: 0,\n                            position: { x: 0, y: 0, type: \"relative\" },\n                            draggable: false,\n                            resizable: false,\n                            showTextEditor: false,\n                            fragment: {},\n                            children: [],\n                            sortableContainers: {},\n                            containedViews: [] },\n                },\n                boxSelected: -1,\n                boxLevelSelected: 0,\n                navItemsIds: [\"se-1467887497411\", \"pa-1497983247795\"],\n                navItemSelected: \"pa-1497983247795\",\n                navItemsById: {\n                    \"0\": {\n                        id: 0,\n                        children: [\"se-1467887497411\"],\n                        boxes: [],\n                        level: 0,\n                        type: \"\",\n                        hidden: false },\n                    \"se-1467887497411\": {\n                        id: \"se-1467887497411\",\n                        name: i18n.t('section'),\n                        isExpanded: true,\n                        parent: 0,\n                        linkedBoxes: {},\n                        children: [\"pa-1497983247795\"],\n                        unitNumber: 1,\n                        hidden: false,\n                        boxes: [],\n                        level: 1,\n                        type: \"section\",\n                        extraFiles: {},\n                        header: {\n                            elementContent: {\n                                documentTitle: \"\",\n                                documentSubTitle: \"\",\n                                numPage: \"\" },\n                            display: {\n                                courseTitle: \"hidden\",\n                                documentTitle: \"expanded\",\n                                documentSubTitle: \"hidden\",\n                                breadcrumb: \"reduced\",\n                                pageNumber: \"hidden\" },\n                        },\n                    },\n                    \"pa-1497983247795\": {\n                        id: \"pa-1497983247795\",\n                        name: i18n.t('page'),\n                        isExpanded: true,\n                        parent: \"se-1467887497411\",\n                        linkedBoxes: {},\n                        children: [],\n                        boxes: [\"bs-1497983247797\"],\n                        level: 2,\n                        type: \"document\",\n                        unitNumber: 1,\n                        hidden: false,\n                        extraFiles: {},\n                        header: {\n                            elementContent: {\n                                documentTitle: \"\",\n                                documentSubTitle: \"\",\n                                numPage: \"\",\n                            },\n                            display: {\n                                courseTitle: \"hidden\",\n                                documentTitle: \"expanded\",\n                                documentSubTitle: \"hidden\",\n                                breadcrumb: \"reduced\",\n                                pageNumber: \"hidden\",\n                            },\n                        },\n                    },\n                },\n                containedViewsById: {},\n                containedViewSelected: 0,\n                displayMode: \"list\",\n                toolbarsById: {\n                    \"se-1467887497411\": {\n                        \"id\": \"se-1467887497411\",\n                        \"controls\": {\n                            \"main\": {\n                                \"__name\": \"Main\",\n                                \"accordions\": {\n                                    \"basic\": {\n                                        \"__name\": \"Generales\",\n                                        \"icon\": \"settings\",\n                                        \"buttons\": {\n                                            \"page_display\": {\n                                                \"__name\": \"Previsualizar / exportar\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"navitem_name\": {\n                                                \"__name\": \"Nombre documento\",\n                                                \"type\": \"text\",\n                                                \"autoManaged\": false,\n                                            },\n                                        },\n                                    },\n                                    \"header\": {\n                                        \"__name\": \"Cabecera\",\n                                        \"icon\": \"format_color_text\",\n                                        \"buttons\": {\n                                            \"display_title\": {\n                                                \"__name\": \"Título Curso\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"display_pagetitle\": {\n                                                \"__name\": \"Título undefined\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"pagetitle_name\": {\n                                                \"__name\": \"custom_title\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagetitle\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true,\n                                            },\n                                            \"display_pagesubtitle\": {\n                                                \"__name\": \"Subtítulo\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"pagesubtitle_name\": {\n                                                \"__name\": \"custom_subtitle\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagesubtitle\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true,\n                                            },\n                                            \"display_breadcrumb\": {\n                                                \"__name\": \"Breadcrumb\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"display_pagenumber\": {\n                                                \"__name\": \"Nº Página\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false,\n                                            },\n                                            \"pagenumber_name\": {\n                                                \"__name\": \"custom_pagenum\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagenumber\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true,\n                                            },\n                                        },\n                                    },\n                                    \"__extra\": {\n                                        \"__name\": \"Alias\",\n                                        \"icon\": \"rate_review\",\n                                        \"buttons\": {\n                                            \"alias\": {\n                                                \"__name\": \"Alias\",\n                                                \"type\": \"text\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": true,\n                                                \"isAttribute\": true,\n                                            },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                        \"config\": { displayName: i18n.t('section') },\n                        \"state\": {},\n                    },\n                    \"pa-1497983247795\": {\n                        id: \"pa-1497983247795\",\n                        controls: {\n                            main: {\n                                \"__name\": \"Main\",\n                                \"accordions\": {\n                                    basic: {\n                                        \"__name\": \"Generales\",\n                                        \"icon\": \"settings\",\n                                        \"buttons\": {\n                                            \"page_display\": {\n                                                \"__name\": \"Previsualizar / exportar\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false },\n                                            \"navitem_name\": {\n                                                \"__name\": \"Nombre documento\",\n                                                \"type\": \"text\",\n                                                \"value\": \"Página\",\n                                                \"autoManaged\": false },\n                                        },\n                                    },\n                                    header: {\n                                        \"__name\": \"Cabecera\",\n                                        \"icon\": \"format_color_text\",\n                                        \"buttons\": {\n                                            display_title: {\n                                                \"__name\": \"Título Curso\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false },\n                                            display_pagetitle: {\n                                                \"__name\": \"Título Página\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false },\n                                            pagetitle_name: {\n                                                \"__name\": \"custom_title\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagetitle\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true },\n                                            display_pagesubtitle: {\n                                                \"__name\": \"Subtítulo\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false },\n                                            pagesubtitle_name: {\n                                                \"__name\": \"custom_subtitle\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagesubtitle\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true },\n                                            display_breadcrumb: {\n                                                \"__name\": \"Breadcrumb\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": true,\n                                                \"autoManaged\": false },\n                                            display_pagenumber: {\n                                                \"__name\": \"Nº Página\",\n                                                \"type\": \"checkbox\",\n                                                \"checked\": false,\n                                                \"autoManaged\": false },\n                                            pagenumber_name: {\n                                                \"__name\": \"custom_pagenum\",\n                                                \"type\": \"conditionalText\",\n                                                \"associatedKey\": \"display_pagenumber\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": false,\n                                                \"display\": true },\n                                        },\n                                    },\n                                    \"__extra\": {\n                                        \"__name\": \"Alias\",\n                                        \"icon\": \"rate_review\",\n                                        \"buttons\": {\n                                            \"alias\": {\n                                                \"__name\": \"Alias\",\n                                                \"type\": \"text\",\n                                                \"value\": \"\",\n                                                \"autoManaged\": true,\n                                                \"isAttribute\": true },\n                                        },\n                                    },\n\n                                },\n                            },\n                        },\n                        config: { \"displayName\": i18n.t('document') },\n                        state: {},\n                    },\n                    \"bs-1497983247797\": {\n                        id: \"bs-1497983247797\",\n                        controls: {\n                            main: {\n                                \"__name\": \"Main\",\n                                \"accordions\": {},\n                            },\n                        },\n                        config: {\n                            displayName: \"Contenedor\",\n                        },\n                        state: {},\n                        showTextEditor: false },\n                },\n                isBusy: \"\",\n                fetchVishResults: { \"results\": [] },\n            } });\n\n        this.store = this.configureStore();\n    }\n\n    render() {\n        return (\n            /* jshint ignore:start */\n            <Provider store={this.store}>\n                <div style={{ height: '100%' }}>\n                    <DaliApp id=\"app\" store={this.store}/>\n                    {/* <DevTools/> */}\n                </div>\n            </Provider>\n            /* jshint ignore:end */\n        );\n    }\n\n    configureStore() {\n        const store = createStore(GlobalState, this.initialState, compose(applyMiddleware(thunkMiddleware), DevTools.instrument()));\n\n        if (module.hot) {\n            // Enable Webpack hot module replacement for reducers\n            module.hot.accept('../../reducers/reducers', () => {\n                const nextRootReducer = require('../../reducers/reducers').default;\n                store.replaceReducer(nextRootReducer);\n            });\n        }\n\n        return store;\n    }\n}\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_editor/containers/ReduxProvider.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 308,
    "kind": "class",
    "name": "ReduxProvider",
    "memberof": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_editor/containers/ReduxProvider.jsx",
    "importStyle": "ReduxProvider",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 309,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "initialState",
    "memberof": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider",
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider#initialState",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 311,
    "kind": "member",
    "name": "store",
    "memberof": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider",
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider#store",
    "access": "public",
    "description": null,
    "lineNumber": 501,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider#render",
    "access": "public",
    "description": null,
    "lineNumber": 504,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "configureStore",
    "memberof": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_editor/containers/ReduxProvider.jsx~ReduxProvider#configureStore",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 314,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/BoxSortableVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport BoxVisor from './BoxVisor';\n\nexport default class BoxSortableVisor extends Component {\n    render() {\n        let box = this.props.boxes[this.props.id];\n        return (\n            /* jshint ignore:start */\n            <div ref=\"sortableContainer\"\n                style={{ position: 'relative' }}>\n                {box.children.map((idContainer, index)=> {\n                    let container = box.sortableContainers[idContainer];\n                    return (<div key={index}\n                        className={\"daliBoxSortableContainer pos_relative \" + container.style.className}\n                        id={idContainer}\n                        style={\n                            Object.assign({}, {\n                                height: container.height === 'auto' ? container.height : container.height + 'px',\n                            }, container.style)\n                        }>\n                        <div className=\"disp_table width100 height100\">\n                            {container.colDistribution.map((col, i) => {\n                                if (container.cols[i]) {\n                                    return (<div key={i}\n                                        className=\"colDist-i height100 disp_table_cell vert_al_top\"\n                                        style={{ width: col + \"%\" }}>\n                                        {container.cols[i].map((row, j) => {\n                                            return (<div key={j}\n                                                className=\"colDist-j width100 pos_relative\"\n                                                style={{ height: row + \"%\" }}>\n                                                {container.children.map((idBox, ind) => {\n                                                    if (this.props.boxes[idBox].col === i && this.props.boxes[idBox].row === j) {\n                                                        return (<BoxVisor id={idBox}\n                                                            key={ind}\n                                                            boxes={this.props.boxes}\n                                                            boxSelected={this.props.boxSelected}\n                                                            boxLevelSelected={this.props.boxLevelSelected}\n                                                            changeCurrentView={(element)=>{this.props.changeCurrentView(element);}}\n                                                            currentViewSelected={this.props.currentViewSelected}\n                                                            toolbars={this.props.toolbars}\n                                                            richElementsState={this.props.richElementsState}/>);\n\n                                                    } else if (ind === container.children.length - 1) {\n                                                        return (<span key={ind}><br/><br/></span>);\n                                                    }\n                                                    return null;\n                                                })}\n                                            </div>);\n                                        })}\n                                    </div>);\n                                }\n                                return null;\n                            })}\n                        </div>\n                    </div>);\n                })}\n            </div>\n            /* jshint ignore:end */\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/BoxSortableVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 315,
    "kind": "class",
    "name": "BoxSortableVisor",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxSortableVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxSortableVisor.jsx~BoxSortableVisor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/BoxSortableVisor.jsx",
    "importStyle": "BoxSortableVisor",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxSortableVisor.jsx~BoxSortableVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxSortableVisor.jsx~BoxSortableVisor#render",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PluginPlaceholderVisor from './PluginPlaceholderVisor';\nimport { isBox, isSortableBox, isView, isSortableContainer, isAncestorOrSibling } from '../../../common/utils';\n\nexport default class BoxVisor extends Component {\n    constructor(props) {\n        super(props);\n        this.borderSize = 2;\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if(this.props.toolbars[this.props.id].config.needsTextEdition) {\n            window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n        }\n    }\n    render() {\n        let cornerSize = 15;\n        let box = this.props.boxes[this.props.id];\n        let toolbar = this.props.toolbars[this.props.id];\n        let vis = this.props.boxSelected === this.props.id;\n        let style = {};\n\n        let textareaStyle = {\n            position: 'absolute',\n            resize: 'none',\n            // top: '0%', ** there is an error here\n            color: 'black',\n            backgroundColor: 'white',\n            padding: 0,\n            width: '100%',\n            height: (toolbar.showTextEditor ? '' : '100%'),\n            border: 'dashed black 1px',\n            zIndex: 99999,\n            visibility: (toolbar.showTextEditor ? 'visible' : 'hidden'),\n        };\n        let attrs = {};\n        let width;\n        let height;\n        let classNames = \"\";\n\n        if (toolbar.config.needsTextEdition) {\n            textareaStyle.textAlign = \"left\";\n            style.textAlign = \"left\";\n        }\n\n        for (let tabKey in toolbar.controls) {\n            for (let accordionKey in toolbar.controls[tabKey].accordions) {\n                let button;\n                for (let buttonKey in toolbar.controls[tabKey].accordions[accordionKey].buttons) {\n                    button = toolbar.controls[tabKey].accordions[accordionKey].buttons[buttonKey];\n                    if (!button.isAttribute) {\n                        if (button.autoManaged) {\n                            if (buttonKey === 'className' && button.value) {\n                                classNames += button.value;\n                            } else if (buttonKey === '__width') {\n                                width = button.displayValue + (button.type === \"number\" ? button.units : \"\");\n                            } else if (buttonKey === '__height') {\n                                height = button.displayValue + (button.type === \"number\" ? button.units : \"\");\n                            } else {\n                                style[buttonKey] = button.value;\n                            }\n                        }\n                    } else {\n                        attrs['data-' + buttonKey] = button.value;\n                    }\n                    if (buttonKey === 'fontSize') {\n                        textareaStyle.fontSize = button.value;\n                        if (button.units) {\n                            textareaStyle.fontSize += button.units;\n                        }\n                    } else if (buttonKey === 'color') {\n                        textareaStyle.color = button.value;\n                    }\n                }\n                if (toolbar.controls[tabKey].accordions[accordionKey].accordions) {\n                    for (let accordionKey2 in toolbar.controls[tabKey].accordions[accordionKey].accordions) {\n                        for (let buttonKey in toolbar.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons) {\n                            button = toolbar.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons[buttonKey];\n                            if (!button.isAttribute) {\n                                if (button.autoManaged) {\n                                    if (buttonKey === 'className' && button.value) {\n                                        classNames += button.value;\n                                    } else {\n                                        style[buttonKey] = button.value;\n                                    }\n                                }\n                            } else {\n                                attrs['data-' + buttonKey] = button.value;\n                            }\n                            if (buttonKey === 'fontSize') {\n                                textareaStyle.fontSize = button.value;\n                                if (button.units) {\n                                    textareaStyle.fontSize += button.units;\n                                }\n                            } else if (buttonKey === 'color') {\n                                textareaStyle.color = button.value;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // pass currentState  of component if exists\n        if(this.props.richElementsState && this.props.richElementsState[box.id] !== undefined) {\n            if(toolbar.config.flavor === \"react\") {\n                toolbar.state.currentState = this.props.richElementsState[box.id];\n            } else {\n                toolbar.state.currentState = this.props.richElementsState[box.id];\n            }\n        }\n\n        let rotate = 'rotate(0deg)';\n        if (toolbar.controls.main.accordions.__sortable.buttons.__rotate && toolbar.controls.main.accordions.__sortable.buttons.__rotate.value) {\n            rotate = 'rotate(' + toolbar.controls.main.accordions.__sortable.buttons.__rotate.value + 'deg)';\n        }\n        style.transform = style.WebkitTransform = style.MsTransform = rotate;\n\n        /* TODO: Reasign object if is rich to have marks as property box.content.props*/\n\n        let content = toolbar.config.flavor === \"react\" ? (\n            <div style={style} {...attrs} className={\"boxStyle \" + classNames} ref={\"content\"}>{Dali.Visor.Plugins[toolbar.config.name].getRenderTemplate(toolbar.state, box.id)}</div>\n        ) : (\n            <div style={style} {...attrs} className={\"boxStyle \" + classNames} ref={\"content\"}>\n                {this.renderChildren(Dali.Visor.Plugins.get(toolbar.config.name).export(toolbar.state, toolbar.config.name, box.children.length !== 0, this.props.id), 0)}\n            </div>\n        );\n        let border = (\n            /* jshint ignore:start */\n            <div style={{ visibility: (vis ? 'visible' : 'hidden') }}>\n                <div style={{\n                    position: 'absolute',\n                    top: -(this.borderSize),\n                    left: -(this.borderSize),\n                    width: '100%',\n                    height: '100%',\n                    boxSizing: 'content-box',\n                }} />\n            </div>\n            /* jshint ignore:end */\n        );\n\n        let classes = \"wholeboxvisor\";\n        if (box.container) {\n            classes += \" dnd\" + box.container;\n        }\n\n        if (box.height === 'auto') {\n            classes += \" automaticallySizedBox\";\n        }\n\n        let showOverlay = \"none\";\n        // If current level selected is bigger than this box's and it has no children, show overlay\n        if (this.props.boxLevelSelected > box.level && box.children.length === 0) {\n            showOverlay = \"initial\";\n        // If current level selected is the same but this box belongs to another \"tree\" of boxes, show overlay\n        } else if (this.props.boxLevelSelected === box.level &&\n                   box.level !== 0 &&\n                   !isAncestorOrSibling(this.props.boxSelected, this.props.id, this.props.boxes)) {\n            showOverlay = \"initial\";\n        }\n        let verticalAlign = \"top\";\n        if (isSortableBox(box.container)) {\n            if (toolbar.controls.main.accordions.__sortable.buttons.__verticalAlign.value) {\n                verticalAlign = toolbar.controls.main.accordions.__sortable.buttons.__verticalAlign.value;\n            } else {\n                verticalAlign = 'top';\n            }\n        }\n        return (\n            /* jshint ignore:start */\n            <div className={classes} id={'box-' + this.props.id}\n                style={{\n                    position: box.position.type,\n                    left: box.position.x ? box.position.x : \"\",\n                    top: box.position.y ? box.position.y : \"\",\n                    width: width,\n                    height: height,\n                    verticalAlign: verticalAlign,\n                }}>\n                {border}\n                {content}\n                {/* {toolbar.state.__text ?\n                    <div id={box.id}\n                        ref={\"textarea\"}\n                        className={classNames + \" textAreaStyle\"}\n                        contentEditable\n                        style={textareaStyle} /> :\n                    null\n                }*/}\n            </div>\n            /* jshint ignore:end */\n        );\n    }\n\n    __getMarkKeys(marks) {\n        let markKeys = {};\n        Object.keys(marks).map((mark) =>{\n            let inner_mark = marks[mark];\n            let value = inner_mark.value.toString();\n            markKeys[value] = inner_mark.connection;\n        });\n        return markKeys;\n    }\n\n    renderChildren(markup, key) {\n        let component;\n        let props = {};\n        let children = null;\n        switch (markup.node) {\n        case 'element':\n            if (markup.attr) {\n                props = markup.attr;\n            }\n            props.key = key;\n            if (markup.tag === 'plugin') {\n                component = PluginPlaceholderVisor;\n                let resizable = markup.attr.hasOwnProperty(\"plugin-data-resizable\");\n                props = Object.assign({}, props, {\n                    pluginContainer: markup.attr[\"plugin-data-id\"],\n                    resizable: resizable,\n                    parentBox: this.props.boxes[this.props.id],\n                    boxes: this.props.boxes,\n                    boxSelected: this.props.boxSelected,\n                    boxLevelSelected: this.props.boxLevelSelected,\n                    toolbars: this.props.toolbars,\n                    lastActionDispatched: this.props.lastActionDispatched,\n                    onBoxSelected: this.props.onBoxSelected,\n                    onBoxLevelIncreased: this.props.onBoxLevelIncreased,\n                    currentViewSelected: this.props.currentViewSelected,\n                    onBoxMoved: this.props.onBoxMoved,\n                    onBoxResized: this.props.onBoxResized,\n                    onSortableContainerResized: this.props.onSortableContainerResized,\n                    onBoxDeleted: this.props.onBoxDeleted,\n                    onBoxDropped: this.props.onBoxDropped,\n                    onVerticallyAlignBox: this.props.onVerticallyAlignBox,\n                    onBoxModalToggled: this.props.onBoxModalToggled,\n                    onBoxesInsideSortableReorder: this.props.onBoxesInsideSortableReorder,\n                    onTextEditorToggled: this.props.onTextEditorToggled,\n                });\n            } else {\n                component = markup.tag;\n            }\n            break;\n        case 'text':\n            component = \"span\";\n            props = { key: key };\n            children = [decodeURI(markup.text)];\n            break;\n        case 'root':\n            component = \"div\";\n            props = { style: { width: '100%', height: '100%' } };\n            break;\n        }\n\n        Object.keys(props).forEach(prop => {\n            if (prop.startsWith(\"on\")) {\n                let value = props[prop];\n                if (typeof value === \"string\") {\n                    // eslint-disable-next-line\n                    props[prop] = new Function(value);\n                }\n            }\n        });\n\n        if (markup.child) {\n            if (markup.child.length === 1 && markup.child[0].node === \"text\") {\n                props.dangerouslySetInnerHTML = {\n                    __html: decodeURI(markup.child[0].text),\n                };\n            } else {\n                children = [];\n                markup.child.forEach((child, index) => {\n                    children.push(this.renderChildren(child, index));\n                });\n            }\n        }\n        return React.createElement(component, props, children);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 318,
    "kind": "class",
    "name": "BoxVisor",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx",
    "importStyle": "BoxVisor",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 319,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 320,
    "kind": "member",
    "name": "borderSize",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor",
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor#borderSize",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor#render",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "__getMarkKeys",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor#__getMarkKeys",
    "access": "private",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "params": [
      {
        "name": "marks",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "renderChildren",
    "memberof": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/BoxVisor.jsx~BoxVisor#renderChildren",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "markup",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport CanvasVisorDoc from './CanvasVisorDoc';\nimport CanvasVisorSli from './CanvasVisorSli';\nimport { isSlide } from '../../../common/utils';\n\nexport default class CanvasVisor extends Component {\n\n    render() {\n        let visorContent;\n        if (isSlide(this.props.navItems[this.props.currentView].type)) {\n            /* jshint ignore:start */\n            visorContent = <CanvasVisorSli\n                boxes={this.props.boxes}\n                boxLevelSelected={this.props.boxLevelSelected}\n                boxSelected={this.props.boxSelected}\n                canvasRatio={this.props.canvasRatio}\n                changeCurrentView={this.props.changeCurrentView}\n                containedViews={this.props.containedViews}\n                currentView={this.props.currentView}\n                navItems={this.props.navItems}\n                removeLastView={this.props.removeLastView}\n                richElementsState={this.props.richElementsState}\n                showCanvas={this.props.showCanvas}\n                title={this.props.title}\n                toolbars={this.props.toolbars}\n                triggeredMarks={this.props.triggeredMarks}\n                viewsArray={this.props.viewsArray}/>;\n            /* jshint ignore:end */\n        }else{\n            /* jshint ignore:start */\n            visorContent = <CanvasVisorDoc\n                boxes={this.props.boxes}\n                boxLevelSelected={this.props.boxLevelSelected}\n                boxSelected={this.props.boxSelected}\n                containedViews={this.props.containedViews}\n                changeCurrentView={this.props.changeCurrentView}\n                currentView={this.props.currentView}\n                navItems={this.props.navItems}\n                removeLastView={this.props.removeLastView}\n                richElementsState={this.props.richElementsState}\n                showCanvas={this.props.showCanvas}\n                toolbars={this.props.toolbars}\n                title={this.props.title}\n                triggeredMarks={this.props.triggeredMarks}\n                viewsArray={this.props.viewsArray}/>;\n            /* jshint ignore:end */\n        }\n\n        return (\n            /* jshint ignore:start */\n            visorContent\n            /* jshint ignore:end */\n        );\n    }\n\n    componentDidUpdate() {\n        window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 326,
    "kind": "class",
    "name": "CanvasVisor",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx~CanvasVisor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx",
    "importStyle": "CanvasVisor",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 327,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx~CanvasVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx~CanvasVisor#render",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx~CanvasVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisor.jsx~CanvasVisor#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 329,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport BoxVisor from './BoxVisor';\nimport BoxSortableVisor from './BoxSortableVisor';\nimport { Col, Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport HeaderVisor from './HeaderVisor';\nimport { isContainedView, isSortableBox, isSection, isView } from '../../../common/utils';\nimport i18n from 'i18next';\n\nexport default class CanvasVisorDoc extends Component {\n\n    render() {\n        let titles = [];\n        let itemSelected = this.props.navItems[this.props.currentView] || this.props.containedViews[this.props.currentView];\n        let isCV = !isView(this.props.currentView);\n        if (itemSelected !== 0 && !isCV) {\n            titles.push(itemSelected.name);\n            let parent = itemSelected.parent;\n            while (parent !== 0) {\n                titles.push(this.props.navItems[parent].name);\n                parent = this.props.navItems[parent].parent;\n            }\n            titles.reverse();\n        }\n\n        let maincontent = isCV ? document.getElementById('contained_maincontent') : document.getElementById('maincontent');\n        let actualHeight;\n        if (maincontent) {\n            actualHeight = parseInt(maincontent.scrollHeight, 10);\n            actualHeight = (parseInt(maincontent.clientHeight, 10) < actualHeight) ? (actualHeight) + 'px' : '100%';\n        }\n\n        let overlayHeight = actualHeight ? actualHeight : '100%';\n        let boxes = isCV ? this.props.containedViews[this.props.currentView].boxes || [] : this.props.navItems[this.props.currentView].boxes || [];\n        let thisView = this.props.viewsArray && this.props.viewsArray.length > 1 ? (i18n.t('messages.go_back_to') + (isContainedView(this.props.viewsArray[this.props.viewsArray.length - 2]) ? this.props.containedViews[this.props.viewsArray[this.props.viewsArray.length - 2]].name : this.props.navItems[this.props.viewsArray[this.props.viewsArray.length - 2]].name)) : i18n.t('messages.go_back');\n\n        const tooltip = (\n            <Tooltip id=\"tooltip\">{thisView}</Tooltip>\n        );\n        return (\n\n            <Col id={isCV ? \"containedCanvas\" : \"canvas\"} md={12} xs={12}\n                style={{ display: 'initial', padding: '0', width: '100%' }}>\n                <div className=\"scrollcontainer\">\n                    {isCV ? (< OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n                        <a href=\"#\" className=\"btnOverBar cvBackButton\" style={{ pointerEvents: this.props.viewsArray.length > 1 ? 'initial' : 'none', color: this.props.viewsArray.length > 1 ? 'black' : 'gray' }}\n                            onClick={a => {\n                                document.getElementById(\"containedCanvas\").classList.add(\"exitCanvas\");\n                                setTimeout(function() {\n                                    this.props.removeLastView();\n                                }.bind(this), 500);\n                                a.stopPropagation();\n                            }}><i className=\"material-icons\">close</i></a></OverlayTrigger>) : (<span />)}\n                    <HeaderVisor titles={titles}\n                        onShowTitle={()=>this.setState({ showTitle: true })}\n                        courseTitle={this.props.title}\n                        titleMode={itemSelected.titleMode}\n                        navItems={this.props.navItems}\n                        currentView={this.props.currentView}\n                        containedViews={this.props.containedViews}\n                        titleModeToggled={this.props.titleModeToggled}\n                        onUnitNumberChanged={this.props.onUnitNumberChanged}\n                        showButton/>\n                    <div className=\"outter canvasvisor\">\n                        <div id={isCV ? 'airlayer_cv' : 'airlayer'}\n                            className={'doc_air'}\n                            style={{ visibility: (this.props.showCanvas ? 'visible' : 'hidden') }}>\n\n                            <div id={isCV ? \"contained_maincontent\" : \"maincontent\"}\n                                onClick={e => {\n                                    this.setState({ showTitle: false });\n                                }}\n                                className={'innercanvas doc'}\n                                style={{ visibility: (this.props.showCanvas ? 'visible' : 'hidden') }}>\n\n                                <br/>\n\n                                <div style={{\n                                    width: \"100%\",\n                                    background: \"black\",\n                                    height: overlayHeight,\n                                    position: \"absolute\",\n                                    top: 0,\n                                    opacity: 0.4,\n                                    display: (this.props.boxLevelSelected > 0) ? \"block\" : \"none\",\n                                    visibility: (this.props.boxLevelSelected > 0) ? \"visible\" : \"collapse\",\n                                }} />\n\n                                {boxes.map(id => {\n                                    let box = this.props.boxes[id];\n                                    if (!isSortableBox(box.id)) {\n                                        return <BoxVisor key={id}\n                                            id={id}\n                                            boxes={this.props.boxes}\n                                            boxSelected={this.props.boxSelected}\n                                            boxLevelSelected={this.props.boxLevelSelected}\n                                            changeCurrentView={(element)=>{this.props.changeCurrentView(element);}}\n                                            currentView={this.props.currentView}\n                                            toolbars={this.props.toolbars}\n                                            richElementsState={this.props.richElementsState}/>;\n                                    }\n                                    return <BoxSortableVisor key={id}\n                                        id={id}\n                                        boxes={this.props.boxes}\n                                        boxSelected={this.props.boxSelected}\n                                        boxLevelSelected={this.props.boxLevelSelected}\n                                        changeCurrentView={this.props.changeCurrentView}\n                                        currentView={this.props.currentView}\n                                        toolbars={this.props.toolbars}\n                                        richElementsState={this.props.richElementsState}/>;\n\n                                })}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </Col>\n            /* jshint ignore:end */\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.boxSelected !== -1) {\n            this.setState({ showTitle: false });\n        }\n        if (this.props.currentView.id !== nextProps.currentView.id) {\n            document.getElementById(!isView(this.props.currentView) ? \"contained_maincontent\" : \"maincontent\").scrollTop = 0;\n        }\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 330,
    "kind": "class",
    "name": "CanvasVisorDoc",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx~CanvasVisorDoc",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx",
    "importStyle": "CanvasVisorDoc",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx~CanvasVisorDoc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx~CanvasVisorDoc#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx~CanvasVisorDoc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorDoc.jsx~CanvasVisorDoc#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 333,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport BoxVisor from './BoxVisor';\nimport { Col, Tooltip, OverlayTrigger } from 'react-bootstrap';\nimport HeaderVisor from './HeaderVisor';\nimport { aspectRatio } from '../../../common/common_tools';\nimport ReactResizeDetector from 'react-resize-detector';\nimport { isContainedView, isView } from '../../../common/utils';\nimport i18n from 'i18next';\n\nexport default class CanvasVisorSli extends Component {\n\n    render() {\n\n        let titles = [];\n        let itemSelected = this.props.navItems[this.props.currentView] || this.props.containedViews[this.props.currentView];\n        let isCV = !isView(this.props.currentView);\n\n        if (itemSelected.id !== 0 && !isCV) {\n            titles.push(itemSelected.name);\n            let parent = itemSelected.parent;\n            while (parent !== 0) {\n                titles.push(this.props.navItems[parent].name);\n                parent = this.props.navItems[parent].parent;\n            }\n            titles.reverse();\n        }\n\n        let maincontent = isCV ? document.getElementById('contained_maincontent') : document.getElementById('maincontent');\n        let actualHeight;\n        if (maincontent) {\n            actualHeight = parseInt(maincontent.scrollHeight, 10);\n            actualHeight = (parseInt(maincontent.clientHeight, 10) < actualHeight) ? (actualHeight) + 'px' : '100%';\n        }\n\n        let overlayHeight = actualHeight ? actualHeight : '100%';\n        // aspectRatio(this.props.aspectRatio);\n        let boxes = itemSelected.boxes || [];\n        let thisView = this.props.viewsArray && this.props.viewsArray.length > 1 ? (i18n.t('messages.go_back_to') + (isContainedView(this.props.viewsArray[this.props.viewsArray.length - 2]) ? this.props.containedViews[this.props.viewsArray[this.props.viewsArray.length - 2]].name : this.props.navItems[this.props.viewsArray[this.props.viewsArray.length - 2]].name)) : i18n.t('messages.go_back');\n\n        const tooltip = (\n            <Tooltip id=\"tooltip\">{thisView}</Tooltip>\n        );\n        return (\n\n            <Col id={isCV ? \"containedCanvas\" : \"canvas\"} md={12} xs={12}\n                style={{ display: 'initial', padding: '0', width: '100%' }}>\n\n                <div id={isCV ? 'airlayer_cv' : 'airlayer'}\n                    className={'slide_air'}\n                    style={{ margin: '0 auto', visibility: (this.props.showCanvas ? 'visible' : 'hidden') }}>\n\n                    <div id={isCV ? \"contained_maincontent\" : \"maincontent\"}\n                        onClick={e => {\n                            this.setState({ showTitle: false });\n                        }}\n                        className={'innercanvas sli'}\n                        style={{ visibility: (this.props.showCanvas ? 'visible' : 'hidden') }}>\n                        {isCV ? (< OverlayTrigger placement=\"bottom\" overlay={tooltip}>\n                            <a href=\"#\" className=\"btnOverBar cvBackButton\" style={{ pointerEvents: this.props.viewsArray.length > 1 ? 'initial' : 'none', color: this.props.viewsArray.length > 1 ? 'black' : 'gray' }} onClick={a => {\n                                document.getElementById(\"containedCanvas\").classList.add(\"exitCanvas\");\n                                setTimeout(function() {\n                                    this.props.removeLastView();\n                                }.bind(this), 500);\n\n                                a.stopPropagation();\n                            }}><i className=\"material-icons\">close</i></a></OverlayTrigger>) : (<span />)}\n                        <HeaderVisor titles={titles}\n                            onShowTitle={()=>this.setState({ showTitle: true })}\n                            courseTitle={this.props.title}\n                            titleMode={itemSelected.titleMode}\n                            navItem={this.props.navItemSelected}\n                            navItems={this.props.navItems}\n                            currentView={this.props.currentView}\n                            containedViews={this.props.containedViews}\n                            titleModeToggled={this.props.titleModeToggled}\n                            onUnitNumberChanged={this.props.onUnitNumberChanged}\n                            showButton/>\n\n                        <br/>\n\n                        <div style={{\n                            width: \"100%\",\n                            background: \"black\",\n                            height: overlayHeight,\n                            position: \"absolute\",\n                            top: 0,\n                            opacity: 0.4,\n                            display: (this.props.boxLevelSelected > 0) ? \"block\" : \"none\",\n                            visibility: (this.props.boxLevelSelected > 0) ? \"visible\" : \"collapse\",\n                        }} />\n\n                        {boxes.map(id => {\n                            let box = this.props.boxes[id];\n\n                            return <BoxVisor key={id}\n                                id={id}\n                                boxes={this.props.boxes}\n                                boxSelected={this.props.boxSelected}\n                                boxLevelSelected={this.props.boxLevelSelected}\n                                changeCurrentView={(element)=>{this.props.changeCurrentView(element);}}\n                                currentView={this.props.currentView}\n                                toolbars={this.props.toolbars}\n                                richElementsState={this.props.richElementsState}/>;\n\n                        })}\n\n                        <ReactResizeDetector handleWidth handleHeight onResize={(e)=>{aspectRatio(this.props.canvasRatio, isCV ? 'airlayer_cv' : 'airlayer', isCV ? \"containedCanvas\" : \"canvas\");}} />\n                    </div>\n                </div>\n\n            </Col>\n            /* jshint ignore:end */\n        );\n    }\n    componentDidUpdate() {\n        // aspectRatio(this.props.canvasRatio);\n    }\n\n    componentDidMount() {\n        let isCV = !isView(this.props.currentView);\n        aspectRatio(this.props.canvasRatio, isCV ? 'airlayer_cv' : 'airlayer', isCV ? \"containedCanvas\" : \"canvas\");\n\n        // window.addEventListener(\"resize\", aspectRatio);\n    }\n    componentWillUnmount() {\n        // window.removeEventListener(\"resize\", aspectRatio);\n    }\n\n    componentWillUpdate(nextProps) {\n        if (this.props.canvasRatio !== nextProps.canvasRatio) {\n            let isCV = !isView(nextProps.currentView);\n            window.canvasRatio = nextProps.canvasRatio;\n            // window.removeEventListener(\"resize\", aspectRatio);\n            aspectRatio(nextProps.canvasRatio, isCV ? 'airlayer_cv' : 'airlayer', isCV ? \"containedCanvas\" : \"canvas\");\n            // window.addEventListener(\"resize\", aspectRatio);\n        }\n\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 334,
    "kind": "class",
    "name": "CanvasVisorSli",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx",
    "importStyle": "CanvasVisorSli",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 335,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/CanvasVisorSli.jsx~CanvasVisorSli#componentWillUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport BoxVisor from './BoxVisor';\nimport BoxSortableVisor from './BoxSortableVisor';\nimport { Col, Button } from 'react-bootstrap';\nimport { isSortableBox, isSlide } from '../../../common/utils';\nimport CanvasVisorDoc from './CanvasVisorDoc';\nimport CanvasVisorSli from './CanvasVisorSli';\nimport CSSTransitionGroup from 'react-transition-group/CSSTransitionGroup';\n\nexport default class ContainedCanvasVisor extends Component {\n\n    componentDidMount() {\n\n    }\n    render() {\n        let visorContent;\n        if (isSlide(this.props.containedViews[this.props.currentView].type)) {\n            visorContent = <CanvasVisorSli\n                navItems={this.props.navItems}\n                currentView={this.props.currentView}\n                containedViews={this.props.containedViews}\n                boxes={this.props.boxes}\n                boxSelected={this.props.boxSelected}\n                boxLevelSelected={this.props.boxLevelSelected}\n                toolbars={this.props.toolbars}\n                removeLastView={this.props.removeLastView}\n                richElementsState={this.props.richElementsState}\n                showCanvas={this.props.showCanvas}\n                canvasRatio={this.props.canvasRatio}\n                changeCurrentView={this.props.changeCurrentView}\n                title={this.props.title}\n                triggeredMarks={this.props.triggeredMarks}\n                viewsArray={this.props.viewsArray}/>;\n        }else{\n            visorContent = <CanvasVisorDoc\n                navItems={this.props.navItems}\n                containedViews={this.props.containedViews}\n                currentView={this.props.currentView}\n                boxes={this.props.boxes}\n                boxSelected={this.props.boxSelected}\n                boxLevelSelected={this.props.boxLevelSelected}\n                toolbars={this.props.toolbars}\n                removeLastView={this.props.removeLastView}\n                richElementsState={this.props.richElementsState}\n                showCanvas={this.props.showCanvas}\n                changeCurrentView={this.props.changeCurrentView}\n                title={this.props.title}\n                triggeredMarks={this.props.triggeredMarks}\n                viewsArray={this.props.viewsArray}/>;\n        }\n        return (\n            /* jshint ignore:start */\n            <CSSTransitionGroup\n                transitionName={{\n                    enter: 'enter',\n                    leave: 'leave',\n                    appear: 'appear',\n                }}\n                transitionAppear\n                transitionAppearTimeout={500}\n                transitionEnterTimeout={500}\n                transitionLeaveTimeout={300}>\n                {visorContent}\n            </CSSTransitionGroup>\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.boxSelected !== -1) {\n            this.setState({ showTitle: false });\n        }\n        document.getElementById('contained_maincontent').scrollTop = 0;\n\n    }\n\n    componentDidUpdate() {\n        window.MathJax.Hub.Queue([\"Typeset\", window.MathJax.Hub]);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 341,
    "kind": "class",
    "name": "ContainedCanvasVisor",
    "memberof": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx",
    "importStyle": "ContainedCanvasVisor",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 343,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor#render",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/ContainedCanvasVisor.jsx~ContainedCanvasVisor#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport { Tooltip, OverlayTrigger, Breadcrumb, BreadcrumbItem, Button } from 'react-bootstrap';\nimport i18n from 'i18next';\nimport { isView, isContainedView } from '../../../common/utils';\n\nexport default class HeaderVisor extends Component {\n\n    /*\n     * This method is used to calculate actual position for title indexes\n     * It is used the array of titles, the actual position in the iteration, and the level stored in nav properties\n     */\n    getActualIndex(size = 1, level = 0) {\n        // Default values are stored in this variables\n        let actual_parent = this.props.navItems[this.props.navItem.parent];\n        let actual_level = this.props.navItem;\n        // Equal size to the index of level\n        size = size - 1;\n\n        if (size === undefined || level === undefined || this.props.titles.length === 0) {\n            // This happens when you are in a root element\n\n            return \"\";\n\n        } else if (size === level) {\n            // This happens when you are in the first level\n            let actual_index = (actual_parent.children.indexOf(actual_level.id));\n            if (actual_index !== -1) {\n                return (actual_index + 1) + \". \";\n            }\n        } else {\n            // This happens when you have several sections in the array\n            // You iterate inversely in the array until you get to the level stored in nav properties\n            let actual_index;\n            let interating_level = level + 1;\n\n            for (let n = actual_level.level; interating_level < n; n--) {\n                actual_level = actual_parent;\n                actual_parent = this.props.navItems[actual_level.parent];\n            }\n\n            let final_level = actual_parent.children.indexOf(actual_level.id) + 1;\n            if (actual_parent !== undefined && actual_parent.children !== undefined) {\n                return final_level + \". \";\n            }\n            return \"\";\n\n        }\n        return \"\";\n    }\n\n    render() {\n\n        let titles = this.props.titles || [];\n        let element = !isView(this.props.currentView) ? this.props.containedViews[this.props.currentView] : this.props.navItems[this.props.currentView];\n        let currentStatus = element.header ? element.header.display : undefined;\n        let docTitle = element.name;\n        let subTitle = i18n.t('subtitle');\n        let pagenumber = element.unitNumber;\n        if (element !== undefined && element.header) {\n            docTitle = element.header.elementContent.documentTitle !== \"\" && (element.header.elementContent.documentTitle !== element.name) ? element.header.elementContent.documentTitle : element.name;\n            subTitle = element.header.elementContent.documentSubTitle !== \"\" && (element.header.elementContent.documentSubTitle !== i18n.t('subtitle')) ? element.header.elementContent.documentSubTitle : i18n.t('subtitle');\n            pagenumber = element.header.elementContent.numPage !== \"\" && (element.header.elementContent.numPage !== element.unitNumber) ? element.header.elementContent.numPage : element.unitNumber;\n        }\n\n        let content;\n        let unidad = \"\";\n\n        // breadcrumb\n        if(!isContainedView(this.props.currentView)) {\n            if (currentStatus !== undefined) {\n                if (currentStatus.breadcrumb === 'reduced') {\n                    let titleList = this.props.titles;\n\n                    let actualTitle = titleList[titleList.length - 1];\n                    unidad = titleList[0];\n                    content = React.createElement(\"div\", { className: \"subheader\" },\n                        React.createElement(Breadcrumb, { style: { margin: 0, backgroundColor: 'inherit' } },\n                            titleList.map((item, index) => {\n                                if (index !== titleList.length) {\n                                    return React.createElement(BreadcrumbItem, { key: index }, item);\n                                }\n                                return null;\n                            })\n                        )\n                    );\n                }\n            }\n        }\n\n        return (\n            /* jshint ignore:start */\n\n            <div className=\"title\" onClick={(e) => {\n                this.props.onShowTitle();\n                e.stopPropagation(); }}>\n                <div style={{ backgroundColor: 'white', display: 'initial' }}>\n                    <div className={this.props.showButtons ? \"caja selectedTitle selectedBox\" : \"caja\"}>\n                        <div className=\"cab\"\n                            style={{ backgroundColor: 'transparent', visibility: (currentStatus === 'hidden') ? 'hidden' : 'inherit' }}>\n                            <div className=\"cabtabla_numero\"\n                                contentEditable={false}\n                                suppressContentEditableWarning\n                                style={{ display: (currentStatus.pageNumber === 'hidden') ? 'none' : 'block' }}\n                                onBlur={e => {\n                                    // this.props.onUnitNumberChanged(this.props.navItem.id, parseInt(e.target.innerText, 10));\n                                }}\n                            >{pagenumber}</div>\n                            <div className=\"tit_ud_cap\">\n                                {/* Course title*/}\n                                <h1 style={{ display: (currentStatus.courseTitle === 'hidden') ? 'none' : 'block' }}>{this.props.courseTitle}</h1>\n                                {/* NavItem title */}\n                                <h2 style={{ display: (currentStatus.documentTitle === 'hidden') ? 'none' : 'block' }}>{docTitle}</h2>\n                                {/* NavItem subtitle */}\n                                <h3 style={{ display: (currentStatus.documentSubTitle === 'hidden') ? 'none' : 'block' }}>{subTitle}</h3>\n\n                                {/* breadcrumb */}\n                                <div className=\"contenido\" style={{ display: (currentStatus.breadcrumb === 'hidden') ? 'none' : 'block' }}>\n                                    { content }\n                                </div>\n                            </div>\n                            {/* <div className=\"cabtabla_lapiz\">\n                                <img style={{display: 'none', visibility: 'inherit'}}\n                                    src=\"images/ico_alumno.gif\" alt=\"Alumno\"/>\n                                <div style={{display: 'none'}} id=\"alumno2\"> Alumno</div>\n                            </div>*/}\n                            <div style={{ display: 'none' }} className=\"clear\" />\n                        </div>\n                    </div>\n                    <br style={{ clear: 'both', visibility: 'inherit' }}/>\n                </div>\n            </div>\n            /* jshint ignore:end */\n        );\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "HeaderVisor",
    "memberof": "DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx~HeaderVisor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx",
    "importStyle": "HeaderVisor",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "getActualIndex",
    "memberof": "DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx~HeaderVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx~HeaderVisor#getActualIndex",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 1,
        "defaultValue": "1"
      },
      {
        "name": "level",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx~HeaderVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/HeaderVisor.jsx~HeaderVisor#render",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/canvas/PluginPlaceholderVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport BoxVisor from './BoxVisor';\nimport { isBox, isSortableBox, isView, isSortableContainer, isAncestorOrSibling } from '../../../common/utils';\n\nexport default class PluginPlaceholderVisor extends Component {\n    render() {\n        let container = this.props.parentBox.sortableContainers[this.props.pluginContainer];\n        let className = \"drg\" + this.props.pluginContainer;\n        if(this.props.boxLevelSelected - this.props.parentBox.level === 1 &&\n           isAncestorOrSibling(this.props.parentBox.id, this.props.boxSelected, this.props.boxes)) {\n            className += \" childBoxSelected\";\n        }\n        return (\n            /* jshint ignore:start */\n            <div style={\n                Object.assign({}, {\n                    width: \"100%\",\n                    height: container.height === 'auto' ? container.height : container.height + 'px',\n                    minHeight: '35px',\n                    textAlign: 'center',\n                    lineHeight: '100%',\n                    boxSizing: 'border-box',\n                    position: 'relative',\n                    display: 'table',\n                }, container.style)\n            }\n            id={this.props.pluginContainer}\n            className={className}>\n                {container.colDistribution.map((col, i) => {\n                    if (container.cols[i]) {\n                        return (<div key={i}\n                            style={{ width: col + \"%\", height: '100%', display: \"table-cell\", verticalAlign: \"top\" }}>\n                            {container.cols[i].map((row, j) => {\n                                return (<div key={j}\n                                    style={{ width: \"100%\", height: row + \"%\", position: 'relative' }}\n                                >\n                                    {container.children.map((idBox, index) => {\n                                        if (this.props.boxes[idBox].col === i && this.props.boxes[idBox].row === j) {\n                                            return (<BoxVisor id={idBox}\n                                                key={index}\n                                                boxes={this.props.boxes}\n                                                boxSelected={this.props.boxSelected}\n                                                boxLevelSelected={this.props.boxLevelSelected}\n                                                containedViewSelected={this.props.containedViewSelected}\n                                                toolbars={this.props.toolbars}\n                                                lastActionDispatched={this.props.lastActionDispatched}\n                                                onBoxLevelIncreased={this.props.onBoxLevelIncreased}\n                                                onBoxMoved={this.props.onBoxMoved}\n                                                onBoxResized={this.props.onBoxResized}\n                                                onBoxesInsideSortableReorder={this.props.onBoxesInsideSortableReorder}\n                                                onSortableContainerResized={this.props.onSortableContainerResized}\n                                                onBoxDeleted={this.props.onBoxDeleted}\n                                                onBoxDropped={this.props.onBoxDropped}\n                                                onBoxModalToggled={this.props.onBoxModalToggled}\n                                                onVerticallyAlignBox={this.props.onVerticallyAlignBox}\n                                                onTextEditorToggled={this.props.onTextEditorToggled}/>);\n                                        } else if (index === container.children.length - 1) {\n                                            return (<span><br/><br/></span>);\n                                        }\n                                        return null;\n                                    })}\n                                    {container.children.length === 0 ? (<span><br/><br/></span>) : \"\"}\n                                </div>);\n                            })}\n                        </div>);\n                    }\n                    return null;\n                })}\n            </div>\n            /* jshint ignore:end */\n        );\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/canvas/PluginPlaceholderVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 351,
    "kind": "class",
    "name": "PluginPlaceholderVisor",
    "memberof": "DALI_EDITOR/_visor/components/canvas/PluginPlaceholderVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/canvas/PluginPlaceholderVisor.jsx~PluginPlaceholderVisor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/canvas/PluginPlaceholderVisor.jsx",
    "importStyle": "PluginPlaceholderVisor",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/canvas/PluginPlaceholderVisor.jsx~PluginPlaceholderVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/canvas/PluginPlaceholderVisor.jsx~PluginPlaceholderVisor#render",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport VisorNavSection from './VisorNavSection';\nimport { isSlide, isPage, isSection } from '../../../common/utils';\n\nexport default class SideNavVisor extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let navItemSelected = this.getCurrentNavItem(this.props.currentViews);\n\n        return(\n            /* jshint ignore:start */\n            <div id=\"sidebar-wrapper\">\n                <ul className=\"sidebar-nav\">\n                    <li className=\"sidebar-brand\">\n                        <h1>{this.props.courseTitle}</h1>\n                    </li>\n                    {this.props.navItemsIds.map(page => {\n                        let level = this.props.navItemsById[page].level;\n                        let marginPage = level * 10 + 10 + \"px\";\n                        if(level === 1) {\n                            if (isSection(page)) {\n                                return (<VisorNavSection display\n                                    key={page}\n                                    pageName={page}\n                                    navItemsById={this.props.navItemsById}\n                                    navItemSelected={navItemSelected}\n                                    changeCurrentView={(pageNum) => {this.props.changeCurrentView(pageNum);}} />);\n                            }\n                            return (<li key={page}\n                                onClick={(e)=>{this.props.changeCurrentView(page);}}\n                                className=\"visorNavListEl\">\n                                <a style={{ paddingLeft: marginPage }}\n                                    className={navItemSelected === page ? \"indexElementTitle selectedNavItemVisor\" : \"indexElementTitle\"}\n                                    href=\"#\">\n                                    {isSlide(this.props.navItemsById[page].type) ? (<i className=\"material-icons\">slideshow</i>) : (<i className=\"material-icons\">insert_drive_file</i>)}\n                                    <span>{this.props.navItemsById[page].name}</span>\n                                    {/* this.props.navItemsById[page].name*/}\n\n                                </a>\n                            </li>);\n\n                        }\n                        return null;\n                    })}\n\n                </ul>\n            </div>\n            /* jshint ignore:end */\n        );\n    }\n    getCurrentNavItem(ids) {\n        let navs = ids.filter(isPage);\n        return navs.length > 0 ? navs[navs.length - 1] : 0;\n        /* return ids.reduce(e=>{\n            if (isPage(e)){\n                console.log(e)\n                return e;\n            }\n        });*/\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 354,
    "kind": "class",
    "name": "SideNavVisor",
    "memberof": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx~SideNavVisor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx",
    "importStyle": "SideNavVisor",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 355,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx~SideNavVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx~SideNavVisor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx~SideNavVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx~SideNavVisor#render",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "getCurrentNavItem",
    "memberof": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx~SideNavVisor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/SideNavVisor.jsx~SideNavVisor#getCurrentNavItem",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport i18n from 'i18next';\nimport Dali from './../../../core/main';\nimport { isSlide, isSection } from '../../../common/utils';\n\nexport default class VisorNavSection extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            toggled: true,\n        };\n    }\n\n    render() {\n        let children = this.props.navItemsById[this.props.pageName].children;\n        let marginUl = (this.props.navItemsById[this.props.pageName].level * 10) + \"px\";\n        let name = this.props.navItemsById[this.props.pageName].name;\n        let classes = this.props.display ? \"visorNavListEl\" : \"visorNavListEl hiddenNavVisor\";\n        return (\n            /* jshint ignore:start */\n            <ul className={classes}>\n                <li className=\"visorNavListEl\" onClick={(e)=>{\n                    if (Dali.Config.sections_have_content) {\n                        this.props.changePage(this.props.pageName);\n                    } else {\n                        this.setState({ toggled: !this.state.toggled });\n                    }}}>\n                    <a className={this.props.navItemSelected === this.props.pageName ? \"indexElementTitle visorNavListEl selectedNavItemVisor\" : \"indexElementTitle visorNavListEl\"} style={{ paddingLeft: marginUl }} href=\"#\">\n                        {this.state.toggled ?\n                            (<i onClick={(e)=>{this.setState({ toggled: !this.state.toggled });}} className=\"material-icons\">keyboard_arrow_down</i>) : (<i onClick={(e)=>{this.setState({ toggled: !this.state.toggled });}} className=\"material-icons\">keyboard_arrow_right</i>)}\n\n                        <span> {name} </span>\n                    </a>\n                </li>\n\n                { children.map(page => {\n                    let margin = this.props.navItemsById[page].level * 10 + 10 + \"px\";\n                    if (isSection(page)) {\n                        return (<VisorNavSection display={this.state.toggled}\n                            key={page}\n                            pageName={page}\n                            navItemSelected={this.props.navItemSelected}\n                            navItemsById={this.props.navItemsById}\n                            changeCurrentView={(pageNum) => {this.props.changeCurrentView(pageNum);}} />);\n                    }\n                    return (<li key={page}\n                        onClick={(e)=>{this.props.changeCurrentView(page);}}\n                        className={this.state.toggled ? \"visorNavListEl\" : \"visorNavListEl hiddenNavVisor\"}>\n                        <a style={{ paddingLeft: margin }}\n                            className={this.props.navItemSelected === page ? \"indexElementTitle selectedNavItemVisor\" : \"indexElementTitle\"}\n                            href=\"#\">\n                            {isSlide(this.props.navItemsById[page].type) ? (<i className=\"material-icons\">slideshow</i>) : (<i className=\"material-icons\">insert_drive_file</i>)}\n                            <span>{this.props.navItemsById[page].name}</span>\n                        </a>\n                    </li>);\n\n                })\n                }\n\n            </ul>\n        /* jshint ignore:end */\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "class",
    "name": "VisorNavSection",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx~VisorNavSection",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx",
    "importStyle": "VisorNavSection",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 360,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx~VisorNavSection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx~VisorNavSection#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx~VisorNavSection",
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx~VisorNavSection#state",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"toggled\": boolean}"
      ]
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx~VisorNavSection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorNavSection.jsx~VisorNavSection#render",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport i18n from 'i18next';\nimport Dali from './../../../core/main';\nimport { isPage } from '../../../common/utils';\nimport { toggleFullScreen, isFullScreenOn, fullScreenListener } from '../../../common/common_tools';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n/**\n * Visor's navigation buttons\n */\nexport default class VisorPlayer extends Component {\n    constructor(props) {\n        super(props);\n        /**\n         * Component's initial state\n         * @type {{isFullScreenOn: *}}\n         */\n        this.state = {\n            isFullScreenOn: isFullScreenOn(),\n        };\n        /**\n         * Binded function\n         */\n        this.checkFullScreen = this.checkFullScreen.bind(this);\n    }\n\n    /**\n     * Render React Component\n     * @returns {code}\n     */\n    render() {\n\n        let navItemsIds = this.props.navItemsIds;\n        if (!Dali.Config.sections_have_content) {\n            navItemsIds = this.props.navItemsIds.filter(this.isntSection);\n        }\n\n        let navItemsById = this.props.navItemsById;\n        let navItemSelected = this.getCurrentNavItem(this.props.currentViews);\n\n        let index = navItemsIds.indexOf(navItemSelected);\n        let maxIndex = navItemsIds.length;\n\n        return(\n            <div id=\"player\">\n                <OverlayTrigger placement=\"bottom\" delayShow={50} trigger={['hover']} overlay={this.createTooltip(\"first\", i18n.t(\"player.First\"))}>\n                    <Button className=\"playerButton\"\n                        bsStyle=\"primary\"\n                        disabled={maxIndex === 0}\n                        onClick={(e)=>{this.props.changeCurrentView(navItemsIds[0]);}}>\n                        <i className=\"material-icons\">first_page</i>\n                    </Button>\n                </OverlayTrigger>\n\n                <OverlayTrigger placement=\"bottom\" delayShow={0} trigger={['hover']} rootClose overlay={this.createTooltip(\"previous\", i18n.t(\"player.Previous\"))}>\n                    <Button className=\"playerButton\"\n                        bsStyle=\"primary\"\n                        disabled={index === 0 || maxIndex === 0}\n                        onClick={(e)=>{this.props.changeCurrentView(navItemsIds[Math.max(index - 1, 0)]);}}>\n                        <i className=\"material-icons\">chevron_left</i>\n                    </Button>\n                </OverlayTrigger>\n                <OverlayTrigger placement=\"bottom\" delay={0} trigger={['hover']} rootClose overlay={this.createTooltip(\"next\", i18n.t(\"player.Next\"))}>\n                    <Button className=\"playerButton\"\n                        bsStyle=\"primary\"\n                        disabled={index === maxIndex - 1 || maxIndex === 0}\n                        onClick={(e)=>{this.props.changeCurrentView(navItemsIds[Math.min(index + 1, maxIndex - 1)]);}}>\n                        <i className=\"material-icons\">chevron_right</i>\n                    </Button>\n                </OverlayTrigger>\n                <OverlayTrigger placement=\"bottom\" delay={0} trigger={['hover']} rootClose overlay={this.createTooltip(\"last\", i18n.t(\"player.Last\"))}>\n                    <Button className=\"playerButton\"\n                        bsStyle=\"primary\"\n                        disabled={maxIndex === 0}\n                        onClick={(e)=>{this.props.changeCurrentView(navItemsIds[maxIndex - 1]);}}>\n                        <i className=\"material-icons\">last_page</i>\n                    </Button>\n                </OverlayTrigger>\n                <OverlayTrigger placement=\"bottom\" delay={0} trigger={['hover']} rootClose overlay={this.createTooltip(\"fullscreen\", i18n.t(\"messages.fullscreen\"))}>\n                    <Button className=\"playerButton\"\n                        bsStyle=\"primary\"\n                        onClick={(e)=>{toggleFullScreen(); this.setState({ isFullScreenOn: isFullScreenOn() });}}>\n                        {this.state.isFullScreenOn ?\n                            (<i className=\"material-icons\">fullscreen_exit</i>) :\n                            (<i className=\"material-icons\">fullscreen</i>)}\n                    </Button>\n                </OverlayTrigger>\n            </div>\n        );\n    }\n\n    isntSection(page) {\n        return (page.indexOf(\"se\") === -1);\n    }\n\n    createTooltip(id, message) {\n        return(<Tooltip id={id}>{message}</Tooltip>);\n    }\n\n    getCurrentNavItem(ids) {\n        return ids.reduce(e=>{\n            if (isPage(e)) {\n                return e;\n            }\n            return null;\n        });\n    }\n\n    /**\n     * Adds fullscreen listener\n     */\n    componentDidMount() {\n        fullScreenListener(this.checkFullScreen, true);\n\n    }\n\n    /**\n     * Removes fullscreen listener\n     */\n    componentWillUnmount() {\n        fullScreenListener(this.checkFullScreen, false);\n    }\n\n    /**\n     * Checks if browser's in fullscreen mode and updates state\n     */\n    checkFullScreen() {\n        this.setState({ isFullScreenOn: isFullScreenOn() });\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "class",
    "name": "VisorPlayer",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx",
    "importStyle": "VisorPlayer",
    "description": "Visor's navigation buttons",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 365,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 366,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#state",
    "access": "public",
    "description": "Component's initial state",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "{isFullScreenOn: *}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 368,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#render",
    "access": "public",
    "description": "Render React Component",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{code}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "code"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 369,
    "kind": "method",
    "name": "isntSection",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#isntSection",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "page",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "createTooltip",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#createTooltip",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "getCurrentNavItem",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#getCurrentNavItem",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#componentDidMount",
    "access": "public",
    "description": "Adds fullscreen listener",
    "lineNumber": 114,
    "params": [],
    "return": null
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#componentWillUnmount",
    "access": "public",
    "description": "Removes fullscreen listener",
    "lineNumber": 122,
    "params": [],
    "return": null
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "checkFullScreen",
    "memberof": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/navigation/VisorPlayer.jsx~VisorPlayer#checkFullScreen",
    "access": "public",
    "description": "Checks if browser's in fullscreen mode and updates state",
    "lineNumber": 129,
    "params": [],
    "return": null
  },
  {
    "__docId__": 375,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { isContainedView, isPage, isSection } from '../../../common/utils';\nimport { aspectRatio } from '../../../common/common_tools';\nimport Config from './../../../core/config';\nimport * as API from './../../../core/scorm/scorm_utils';\n\nexport default class ScormComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            scores: [],\n            visited: [],\n        };\n        this.onUnload = this.onUnload.bind(this);\n        this.onLoad = this.onLoad.bind(this);\n    }\n    getFirstPage() {\n        let navItems = this.props.navItemsIds || [];\n        let bookmark = 0;\n        for (let i = 0; i < navItems.length; i++) {\n            if (Config.sections_have_content ? isSection(navItems[i]) : isPage(navItems[i])) {\n                bookmark = navItems[i];\n                break;\n            }\n        }\n        return bookmark;\n    }\n    componentWillReceiveProps(nextProps) {\n        if (this.props.currentView !== nextProps.currentView) {\n            if(!isContainedView(nextProps.currentView)) {\n                API.changeLocation(nextProps.currentView);\n            }\n            if(!isContainedView(this.props.currentView)) {\n                this.savePreviousAndUpdateState();\n                API.setFinalScore(this.state.scores, this.state.visited, this.props.globalConfig.trackProgress || false);\n            }\n        }\n    }\n    savePreviousAndUpdateState() {\n        let score = API.savePreviousResults(this.props.currentView, this.props.navItemsIds, this.props.globalConfig.trackProgress || false);\n        let previousScores = Object.assign([], this.state.scores);\n        previousScores[score.index] = score.score;\n        let previousVisited = Object.assign([], this.state.visited);\n        previousVisited[score.index] = score.visited;\n        this.setState({ scores: previousScores, visited: previousVisited }); // Careful with this pattern\n    }\n    render() {\n        return null;\n    }\n    componentDidMount() {\n        window.addEventListener(\"load\", this.onLoad);\n        window.addEventListener(\"beforeunload\", this.onUnload);\n    }\n    onLoad(event) {\n        let init = API.init();\n        let bookmark = (init && init.bookmark && init.bookmark !== '') ? init.bookmark : this.getFirstPage();\n        this.props.changeCurrentView(bookmark);\n        let initState = API.changeInitialState();\n        this.setState(initState);\n    }\n\n    onUnload(event) {\n        if (!isContainedView(this.props.currentView)) {\n            this.savePreviousAndUpdateState();\n        }\n        API.setFinalScore(this.state.scores, this.state.visited, this.props.globalConfig.trackProgress || false);\n        API.finish();\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"beforeunload\", this.onUnload);\n        window.removeEventListener(\"onload\", this.onLoad);\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 376,
    "kind": "class",
    "name": "ScormComponent",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx",
    "importStyle": "ScormComponent",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 377,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#state",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"scores\": *, \"visited\": *}"
      ]
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "getFirstPage",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#getFirstPage",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "savePreviousAndUpdateState",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#savePreviousAndUpdateState",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#render",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "onLoad",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#onLoad",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "onUnload",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#onUnload",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/components/scorm/ScormComponent.jsx~ScormComponent#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/containers/EditorVisor.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Grid, Row, Col, Button } from 'react-bootstrap';\nimport CanvasVisor from './../components/canvas/CanvasVisor';\nimport ContainedCanvasVisor from './../components/canvas/ContainedCanvasVisor';\nimport SideNavVisor from './../components/navigation/SideNavVisor';\nimport VisorPlayer from './../components/navigation/VisorPlayer';\n\nimport { isContainedView, isView } from '../../common/utils';\nimport ScormComponent from './../components/scorm/ScormComponent';\nimport i18n from '../../common/i18n';\n\nrequire('es6-promise').polyfill();\nrequire('typeface-ubuntu');\nrequire('typeface-source-sans-pro');\nrequire('./../../sass/style.scss');\nrequire('./../../core/visor_entrypoint');\n\n/**\n * Visor app main component\n */\nexport default class Visor extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentView: [this.getCurrentView(Dali.State.navItemSelected, Dali.State.containedViewSelected)], /* This is the actual view rendering*/\n            triggeredMarks: [],\n            richElementState: {},\n            backupElementStates: {},\n            toggledSidebar: Dali.State.globalConfig.visorNav.sidebar ? Dali.State.globalConfig.visorNav.sidebar : (Dali.State.globalConfig.visorNav.sidebar === undefined),\n            fromScorm: Dali.State.fromScorm,\n        };\n\n    }\n\n    componentWillUnmount() {\n        Dali.API_Private.cleanListener(Dali.API_Private.events.markTriggered);\n    }\n    componentWillMount() {\n        // Get the event received check if exist and modify the state\n        // Add a queue of marks fired [{id: value, CurrentState: PENDING, TRIGGERED, HOLD, DONE}] or array\n        // Whenever the mark is ready trigger it\n        this.mountFunction();\n    }\n\n    mountFunction() {\n        let richElementsState = this.state.richElementState;\n\n        // Marks Global Listener\n        Dali.API_Private.listenEmission(Dali.API_Private.events.markTriggered, e=>{\n            let marks = this.getAllMarks();\n            let triggered_event = e.detail;\n            let triggered_marks = this.getTriggeredMarks(marks, triggered_event);\n\n            // clearMark | If actual Triggered Mark have passed e.detail.value and actual value is different or actual element doesn't need to clear the value\n            triggered_marks = this.clearTriggeredValues(triggered_event, triggered_marks);\n\n            // Just try to trigger if mark exists\n            if(this.containsMarkValue(marks, triggered_event.value)) {\n                // And is triggereable (not pending)\n                let isTriggerable = this.isTriggereableMark(triggered_event, triggered_marks);\n                if(isTriggerable) {\n                    triggered_marks = this.putMarksOnHold(triggered_marks, triggered_event);\n                    // If mark is storable (if make any sense to store to render something different like a video) do it else, don't\n                    if(triggered_event.stateElement) {\n                        let new_mark = {};\n                        new_mark[triggered_event.id] = triggered_event.value;\n                        this.setState({\n                            triggeredMarks: triggered_marks,\n                            richElementState: Object.assign({}, richElementsState, new_mark),\n                        });\n                    }else{\n                        triggered_marks.forEach((mark, index)=>{\n                            if(mark.id === isTriggerable.id) {\n                                triggered_marks[index] = isTriggerable;\n                            }\n                        });\n\n                        this.setState({ triggeredMarks: triggered_marks });\n\n                    }\n                }\n            } else if(triggered_event.stateElement) {\n                let backupElementStates = this.state.backupElementStates;\n                let new_mark = {};\n                new_mark[triggered_event.id] = triggered_event.value;\n                this.setState({\n                    backupElementStates: Object.assign({}, backupElementStates, new_mark),\n                });\n            }\n\n        });\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        // reset marks when navigating between main sections\n        if(this.state.currentView.length !== nextState.currentView.length && isView(nextState.currentView[nextState.currentView.length - 1])) {\n            this.setState({ triggeredMarks: [] });\n        }\n\n        if(nextState.triggeredMarks.length !== 0 && this.returnTriggereableMark(nextState.triggeredMarks)) {\n            let newMark = this.returnTriggereableMark(nextState.triggeredMarks);\n\n            nextState.triggeredMarks.forEach(mark=>{\n                if(newMark.id === mark.id) {\n                    mark.currentState = 'TRIGGERED';\n                    mark.viewOrigin = this.state.currentView[this.state.currentView.length - 1];\n                }\n                return mark;\n            });\n\n            if(newMark.connectMode === 'new' || newMark.connectMode === \"existing\") {\n\n                let array_trigger_mark = this.santinizeViewsArray(nextState.triggeredMarks, nextState.currentView.concat([newMark.connection]));\n                let newcv = array_trigger_mark.length > 0 && array_trigger_mark[array_trigger_mark.length - 1] && isContainedView(array_trigger_mark[array_trigger_mark.length - 1]) ? array_trigger_mark[array_trigger_mark.length - 1] : 0;\n\n                this.setState({\n                    containedViewSelected: newcv,\n                    currentView: array_trigger_mark,\n                    triggeredMarks: nextState.triggeredMarks,\n                });\n\n            } else if(newMark.connectMode === \"external\") {\n\n                let win = window.open(newMark.connection, '_blank');\n                win.focus();\n                let shiftExternal = nextState.triggeredMarks;\n                shiftExternal.shift();\n                this.setState({\n                    triggeredMarks: shiftExternal,\n                });\n\n            }\n        }\n\n    }\n\n    render() {\n        if (window.State) {\n            Dali.State = window.State;\n        }\n\n        let boxes = Dali.State.boxesById;\n        let boxSelected = Dali.State.boxSelected;\n        let navItems = Dali.State.navItemsById;\n        let navItemsIds = Dali.State.navItemsIds;\n        let containedViews = Dali.State.containedViewsById;\n        let toolbars = Dali.State.toolbarsById;\n        let globalConfig = Dali.State.globalConfig;\n        let title = globalConfig.title;\n        let ratio = globalConfig.canvasRatio;\n        let visorNav = globalConfig.visorNav;\n        let wrapperClasses = this.state.toggledSidebar ? \"visorwrapper toggled\" : \"visorwrapper\";\n        let toggleIcon = this.state.toggledSidebar ? \"keyboard_arrow_left\" : \"keyboard_arrow_right\";\n        let toggleColor = this.state.toggledSidebar ? \"toggleColor\" : \"\";\n        let isCV = isContainedView(this.state.currentView);\n        let isSlide = isCV && containedViews[this.getLastCurrentViewElement()] === \"slide\" ||\n        !isCV && navItems[this.getLastCurrentViewElement()] === \"slide\" ?\n            \"pcw_slide\" : \"pcw_doc\";\n\n        return (\n            <div id=\"app\"\n                className={wrapperClasses} >\n                <SideNavVisor\n                    changeCurrentView={(page)=> {this.changeCurrentView(page);}}\n                    courseTitle={title}\n                    show={visorNav.sidebar}\n                    currentViews={this.state.currentView}\n                    navItemsById={navItems}\n                    navItemsIds={navItemsIds}\n                    toggled={this.state.toggledSidebar}/>\n                <div id=\"page-content-wrapper\"\n                    className={isSlide}\n                    style={{ height: '100%' }}>\n                    <Grid fluid\n                        style={{ height: '100%' }}>\n                        <Row style={{ height: '100%' }}>\n                            <Col lg={12} style={{ height: '100%' }}>\n                                {visorNav.player && !isContainedView(this.getLastCurrentViewElement()) ? (<VisorPlayer show={visorNav.player}\n                                    changeCurrentView={(page)=> {this.changeCurrentView(page);}}\n                                    currentViews={this.state.currentView}\n                                    navItemsById={navItems}\n                                    navItemsIds={navItemsIds}/>) : null}\n                                {visorNav.sidebar ? (<Button id=\"visorNavButton\"\n                                    className={toggleColor}\n                                    bsStyle=\"primary\"\n                                    onClick={e => {this.setState({ toggledSidebar: !this.state.toggledSidebar });}}>\n                                    <i className=\"material-icons\">{toggleIcon}</i>\n                                </Button>) : null}\n\n                                { !isContainedView(this.getLastCurrentViewElement()) ?\n                                    (<CanvasVisor\n                                        boxes={boxes}\n                                        boxSelected={boxSelected}\n                                        changeCurrentView={(element) => {this.changeCurrentView(element);}}\n                                        canvasRatio={ratio}\n                                        containedViews={containedViews}\n                                        currentView={this.getLastCurrentViewElement()}\n                                        navItems={navItems}\n                                        removeLastView={()=>{this.removeLastView();}}\n                                        richElementsState={this.state.richElementState}\n                                        showCanvas={this.getLastCurrentViewElement().indexOf(\"cv-\") === -1}\n                                        title={title}\n                                        toolbars={toolbars}\n                                        triggeredMarks={this.state.triggeredMarks}\n                                        viewsArray={this.state.currentView}\n                                    />) :\n                                    (<ContainedCanvasVisor\n                                        boxes={boxes}\n                                        boxSelected={boxSelected}\n                                        changeCurrentView={(element) => {this.changeCurrentView(element);}}\n                                        canvasRatio={ratio}\n                                        containedViews={containedViews}\n                                        currentView={this.getLastCurrentViewElement()}\n                                        navItems={navItems}\n                                        toolbars={toolbars}\n                                        title={title}\n                                        triggeredMarks={this.state.triggeredMarks}\n                                        showCanvas={this.getLastCurrentViewElement().indexOf(\"cv-\") !== -1}\n                                        removeLastView={()=>{this.removeLastView();}}\n                                        richElementsState={this.state.richElementState}\n                                        viewsArray={this.state.currentView}\n                                    />)\n                                }\n                            </Col>\n                        </Row>\n                    </Grid>\n                </div>\n                {this.state.fromScorm ? (\n                    <ScormComponent\n                        navItems={navItems}\n                        navItemsIds={navItemsIds}\n                        currentView={this.getLastCurrentViewElement()}\n                        globalConfig={globalConfig}\n                        changeCurrentView={(el)=>{this.changeCurrentView(el);}}\n                    />) : (null)}\n            </div>\n\n        );\n    }\n\n    /**\n     * Get actualView REFACTOR: change name\n     * @returns {String} currentView\n     */\n    getLastCurrentViewElement() {\n        return this.state.currentView[this.state.currentView.length - 1];\n    }\n\n    /**\n     * Navigation main method\n     * @param {string} element - current Element to go\n     */\n    changeCurrentView(element) {\n        if (isContainedView(element)) {\n            this.setState({ currentView: [this.getCurrentView(this.state.navItemSelected, this.state.containedViewSelected), element] });\n        } else {\n            this.setState({ currentView: [element] });\n            if(this.state.currentView.length > 1) {\n                this.setState({ triggeredMarks: this.unTriggerLastMark(this.state.triggeredMarks),\n                    richElementState: this.getActualBoxesStates(this.state.backupElementStates, this.state.richElementState) });\n            }\n        }\n        this.mountFunction();\n\n    }\n\n    /**\n     * This is used to get initial view and make sure is either containedView or NavItem\n     * @param {string} NISelected - selected NavItem\n     */\n    getCurrentView(NIselected, CVselected) {\n        let currentView = (CVselected === 0) ? NIselected : CVselected;\n        return currentView;\n    }\n\n    /* Marks functions*/\n\n    /**\n     * Make sure if mark value exists\n     * @param {Array} - Array of marks\n     * @param {string}\n     * @return {boolean} -  whether the mark exists or not in the array\n     */\n    containsMarkValue(marks, mark_value) {\n        let exists = false;\n        marks.forEach(mark_element=>{\n            if(mark_element.value === mark_value) {\n                exists = true;\n            }\n        });\n        return exists;\n    }\n\n    /**\n     * Returns if any is there any triggerable mark\n     * @param triggeredMarks\n     * @returns Object Marks that are triggered\n     */\n    returnTriggereableMark(triggeredMarks) {\n        let isAnyTriggereableMark = false;\n        let canBeTriggered = true;\n        if(Array.isArray(triggeredMarks)) {\n            triggeredMarks.forEach(mark=>{\n                if (mark.currentState === 'TRIGGERED') {\n                    canBeTriggered = false;\n                }\n                if(canBeTriggered && mark.currentState === 'PENDING' && !isAnyTriggereableMark) {\n                    isAnyTriggereableMark = mark;\n                }\n            });\n        }\n        return isAnyTriggereableMark;\n    }\n\n    /**\n     * Whether if the mark is triggereable or not\n     * @param mark\n     * @param triggerable_marks\n     * @returns {boolean}\n     */\n    isTriggereableMark(mark, triggerable_marks) {\n        let isAnyTriggereableMark = false;\n        triggerable_marks.forEach(triggereable_mark=> {\n            if (triggereable_mark.currentState === 'PENDING' && triggereable_mark.value === mark.value && triggereable_mark.box_id === mark.id) {\n                if (!isAnyTriggereableMark) {\n                    isAnyTriggereableMark = triggereable_mark;\n                }\n            }\n\n            if (!mark.stateElement && triggereable_mark.value === mark.value && triggereable_mark.box_id === mark.id) {\n                if (!isAnyTriggereableMark) {\n                    isAnyTriggereableMark = triggereable_mark;\n                    isAnyTriggereableMark.currentState = \"PENDING\";\n                }\n            }\n        });\n        return isAnyTriggereableMark;\n    }\n\n    /**\n     * Change state of last mark triggered to done, this is used to go back\n     * @param state\n     * @returns {Array}\n     */\n    unTriggerLastMark(state) {\n        let new_array = state;\n        new_array.forEach(mark=>{\n            if(mark.currentState === 'TRIGGERED') {\n                mark.currentState = 'DONE';\n            }\n        });\n        return new_array;\n    }\n\n    /**\n     * Cleans Views Array\n     * @param triggeredMarks\n     * @param arrayViews\n     * @returns {*}\n     */\n    santinizeViewsArray(triggeredMarks, arrayViews) {\n        let final_array = arrayViews;\n\n        triggeredMarks.forEach(mark=>{\n            if(mark.currentState === \"DONE\" && final_array.indexOf(mark.connection) !== -1) {\n                final_array.splice(final_array.indexOf(mark.connection), 1);\n\n            }\n        });\n\n        return final_array;\n    }\n\n    /**\n     * Cleans used 'DONE' values in triggeredMarks array\n     * @param triggered_event\n     * @param triggeredMarks\n     * @returns {Array}\n     */\n    clearTriggeredValues(triggered_event, triggeredMarks) {\n        let clean_array = [];\n\n        if(triggeredMarks.length > 0) {\n            if(!triggered_event.stateElement) {\n                triggeredMarks.forEach(element=>{\n                    if(element.currentState !== 'DONE' || triggered_event.id !== element.box_id) {\n                        clean_array.push(element);\n                    }\n                });\n\n            } else {\n                triggeredMarks.forEach(element =>{\n                    if(element.currentState !== \"DONE\" || element.value === triggered_event.value || element.box_id !== triggered_event.id) {\n                        clean_array.push(element);\n                    }\n                });\n            }\n        }\n        return clean_array;\n    }\n\n    /**\n     * Get all marks triggered in the same event\n     * @param marks\n     * @param triggered_event\n     * @returns {Array}\n     */\n    getTriggeredMarks(marks, triggered_event) {\n        let state_marks = [];\n        let previously_triggered_marks = this.state.triggeredMarks;\n        if(previously_triggered_marks.length === 0) {\n            marks.forEach(mark_element=>{\n                if(mark_element.value === triggered_event.value && mark_element.box_id === triggered_event.id) {\n                    state_marks.push({\n                        currentState: \"PENDING\",\n                        viewOrigin: this.state.currentView[this.state.currentView.length - 1],\n                        id: mark_element.id,\n                        value: mark_element.value,\n                        connection: mark_element.connection,\n                        box_id: mark_element.box_id,\n                        connectMode: mark_element.connectMode,\n                    });\n                }\n            });\n        }else{\n            // return only triggered MARKS\n            state_marks = state_marks.concat(previously_triggered_marks);\n\n            marks.forEach(triggered_mark=>{\n                let is_different = true;\n                for(let n in state_marks) {\n                    if(state_marks[n].value === triggered_mark.value && state_marks[n].box_id === triggered_event.id) {\n                        is_different = false;\n                    }\n                }\n\n                if(is_different && triggered_event.value === triggered_mark.value && triggered_event.id === triggered_mark.box_id) {\n                    state_marks.push({\n                        currentState: \"PENDING\",\n                        viewOrigin: this.state.currentView[this.state.currentView.length - 1],\n                        id: triggered_mark.id,\n                        value: triggered_mark.value,\n                        connection: triggered_mark.connection,\n                        box_id: triggered_mark.box_id,\n                        connectMode: triggered_mark.connectMode,\n                    });\n                }\n\n            });\n        }\n\n        return state_marks;\n    }\n\n    /**\n     * Get all Mark of currentView\n     * @returns {Array}\n     */\n    getAllMarks() {\n        let currentView = this.state.currentView[this.state.currentView.length - 1];\n\n        let boxes = this.getAllRichDescendantBoxes(currentView);\n        let marks = [];\n        boxes.forEach(box=>{\n            Object.keys(Dali.State.toolbarsById[box].state.__marks).map(mark_element=>{\n                let mark_box = Dali.State.toolbarsById[box].state.__marks[mark_element];\n                mark_box.box_id = box;\n                marks.push(mark_box);\n            });\n        });\n        return marks;\n    }\n\n    putMarksOnHold(triggered_marks, mark_event) {\n        let anyTriggeredMarks = false;\n        let anyPendingMarks = false;\n\n        triggered_marks.forEach(t_mark=>{\n            if(t_mark.currentState === \"PENDING\") {\n                anyPendingMarks = true;\n            }\n            if(t_mark.currentState === \"TRIGGERED\") {\n                anyTriggeredMarks = true;\n            }\n        });\n\n        let origin_marks = [];\n        let markUntriggered = false;\n        if(anyTriggeredMarks && anyPendingMarks) {\n            triggered_marks.forEach(t_mark => {\n                if (t_mark.viewOrigin !== undefined && t_mark.currentState === 'HOLD') {\n                    origin_marks.push(t_mark.viewOrigin);\n                }\n\n                if (t_mark.currentState === 'TRIGGERED' && t_mark.viewOrigin !== undefined && origin_marks.indexOf(t_mark.viewOrigin) === -1) {\n                    origin_marks.push(t_mark.viewOrigin);\n                }\n            });\n\n            triggered_marks.forEach(t_mark=>{\n                if (t_mark.currentState === 'PENDING' && t_mark.viewOrigin !== undefined && origin_marks.indexOf(t_mark.viewOrigin) === -1) {\n                    markUntriggered = true;\n                }\n            });\n\n            if(markUntriggered) {\n                let newMarksArray = [];\n                triggered_marks.forEach(t_mark=>{\n                    if(t_mark.currentState === 'TRIGGERED') {\n                        t_mark.currentState = 'HOLD';\n                    }\n                    newMarksArray.push(t_mark);\n                });\n                return newMarksArray;\n            }\n            return triggered_marks;\n\n        }\n\n        return triggered_marks;\n\n    }\n\n    /**\n     * @param navItemID\n     * @returns {Array}\n     */\n    getAllRichDescendantBoxes(navItemID) {\n        let view = Dali.State.navItemsById[navItemID];\n        if (isContainedView(navItemID)) {\n            view = Dali.State.containedViewsById[navItemID];\n        }\n        let boxes = view.boxes;\n        let newBoxes = [];\n\n        let richBoxes = [];\n        Object.keys(Dali.State.boxesById).map(box=>{\n\n            if(boxes.indexOf(box) !== -1) {\n                newBoxes.push(box);\n\n                if(Object.keys(Dali.State.boxesById[box].children).length !== 0) {\n                    Object.keys(Dali.State.boxesById[box].sortableContainers).map(second_box=>{\n                        newBoxes = newBoxes.concat(Dali.State.boxesById[box].sortableContainers[second_box].children);\n                    });\n                }\n            }\n        });\n\n        newBoxes.forEach(final=>{\n            if(Dali.State.toolbarsById[final] && Dali.State.toolbarsById[final].config && Dali.State.toolbarsById[final].config.isRich) {\n                richBoxes.push(final);\n            }\n        });\n        return richBoxes;\n    }\n\n    /**\n     * Get the current state for selected box\n     * @param backup\n     * @param current\n     * @returns {*}\n     */\n    getActualBoxesStates(backup, current) {\n        let nextState = backup;\n        nextState[this.state.triggeredMarks[0].box_id] = current[this.state.triggeredMarks[0].box_id];\n        return nextState;\n    }\n\n    /**\n     * Remove last view from queue of views\n     */\n    removeLastView() {\n        let newViews = this.state.currentView.slice(0, -1);\n        if (newViews.length > 0) {\n            let lastView = newViews[newViews.length - 1];\n            if (lastView.indexOf(\"cv-\") === -1) {\n                this.setState({ containedViewSelected: 0 });\n            }\n        }\n        this.setState({\n            currentView: newViews,\n            triggeredMarks: this.unTriggerLastMark(this.state.triggeredMarks),\n            richElementState: this.getActualBoxesStates(this.state.backupElementStates, this.state.richElementState),\n        });\n    }\n\n}\n\nReactDOM.render((<Visor />), document.getElementById('root'));\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/containers/EditorVisor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 390,
    "kind": "class",
    "name": "Visor",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/containers/EditorVisor.jsx",
    "importStyle": "Visor",
    "description": "Visor app main component",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 391,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#state",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{\"currentView\": *, \"triggeredMarks\": *, \"richElementState\": *, \"backupElementStates\": *, \"toggledSidebar\": *, \"fromScorm\": *}"
      ]
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "mountFunction",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#mountFunction",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#componentWillUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#render",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "getLastCurrentViewElement",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#getLastCurrentViewElement",
    "access": "public",
    "description": "Get actualView REFACTOR: change name",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} currentView"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "currentView"
    },
    "params": []
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "changeCurrentView",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#changeCurrentView",
    "access": "public",
    "description": "Navigation main method",
    "lineNumber": 254,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": "current Element to go"
      }
    ],
    "return": null
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "getCurrentView",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#getCurrentView",
    "access": "public",
    "description": "This is used to get initial view and make sure is either containedView or NavItem",
    "lineNumber": 272,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "NISelected",
        "description": "selected NavItem"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "containsMarkValue",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#containsMarkValue",
    "access": "public",
    "description": "Make sure if mark value exists",
    "lineNumber": 285,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "-",
        "description": "Array of marks"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the mark exists or not in the array"
    }
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "returnTriggereableMark",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#returnTriggereableMark",
    "access": "public",
    "description": "Returns if any is there any triggerable mark",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Object Marks that are triggered"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "triggeredMarks",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Object Marks that are triggered"
    }
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "isTriggereableMark",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#isTriggereableMark",
    "access": "public",
    "description": "Whether if the mark is triggereable or not",
    "lineNumber": 322,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mark",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "triggerable_marks",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "unTriggerLastMark",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#unTriggerLastMark",
    "access": "public",
    "description": "Change state of last mark triggered to done, this is used to go back",
    "lineNumber": 346,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "santinizeViewsArray",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#santinizeViewsArray",
    "access": "public",
    "description": "Cleans Views Array",
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "triggeredMarks",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "arrayViews",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "clearTriggeredValues",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#clearTriggeredValues",
    "access": "public",
    "description": "Cleans used 'DONE' values in triggeredMarks array",
    "lineNumber": 381,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "triggered_event",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "triggeredMarks",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "getTriggeredMarks",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#getTriggeredMarks",
    "access": "public",
    "description": "Get all marks triggered in the same event",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "marks",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "triggered_event",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "getAllMarks",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#getAllMarks",
    "access": "public",
    "description": "Get all Mark of currentView",
    "lineNumber": 460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "putMarksOnHold",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#putMarksOnHold",
    "access": "public",
    "description": null,
    "lineNumber": 475,
    "undocument": true,
    "params": [
      {
        "name": "triggered_marks",
        "types": [
          "*"
        ]
      },
      {
        "name": "mark_event",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "getAllRichDescendantBoxes",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#getAllRichDescendantBoxes",
    "access": "public",
    "description": "",
    "lineNumber": 529,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navItemID",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "getActualBoxesStates",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#getActualBoxesStates",
    "access": "public",
    "description": "Get the current state for selected box",
    "lineNumber": 565,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backup",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "current",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "removeLastView",
    "memberof": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/EditorVisor.jsx~Visor#removeLastView",
    "access": "public",
    "description": "Remove last view from queue of views",
    "lineNumber": 574,
    "params": [],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "file",
    "name": "DALI_EDITOR/_visor/containers/Visor.jsx",
    "content": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Modal } from 'react-bootstrap';\nimport i18n from 'i18next';\n\nrequire('./_visor.scss');\n\nexport default class Visor extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.props.visorVisible || nextProps.visorVisible;\n    }\n\n    render() {\n        if (this.props.state.navItemSelected === 0) {\n            return (\n                /* jshint ignore:start */\n                <div />\n                /* jshint ignore:end */\n            );\n        }\n\n        return (\n            /* jshint ignore:start */\n            <Modal className=\"visor modalVisorContainer\"\n                show={this.props.visorVisible}\n                backdrop bsSize=\"large\"\n                aria-labelledby=\"contained-modal-title-lg\"\n                onHide={e => {\n                    this.props.onVisibilityToggled();\n                }}>\n                <Modal.Header closeButton>\n                    <Modal.Title><span id=\"previewTitle\">{i18n.t('Preview')}</span></Modal.Title>\n\n                </Modal.Header>\n\n                <Modal.Body style={{ position: 'relative', top: '-1px', width: '100%', height: '97%', padding: '0px', backgroundColor: '#555' }}>\n                    <iframe id=\"visor_iframe\" ref={el => {\n                        if(el !== null && this.props.visorVisible) {\n                            el.contentWindow.document.open();\n                            el.contentWindow.document.write(Dali.Visor.exportPage(this.props.state));\n                            el.contentWindow.document.close();\n                        }\n                    }} style={{ width: \"100%\", height: \"100%\", border: 0 }} allowFullScreen frameBorder=\"0\" />\n                </Modal.Body>\n            </Modal>\n            /* jshint ignore:end */\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/_visor/containers/Visor.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 414,
    "kind": "class",
    "name": "Visor",
    "memberof": "DALI_EDITOR/_visor/containers/Visor.jsx",
    "static": true,
    "longname": "DALI_EDITOR/_visor/containers/Visor.jsx~Visor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/_visor/containers/Visor.jsx",
    "importStyle": "Visor",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~Component"
    ]
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "shouldComponentUpdate",
    "memberof": "DALI_EDITOR/_visor/containers/Visor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/Visor.jsx~Visor#shouldComponentUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextState",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/_visor/containers/Visor.jsx~Visor",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/_visor/containers/Visor.jsx~Visor#render",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 417,
    "kind": "file",
    "name": "DALI_EDITOR/common/actions.es6",
    "content": "import fetch from 'isomorphic-fetch';\nimport Dali from '../core/main';\nimport i18n from 'i18next';\n\nexport const ADD_BOX = 'ADD_BOX';\nexport const SELECT_BOX = 'SELECT_BOX';\nexport const MOVE_BOX = 'MOVE_BOX';\nexport const DUPLICATE_BOX = 'DUPLICATE_BOX';\nexport const RESIZE_BOX = 'RESIZE_BOX';\nexport const UPDATE_BOX = 'UPDATE_BOX';\nexport const DELETE_BOX = 'DELETE_BOX';\nexport const DROP_BOX = 'DROP_BOX';\nexport const VERTICALLY_ALIGN_BOX = 'VERTICALLY_ALIGN_BOX';\nexport const INCREASE_LEVEL = 'INCREASE_LEVEL';\n// this is to move a box that has relative position inside a container\nexport const REORDER_BOXES = 'REORDER_BOXES';\n\nexport const RESIZE_SORTABLE_CONTAINER = 'RESIZE_SORTABLE_CONTAINER';\nexport const DELETE_SORTABLE_CONTAINER = 'DELETE_SORTABLE_CONTAINER';\nexport const REORDER_SORTABLE_CONTAINER = 'REORDER_SORTABLE_CONTAINER';\nexport const CHANGE_SORTABLE_PROPS = 'CHANGE_SORTABLE_PROPS';\nexport const CHANGE_COLS = 'CHANGE_COLS';\nexport const CHANGE_ROWS = 'CHANGE_ROWS';\n\nexport const ADD_NAV_ITEM = 'ADD_NAV_ITEM';\nexport const SELECT_NAV_ITEM = 'SELECT_NAV_ITEM';\nexport const EXPAND_NAV_ITEM = 'EXPAND_NAV_ITEM';\nexport const DELETE_NAV_ITEM = 'DELETE_NAV_ITEM';\nexport const REORDER_NAV_ITEM = 'REORDER_NAV_ITEM';\nexport const TOGGLE_NAV_ITEM = 'TOGGLE_NAV_ITEM';\nexport const UPDATE_NAV_ITEM_EXTRA_FILES = 'UPDATE_NAV_ITEM_EXTRA_FILES';\nexport const CHANGE_NAV_ITEM_NAME = 'CHANGE_NAV_ITEM_NAME';\nexport const CHANGE_UNIT_NUMBER = 'CHANGE_UNIT_NUMBER';\nexport const INDEX_SELECT = 'INDEX_SELECT';\n\nexport const TOGGLE_TEXT_EDITOR = 'TOGGLE_TEXT_EDITOR';\nexport const TOGGLE_TITLE_MODE = 'TOGGLE_TITLE_MODE';\nexport const CHANGE_DISPLAY_MODE = 'CHANGE_DISPLAY_MODE';\nexport const SET_BUSY = 'SET_BUSY';\nexport const UPDATE_TOOLBAR = 'UPDATE_TOOLBAR';\n\nexport const IMPORT_STATE = 'IMPORT_STATE';\nexport const CHANGE_GLOBAL_CONFIG = 'CHANGE_GLOBAL_CONFIG';\n\nexport const FETCH_VISH_RESOURCES_SUCCESS = \"FETCH_VISH_RESOURCES_SUCCESS\";\n\nexport const ADD_RICH_MARK = 'ADD_RICH_MARK';\nexport const EDIT_RICH_MARK = 'EDIT_RICH_MARK';\n\nexport const ADD_CONTAINED_VIEW = 'ADD_CONTAINED_VIEW';\nexport const SELECT_CONTAINED_VIEW = 'SELECT_CONTAINED_VIEW';\nexport const DELETE_CONTAINED_VIEW = 'DELETE_CONTAINED_VIEW';\nexport const CHANGE_CONTAINED_VIEW_NAME = 'CHANGE_CONTAINED_VIEW_NAME';\n\nexport const UPLOAD_IMAGE = 'UPLOAD_IMAGE';\n\n// These are not real Redux actions but are use to specify plugin's render reason\nexport const DELETE_RICH_MARK = 'DELETE_RICH_MARK';\nexport const EDIT_PLUGIN_TEXT = 'EDIT_PLUGIN_TEXT';\n\nexport function selectIndex(id) {\n    return { type: INDEX_SELECT, payload: { id } };\n}\n\nexport function selectNavItem(id) {\n    return { type: SELECT_NAV_ITEM, payload: { id } };\n}\n\nexport function addContainedView(id, name, container) {\n    return { type: ADD_CONTAINED_VIEW, payload: { id, name, container } };\n}\n\nexport function deleteContainedView(ids, boxes, parent) {\n    return { type: DELETE_CONTAINED_VIEW, payload: { ids, boxes, parent } };\n}\n\nexport function addNavItem(id, name, parent, type, position, hasContent) {\n    return { type: ADD_NAV_ITEM, payload: { id, name, parent, type, position, hasContent } };\n}\n\nexport function expandNavItem(id, value) {\n    return { type: EXPAND_NAV_ITEM, payload: { id, value } };\n}\n\nexport function deleteNavItem(ids, parent, boxes, containedViews, linkedBoxes) {\n    return { type: DELETE_NAV_ITEM, payload: { ids, parent, boxes, containedViews, linkedBoxes } };\n}\n\nexport function reorderNavItem(id, newParent, oldParent, idsInOrder, childrenInOrder) {\n    return { type: REORDER_NAV_ITEM, payload: { id, newParent, oldParent, idsInOrder, childrenInOrder } };\n}\n\nexport function toggleNavItem(id) {\n    return { type: TOGGLE_NAV_ITEM, payload: { id } };\n}\n\nexport function updateNavItemExtraFiles(id, box, xml_path) {\n    return { type: UPDATE_NAV_ITEM_EXTRA_FILES, payload: { id, box, xml_path } };\n}\n\nexport function changeNavItemName(id, title) {\n    return { type: CHANGE_NAV_ITEM_NAME, payload: { id, title } };\n}\n\nexport function changeContainedViewName(id, title) {\n    return { type: CHANGE_CONTAINED_VIEW_NAME, payload: { id, title } };\n}\n\nexport function changeUnitNumber(id, value) {\n    return { type: CHANGE_UNIT_NUMBER, payload: { id, value } };\n}\n\nexport function addBox(ids, draggable, resizable, content, toolbar, config, state, initialParams) {\n    return { type: ADD_BOX, payload: { ids, draggable, resizable, content, toolbar, config, state, initialParams } };\n}\n\nexport function selectBox(id) {\n    return { type: SELECT_BOX, payload: { id } };\n}\n\nexport function moveBox(id, x, y, position, parent, container) {\n    return { type: MOVE_BOX, payload: { id, x, y, position, parent, container } };\n}\n\n// @TODO\nexport function duplicateBox(id, parent, container, children, newIds, newId) {\n    return { type: DUPLICATE_BOX, payload: { id, parent, container, children, newIds, newId } };\n}\n\nexport function resizeBox(id, widthButton, heightButton) {\n    return { type: RESIZE_BOX, payload: { id, widthButton, heightButton } };\n}\n\nexport function updateBox(id, content, toolbar, state) {\n    return { type: UPDATE_BOX, payload: { id, content, toolbar, state } };\n}\n\nexport function deleteBox(id, parent, container, children) {\n    return { type: DELETE_BOX, payload: { id, parent, container, children } };\n}\n\nexport function reorderSortableContainer(ids, parent) {\n    return { type: REORDER_SORTABLE_CONTAINER, payload: { ids, parent } };\n}\n\nexport function dropBox(id, row, col) {\n    return { type: DROP_BOX, payload: { id, row, col } };\n}\n\nexport function verticallyAlignBox(id, verticalAlign) {\n    return { type: VERTICALLY_ALIGN_BOX, payload: { id, verticalAlign } };\n}\n\nexport function increaseBoxLevel() {\n    return { type: INCREASE_LEVEL, payload: {} };\n}\n\nexport function resizeSortableContainer(id, parent, height) {\n    return { type: RESIZE_SORTABLE_CONTAINER, payload: { id, parent, height } };\n}\n\nexport function deleteSortableContainer(id, parent, children) {\n    return { type: DELETE_SORTABLE_CONTAINER, payload: { id, parent, children } };\n}\n\nexport function changeSortableProps(id, parent, prop, value) {\n    return { type: CHANGE_SORTABLE_PROPS, payload: { id, parent, prop, value } };\n}\nexport function changeCols(id, parent, distribution, boxesAffected) {\n    return { type: CHANGE_COLS, payload: { id, parent, distribution, boxesAffected } };\n}\n\nexport function changeRows(id, parent, column, distribution, boxesAffected) {\n    return { type: CHANGE_ROWS, payload: { id, parent, column, distribution, boxesAffected } };\n}\n\nexport function reorderBoxes(parent, container, order) {\n    return { type: REORDER_BOXES, payload: { parent, container, order } };\n}\n\nexport function addRichMark(parent, mark, state) {\n    return { type: ADD_RICH_MARK, payload: { parent, mark, state } };\n}\n\nexport function editRichMark(parent, state, mark, oldConnection, newConnection) {\n    return { type: EDIT_RICH_MARK, payload: { parent, state, mark, oldConnection, newConnection } };\n}\n\nexport function deleteRichMark(id, parent, cvid, state) {\n    return { type: DELETE_RICH_MARK, payload: { id, parent, cvid, state } };\n}\n\nexport function selectContainedView(id) {\n    return { type: SELECT_CONTAINED_VIEW, payload: { id } };\n}\n\nexport function toggleTextEditor(caller, value) {\n    return { type: TOGGLE_TEXT_EDITOR, payload: { caller, value } };\n}\n\nexport function toggleTitleMode(id, titles) {\n    return { type: TOGGLE_TITLE_MODE, payload: { id, titles } };\n}\n\nexport function changeDisplayMode(mode) {\n    return { type: CHANGE_DISPLAY_MODE, payload: { mode } };\n}\n\nexport function setBusy(value, msg) {\n    return { type: SET_BUSY, payload: { value, msg } };\n}\n\nexport function changeGlobalConfig(prop, value) {\n    return { type: CHANGE_GLOBAL_CONFIG, payload: { prop, value } };\n}\n\nexport function importState(state) {\n    return { type: IMPORT_STATE, payload: state };\n}\n\nexport function updateToolbar(id, tab, accordions, name, value) {\n    return { type: UPDATE_TOOLBAR, payload: { id, tab, accordions, name, value } };\n}\n\nexport function fetchVishResourcesSuccess(result) {\n    return { type: FETCH_VISH_RESOURCES_SUCCESS, payload: { result } };\n}\n\nexport function uploadImage(url) {\n    return { type: UPLOAD_IMAGE, payload: { url } };\n}\n\n// Async actions\nexport function exportStateAsync(state) {\n    return dispatch => {\n\n        // First dispatch: the app state is updated to inform\n        // that the API call is starting.\n        dispatch(setBusy(true, i18n.t(\"Exporting\")));\n\n        // The function called by the thunk middleware can return a value,\n        // that is passed on as the return value of the dispatch method.\n\n        // In this case, we return a promise to wait for.\n        // This is not required by thunk middleware, but it is convenient for us.\n        return fetch(Dali.Config.export_url, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(state),\n        })\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(i18n.t(\"error.exporting\"));\n                }\n                return true;\n            })\n            .then(() => {\n                dispatch(setBusy(false, i18n.t(\"success_transaction\")));\n            })\n            .catch(e => {\n                dispatch(setBusy(false, e.message));\n            });\n    };\n}\n\nexport function importStateAsync() {\n    return dispatch => {\n        dispatch(setBusy(true, i18n.t(\"Importing\")));\n\n        return fetch(Dali.Config.import_url)\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(i18n.t(\"error.importing\"));\n                }\n                return response.text();\n            })\n            .then(result => {\n                dispatch(importState(JSON.parse(result)));\n                return true;\n            })\n            .then(() => {\n                dispatch(setBusy(false, i18n.t(\"success_transaction\")));\n            })\n            .catch(e => {\n                dispatch(setBusy(false, e.message));\n            });\n    };\n}\n\nexport function fetchVishResourcesAsync(query) {\n    return dispatch => {\n        dispatch(setBusy(true, i18n.t(\"Searching\")));\n\n        return fetch(query)\n            .then(response => {\n                if (response.status >= 400) {\n                    throw new Error(i18n.t(\"error.searching\"));\n                }\n                return response.text();\n            })\n            .then(result => {\n                dispatch(fetchVishResourcesSuccess(JSON.parse(result)));\n                return true;\n            })\n            .then(() => {\n                dispatch(setBusy(false, i18n.t(\"no_results\")));\n            })\n            .catch(e => {\n                dispatch(setBusy(false, e.message));\n            });\n    };\n}\n\nexport function uploadVishResourceAsync(query) {\n    return dispatch => {\n\n        if (query.title !== null && query.title.length > 0) {\n            if (query.file !== null) {\n                if (query.file.name.match(/\\.(jpeg|jpg|gif|png)$/) !== null) {\n                    dispatch(setBusy(true, i18n.t(\"Uploading\")));\n\n                    let form = new FormData();\n                    form.append(\"title\", query.title);\n                    form.append(\"description\", query.description);\n                    form.append(\"file\", query.file);\n\n                    return fetch(Dali.Config.upload_vish_url, {\n                        method: 'POST',\n                        credentials: 'same-origin',\n                        body: form,\n                    }).then(response => {\n                        if (response.status >= 400) {\n                            throw new Error(i18n.t(\"error.generic\"));\n                        }\n                        return response.text();\n                    })\n                        .then((result) => {\n                            dispatch(setBusy(false, result));\n                            dispatch(uploadImage(result));\n                        })\n                        .catch(e => {\n                            alert(i18n.t(\"error.generic\"));\n                            dispatch(setBusy(false, 'http://nemanjakovacevic.net/wp-content/uploads/2013/07/placeholder.png'));\n                        });\n\n                }\n                alert(i18n.t(\"error.file_extension_invalid\"));\n\n            } else {\n                alert(i18n.t(\"error.file_not_selected\"));\n            }\n        }else {\n\n            alert(i18n.t(\"error.file_title_not_defined\"));\n            return false;\n        }\n        return false;\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/common/actions.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 418,
    "kind": "variable",
    "name": "ADD_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~ADD_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{ADD_BOX}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 419,
    "kind": "variable",
    "name": "SELECT_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~SELECT_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{SELECT_BOX}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 420,
    "kind": "variable",
    "name": "MOVE_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~MOVE_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{MOVE_BOX}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 421,
    "kind": "variable",
    "name": "DUPLICATE_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~DUPLICATE_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{DUPLICATE_BOX}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "variable",
    "name": "RESIZE_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~RESIZE_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{RESIZE_BOX}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "variable",
    "name": "UPDATE_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~UPDATE_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{UPDATE_BOX}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "variable",
    "name": "DELETE_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~DELETE_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{DELETE_BOX}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 425,
    "kind": "variable",
    "name": "DROP_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~DROP_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{DROP_BOX}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "variable",
    "name": "VERTICALLY_ALIGN_BOX",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~VERTICALLY_ALIGN_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{VERTICALLY_ALIGN_BOX}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "variable",
    "name": "INCREASE_LEVEL",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~INCREASE_LEVEL",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{INCREASE_LEVEL}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "variable",
    "name": "REORDER_BOXES",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~REORDER_BOXES",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{REORDER_BOXES}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "variable",
    "name": "RESIZE_SORTABLE_CONTAINER",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~RESIZE_SORTABLE_CONTAINER",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{RESIZE_SORTABLE_CONTAINER}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "variable",
    "name": "DELETE_SORTABLE_CONTAINER",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~DELETE_SORTABLE_CONTAINER",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{DELETE_SORTABLE_CONTAINER}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "variable",
    "name": "REORDER_SORTABLE_CONTAINER",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~REORDER_SORTABLE_CONTAINER",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{REORDER_SORTABLE_CONTAINER}",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "variable",
    "name": "CHANGE_SORTABLE_PROPS",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_SORTABLE_PROPS",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_SORTABLE_PROPS}",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "variable",
    "name": "CHANGE_COLS",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_COLS",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_COLS}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 434,
    "kind": "variable",
    "name": "CHANGE_ROWS",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_ROWS",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_ROWS}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "variable",
    "name": "ADD_NAV_ITEM",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~ADD_NAV_ITEM",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{ADD_NAV_ITEM}",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 436,
    "kind": "variable",
    "name": "SELECT_NAV_ITEM",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~SELECT_NAV_ITEM",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{SELECT_NAV_ITEM}",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 437,
    "kind": "variable",
    "name": "EXPAND_NAV_ITEM",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~EXPAND_NAV_ITEM",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{EXPAND_NAV_ITEM}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "variable",
    "name": "DELETE_NAV_ITEM",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~DELETE_NAV_ITEM",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{DELETE_NAV_ITEM}",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "variable",
    "name": "REORDER_NAV_ITEM",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~REORDER_NAV_ITEM",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{REORDER_NAV_ITEM}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 440,
    "kind": "variable",
    "name": "TOGGLE_NAV_ITEM",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~TOGGLE_NAV_ITEM",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{TOGGLE_NAV_ITEM}",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 441,
    "kind": "variable",
    "name": "UPDATE_NAV_ITEM_EXTRA_FILES",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~UPDATE_NAV_ITEM_EXTRA_FILES",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{UPDATE_NAV_ITEM_EXTRA_FILES}",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 442,
    "kind": "variable",
    "name": "CHANGE_NAV_ITEM_NAME",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_NAV_ITEM_NAME",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_NAV_ITEM_NAME}",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 443,
    "kind": "variable",
    "name": "CHANGE_UNIT_NUMBER",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_UNIT_NUMBER",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_UNIT_NUMBER}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 444,
    "kind": "variable",
    "name": "INDEX_SELECT",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~INDEX_SELECT",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{INDEX_SELECT}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 445,
    "kind": "variable",
    "name": "TOGGLE_TEXT_EDITOR",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~TOGGLE_TEXT_EDITOR",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{TOGGLE_TEXT_EDITOR}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "variable",
    "name": "TOGGLE_TITLE_MODE",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~TOGGLE_TITLE_MODE",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{TOGGLE_TITLE_MODE}",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "variable",
    "name": "CHANGE_DISPLAY_MODE",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_DISPLAY_MODE",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_DISPLAY_MODE}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "variable",
    "name": "SET_BUSY",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~SET_BUSY",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{SET_BUSY}",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 449,
    "kind": "variable",
    "name": "UPDATE_TOOLBAR",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~UPDATE_TOOLBAR",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{UPDATE_TOOLBAR}",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 450,
    "kind": "variable",
    "name": "IMPORT_STATE",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~IMPORT_STATE",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{IMPORT_STATE}",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "variable",
    "name": "CHANGE_GLOBAL_CONFIG",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_GLOBAL_CONFIG",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_GLOBAL_CONFIG}",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 452,
    "kind": "variable",
    "name": "FETCH_VISH_RESOURCES_SUCCESS",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~FETCH_VISH_RESOURCES_SUCCESS",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{FETCH_VISH_RESOURCES_SUCCESS}",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 453,
    "kind": "variable",
    "name": "ADD_RICH_MARK",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~ADD_RICH_MARK",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{ADD_RICH_MARK}",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 454,
    "kind": "variable",
    "name": "EDIT_RICH_MARK",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~EDIT_RICH_MARK",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{EDIT_RICH_MARK}",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "variable",
    "name": "ADD_CONTAINED_VIEW",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~ADD_CONTAINED_VIEW",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{ADD_CONTAINED_VIEW}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 456,
    "kind": "variable",
    "name": "SELECT_CONTAINED_VIEW",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~SELECT_CONTAINED_VIEW",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{SELECT_CONTAINED_VIEW}",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 457,
    "kind": "variable",
    "name": "DELETE_CONTAINED_VIEW",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~DELETE_CONTAINED_VIEW",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{DELETE_CONTAINED_VIEW}",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 458,
    "kind": "variable",
    "name": "CHANGE_CONTAINED_VIEW_NAME",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~CHANGE_CONTAINED_VIEW_NAME",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{CHANGE_CONTAINED_VIEW_NAME}",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "variable",
    "name": "UPLOAD_IMAGE",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~UPLOAD_IMAGE",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{UPLOAD_IMAGE}",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 460,
    "kind": "variable",
    "name": "DELETE_RICH_MARK",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~DELETE_RICH_MARK",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{DELETE_RICH_MARK}",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 461,
    "kind": "variable",
    "name": "EDIT_PLUGIN_TEXT",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~EDIT_PLUGIN_TEXT",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{EDIT_PLUGIN_TEXT}",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 462,
    "kind": "function",
    "name": "selectIndex",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~selectIndex",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{selectIndex}",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "function",
    "name": "selectNavItem",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~selectNavItem",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{selectNavItem}",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 464,
    "kind": "function",
    "name": "addContainedView",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~addContainedView",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{addContainedView}",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 465,
    "kind": "function",
    "name": "deleteContainedView",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~deleteContainedView",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{deleteContainedView}",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "boxes",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 466,
    "kind": "function",
    "name": "addNavItem",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~addNavItem",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{addNavItem}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "position",
        "types": [
          "*"
        ]
      },
      {
        "name": "hasContent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "function",
    "name": "expandNavItem",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~expandNavItem",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{expandNavItem}",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 468,
    "kind": "function",
    "name": "deleteNavItem",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~deleteNavItem",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{deleteNavItem}",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "boxes",
        "types": [
          "*"
        ]
      },
      {
        "name": "containedViews",
        "types": [
          "*"
        ]
      },
      {
        "name": "linkedBoxes",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 469,
    "kind": "function",
    "name": "reorderNavItem",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~reorderNavItem",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{reorderNavItem}",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "newParent",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldParent",
        "types": [
          "*"
        ]
      },
      {
        "name": "idsInOrder",
        "types": [
          "*"
        ]
      },
      {
        "name": "childrenInOrder",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 470,
    "kind": "function",
    "name": "toggleNavItem",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~toggleNavItem",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{toggleNavItem}",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "function",
    "name": "updateNavItemExtraFiles",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~updateNavItemExtraFiles",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{updateNavItemExtraFiles}",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "box",
        "types": [
          "*"
        ]
      },
      {
        "name": "xml_path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "function",
    "name": "changeNavItemName",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeNavItemName",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeNavItemName}",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "title",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 473,
    "kind": "function",
    "name": "changeContainedViewName",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeContainedViewName",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeContainedViewName}",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "title",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 474,
    "kind": "function",
    "name": "changeUnitNumber",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeUnitNumber",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeUnitNumber}",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "function",
    "name": "addBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~addBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{addBox}",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "draggable",
        "types": [
          "*"
        ]
      },
      {
        "name": "resizable",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      },
      {
        "name": "toolbar",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "initialParams",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 476,
    "kind": "function",
    "name": "selectBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~selectBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{selectBox}",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "function",
    "name": "moveBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~moveBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{moveBox}",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "x",
        "types": [
          "*"
        ]
      },
      {
        "name": "y",
        "types": [
          "*"
        ]
      },
      {
        "name": "position",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 478,
    "kind": "function",
    "name": "duplicateBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~duplicateBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{duplicateBox}",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      },
      {
        "name": "children",
        "types": [
          "*"
        ]
      },
      {
        "name": "newIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "newId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "function",
    "name": "resizeBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~resizeBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{resizeBox}",
    "description": null,
    "lineNumber": 130,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "widthButton",
        "types": [
          "*"
        ]
      },
      {
        "name": "heightButton",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 480,
    "kind": "function",
    "name": "updateBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~updateBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{updateBox}",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "content",
        "types": [
          "*"
        ]
      },
      {
        "name": "toolbar",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 481,
    "kind": "function",
    "name": "deleteBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~deleteBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{deleteBox}",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      },
      {
        "name": "children",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "function",
    "name": "reorderSortableContainer",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~reorderSortableContainer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{reorderSortableContainer}",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "ids",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "function",
    "name": "dropBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~dropBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{dropBox}",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "row",
        "types": [
          "*"
        ]
      },
      {
        "name": "col",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 484,
    "kind": "function",
    "name": "verticallyAlignBox",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~verticallyAlignBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{verticallyAlignBox}",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "verticalAlign",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "function",
    "name": "increaseBoxLevel",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~increaseBoxLevel",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{increaseBoxLevel}",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "function",
    "name": "resizeSortableContainer",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~resizeSortableContainer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{resizeSortableContainer}",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "function",
    "name": "deleteSortableContainer",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~deleteSortableContainer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{deleteSortableContainer}",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "children",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 488,
    "kind": "function",
    "name": "changeSortableProps",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeSortableProps",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeSortableProps}",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "prop",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "function",
    "name": "changeCols",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeCols",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeCols}",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "distribution",
        "types": [
          "*"
        ]
      },
      {
        "name": "boxesAffected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "function",
    "name": "changeRows",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeRows",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeRows}",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "column",
        "types": [
          "*"
        ]
      },
      {
        "name": "distribution",
        "types": [
          "*"
        ]
      },
      {
        "name": "boxesAffected",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 491,
    "kind": "function",
    "name": "reorderBoxes",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~reorderBoxes",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{reorderBoxes}",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "container",
        "types": [
          "*"
        ]
      },
      {
        "name": "order",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 492,
    "kind": "function",
    "name": "addRichMark",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~addRichMark",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{addRichMark}",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "mark",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "function",
    "name": "editRichMark",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~editRichMark",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{editRichMark}",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "params": [
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "mark",
        "types": [
          "*"
        ]
      },
      {
        "name": "oldConnection",
        "types": [
          "*"
        ]
      },
      {
        "name": "newConnection",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "function",
    "name": "deleteRichMark",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~deleteRichMark",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{deleteRichMark}",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "parent",
        "types": [
          "*"
        ]
      },
      {
        "name": "cvid",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 495,
    "kind": "function",
    "name": "selectContainedView",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~selectContainedView",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{selectContainedView}",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "function",
    "name": "toggleTextEditor",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~toggleTextEditor",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{toggleTextEditor}",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "caller",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "function",
    "name": "toggleTitleMode",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~toggleTitleMode",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{toggleTitleMode}",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "titles",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "function",
    "name": "changeDisplayMode",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeDisplayMode",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeDisplayMode}",
    "description": null,
    "lineNumber": 205,
    "undocument": true,
    "params": [
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "function",
    "name": "setBusy",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~setBusy",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{setBusy}",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "function",
    "name": "changeGlobalConfig",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~changeGlobalConfig",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{changeGlobalConfig}",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "params": [
      {
        "name": "prop",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "function",
    "name": "importState",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~importState",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{importState}",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 502,
    "kind": "function",
    "name": "updateToolbar",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~updateToolbar",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{updateToolbar}",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      },
      {
        "name": "tab",
        "types": [
          "*"
        ]
      },
      {
        "name": "accordions",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 503,
    "kind": "function",
    "name": "fetchVishResourcesSuccess",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~fetchVishResourcesSuccess",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{fetchVishResourcesSuccess}",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 504,
    "kind": "function",
    "name": "uploadImage",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~uploadImage",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{uploadImage}",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"type\": *, \"payload\": *}"
      ]
    }
  },
  {
    "__docId__": 505,
    "kind": "function",
    "name": "exportStateAsync",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~exportStateAsync",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{exportStateAsync}",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 506,
    "kind": "function",
    "name": "importStateAsync",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~importStateAsync",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{importStateAsync}",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 507,
    "kind": "function",
    "name": "fetchVishResourcesAsync",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~fetchVishResourcesAsync",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{fetchVishResourcesAsync}",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 508,
    "kind": "function",
    "name": "uploadVishResourceAsync",
    "memberof": "DALI_EDITOR/common/actions.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/actions.es6~uploadVishResourceAsync",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/actions.es6",
    "importStyle": "{uploadVishResourceAsync}",
    "description": null,
    "lineNumber": 317,
    "undocument": true,
    "params": [
      {
        "name": "query",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 509,
    "kind": "file",
    "name": "DALI_EDITOR/common/common_tools.es6",
    "content": "\nexport function aspectRatio(ratioparam, idEl = \"airlayer\", idParent = \"canvas\") {\n\n    // change ratio to the global ratio store in the app\n    let ratio = ratioparam;\n    let parent = document.getElementById(idParent);\n    let canvas = document.getElementById(idEl);\n    canvas.style.height = \"100%\";\n    canvas.style.width = \"100%\";\n\n    /* this is to avoid get values from react flow when using event listeners that do not exist in react\n     * get the values from window.object */\n\n    if(window.canvasRatio === undefined) {\n        window.canvasRatio = ratio; // https://stackoverflow.com/questions/19014250/reactjs-rerender-on-browser-resize\n    } else {\n        ratio = window.canvasRatio;\n    }\n\n    let w = canvas.offsetWidth;\n    let h = canvas.offsetHeight;\n    canvas.style.marginTop = 0 + 'px';\n    if (w > ratio * h) {\n        canvas.style.width = (ratio * h) + \"px\";\n    } else if (h > w / ratio) {\n\n        let newHeight = w / ratio;\n        canvas.style.height = newHeight + \"px\";\n        if (parent/* && parent.offsetHeight - newHeight > 0*/) {\n            canvas.style.marginTop = ((parent.offsetHeight - canvas.offsetHeight) / 2 - 5) + 'px';\n        }\n    }\n\n}\n\nexport function toggleFullScreen(element) {\n    if(!element) {\n        element = document.documentElement;\n    }\n\n    if (isFullScreenOn()) {\n        if (document.exitFullscreen) {\n            document.exitFullscreen();\n        } else if (document.msExitFullscreen) {\n            document.msExitFullscreen();\n        } else if (document.mozCancelFullScreen) {\n            document.mozCancelFullScreen();\n        } else if (document.webkitExitFullscreen) {\n            document.webkitExitFullscreen();\n        }\n    }\n    else if (!element.fullscreenElement && // alternative standard method\n        !element.mozFullScreenElement && !element.webkitFullscreenElement && !element.msFullscreenElement) { // current working methods\n        if (element.requestFullscreen) {\n            element.requestFullscreen();\n            document.body.requestFullscreen();\n        } else if (element.msRequestFullscreen) {\n            element.msRequestFullscreen();\n            document.body.requestFullscreen();\n        } else if (element.mozRequestFullScreen) {\n            element.mozRequestFullScreen();\n            document.body.requestFullscreen();\n        } else if (element.webkitRequestFullscreen) {\n            element.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n            document.body.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n\n        }\n\n    }\n\n}\n\nexport function isFullScreenOn() {\n    return (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement);\n}\n\nexport function fullScreenListener(callback, set) {\n    if (set) {\n        document.addEventListener('webkitfullscreenchange', callback);\n        document.addEventListener('mozfullscreenchange', callback);\n        document.addEventListener('fullscreenchange', callback);\n        document.addEventListener('MSFullscreenChange', callback);\n    } else {\n        document.removeEventListener('webkitfullscreenchange', callback);\n        document.removeEventListener('mozfullscreenchange', callback);\n        document.removeEventListener('fullscreenchange', callback);\n        document.removeEventListener('MSFullscreenChange', callback);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/common/common_tools.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 510,
    "kind": "function",
    "name": "aspectRatio",
    "memberof": "DALI_EDITOR/common/common_tools.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/common_tools.es6~aspectRatio",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/common_tools.es6",
    "importStyle": "{aspectRatio}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "ratioparam",
        "types": [
          "*"
        ]
      },
      {
        "name": "idEl",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "airlayer",
        "defaultValue": "airlayer"
      },
      {
        "name": "idParent",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "canvas",
        "defaultValue": "canvas"
      }
    ],
    "return": null
  },
  {
    "__docId__": 511,
    "kind": "function",
    "name": "toggleFullScreen",
    "memberof": "DALI_EDITOR/common/common_tools.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/common_tools.es6~toggleFullScreen",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/common_tools.es6",
    "importStyle": "{toggleFullScreen}",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 512,
    "kind": "function",
    "name": "isFullScreenOn",
    "memberof": "DALI_EDITOR/common/common_tools.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/common_tools.es6~isFullScreenOn",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/common_tools.es6",
    "importStyle": "{isFullScreenOn}",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 513,
    "kind": "function",
    "name": "fullScreenListener",
    "memberof": "DALI_EDITOR/common/common_tools.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/common/common_tools.es6~fullScreenListener",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/common_tools.es6",
    "importStyle": "{fullScreenListener}",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "set",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 514,
    "kind": "file",
    "name": "DALI_EDITOR/common/constants.es6",
    "content": "export const ID_PREFIX_SECTION = \"se-\";\nexport const ID_PREFIX_PAGE = \"pa-\";\nexport const ID_PREFIX_SLIDE = \"sl-\";\nexport const ID_PREFIX_BOX = \"bo-\";\nexport const ID_PREFIX_SORTABLE_BOX = \"bs-\";\nexport const ID_PREFIX_SORTABLE_CONTAINER = \"sc-\";\nexport const ID_PREFIX_CONTAINED_VIEW = \"cv-\";\nexport const ID_PREFIX_RICH_MARK = \"rm-\";\nexport const SECTIONS_HAVE_CONTENT = false;\nexport const PAGE_TYPES = {\n    SLIDE: \"slide\",\n    DOCUMENT: \"document\",\n    SECTION: \"section\",\n};\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/common/constants.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 515,
    "kind": "variable",
    "name": "ID_PREFIX_SECTION",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_SECTION",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_SECTION}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 516,
    "kind": "variable",
    "name": "ID_PREFIX_PAGE",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_PAGE",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_PAGE}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "variable",
    "name": "ID_PREFIX_SLIDE",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_SLIDE",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_SLIDE}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "variable",
    "name": "ID_PREFIX_BOX",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_BOX}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "variable",
    "name": "ID_PREFIX_SORTABLE_BOX",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_SORTABLE_BOX",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_SORTABLE_BOX}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "variable",
    "name": "ID_PREFIX_SORTABLE_CONTAINER",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_SORTABLE_CONTAINER",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_SORTABLE_CONTAINER}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "variable",
    "name": "ID_PREFIX_CONTAINED_VIEW",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_CONTAINED_VIEW",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_CONTAINED_VIEW}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "variable",
    "name": "ID_PREFIX_RICH_MARK",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~ID_PREFIX_RICH_MARK",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{ID_PREFIX_RICH_MARK}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "variable",
    "name": "SECTIONS_HAVE_CONTENT",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~SECTIONS_HAVE_CONTENT",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{SECTIONS_HAVE_CONTENT}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "variable",
    "name": "PAGE_TYPES",
    "memberof": "DALI_EDITOR/common/constants.es6",
    "static": true,
    "longname": "DALI_EDITOR/common/constants.es6~PAGE_TYPES",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/common/constants.es6",
    "importStyle": "{PAGE_TYPES}",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"SLIDE\": string, \"DOCUMENT\": string, \"SECTION\": string}"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "file",
    "name": "DALI_EDITOR/common/i18n.js",
    "content": "import i18n from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { es } from '../locales/es.js';\nimport { en } from '../locales/en.js';\n\nlet translations = { en: en, es: es };\n\ni18n\n    .use(LanguageDetector)\n    .init({\n        whitelist: ['es', 'en'],\n        fallbackLng: 'en',\n        attributes: ['t', 'i18n'],\n        resources: translations,\n        debug: false,\n    });\n\nexport default i18n;\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/common/i18n.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 526,
    "kind": "variable",
    "name": "translations",
    "memberof": "DALI_EDITOR/common/i18n.js",
    "static": true,
    "longname": "DALI_EDITOR/common/i18n.js~translations",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/common/i18n.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "{\"en\": *, \"es\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 527,
    "kind": "file",
    "name": "DALI_EDITOR/core/api.es6",
    "content": "import Dali from './main';\n\nexport function api() {\n    return {\n        addMenuButtons: function(json) {\n            Dali.API_Private.emit(Dali.API_Private.events.addMenuButtons, json);\n        },\n        configModalNeedsUpdate: function() {\n            Dali.API_Private.emit(Dali.API_Private.events.configModalNeedsUpdate, {});\n        },\n        openConfig: function(name, reason) {\n            let promise = new Promise(function(resolve) {\n                Dali.API_Private.listenAnswer(Dali.API_Private.events.openConfig, resolve);\n            });\n            Dali.API_Private.emit(Dali.API_Private.events.openConfig, { name: name, reason: reason });\n            return promise;\n        },\n        editRichMark: function(id, value) {\n            Dali.API_Private.emit(Dali.API_Private.events.editRichMark, { id: id, value: value });\n        },\n        markTriggered: function(id, value, stateElement) {\n            Dali.API_Private.emit(Dali.API_Private.events.markTriggered, { id, value, stateElement });\n        },\n        changeView: function(id) {\n            Dali.API_Private.emit(Dali.API_Private.events.changeView, { id: id });\n        },\n        renderPlugin: function(html, toolbar, config, state, ids, initialParams, reason) {\n            if(!reason) {\n                console.warn(\"No reason given\");\n            }\n            Dali.API_Private.emit(Dali.API_Private.events.render, {\n                content: html,\n                toolbar: toolbar,\n                config: config,\n                state: state,\n                ids: ids,\n                initialParams: initialParams,\n                reason: reason,\n            });\n        },\n    };\n}\n\nexport function api_private() {\n    let answerCallback;\n    return {\n        events: {\n            addMenuButtons: {\n                emit: 'addMenuButtons',\n            },\n            render: {\n                emit: 'render',\n            },\n            markTriggered: {\n                emit: 'markTriggered',\n                answer: 'markTriggered_back',\n            },\n            editRichMark: {\n                emit: 'editRichMark',\n            },\n            changeView: {\n                emit: 'changeView',\n            },\n            configModalNeedsUpdate: {\n                emit: 'needsUpdate',\n            },\n            openConfig: {\n                emit: 'openConfig',\n                answer: 'openConfig_back',\n            },\n            getPluginsInView: {\n                emit: 'getPluginsInView',\n                answer: 'getPluginsInView_back',\n            },\n        },\n        emit: function(name, params) {\n            let event = new CustomEvent(name.emit, { 'detail': params });\n            window.dispatchEvent(event);\n        },\n        listenEmission: function(event, callback) {\n            window.addEventListener(event.emit, callback);\n        },\n        answer: function(name, params) {\n            let event = new CustomEvent(name.answer, { 'detail': params });\n            window.dispatchEvent(event);\n        },\n        listenAnswer: function(event, resolve) {\n            answerCallback = this.cleanupAndResolve.bind(this, event, resolve);\n            window.addEventListener(event.answer, answerCallback);\n        },\n        cleanupAndResolve: function(event, resolve, customEvent) {\n            window.removeEventListener(event.answer, answerCallback);\n            resolve(customEvent.detail);\n        },\n        cleanListener: function(event) {\n            window.removeEventListener(event.emit);\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/api.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 528,
    "kind": "function",
    "name": "api",
    "memberof": "DALI_EDITOR/core/api.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/api.es6~api",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/api.es6",
    "importStyle": "{api}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"addMenuButtons\": *, \"configModalNeedsUpdate\": *, \"openConfig\": *, \"editRichMark\": *, \"markTriggered\": *, \"changeView\": *, \"renderPlugin\": *}"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "function",
    "name": "api_private",
    "memberof": "DALI_EDITOR/core/api.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/api.es6~api_private",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/api.es6",
    "importStyle": "{api_private}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"events\": *, \"emit\": *, \"listenEmission\": *, \"answer\": *, \"listenAnswer\": *, \"cleanupAndResolve\": *, \"cleanListener\": *}"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "file",
    "name": "DALI_EDITOR/core/base_plugin.es6",
    "content": "import Dali from './main';\nimport ReactDOM from 'react-dom';\nimport { isSortableContainer } from '../common/utils';\nlet html2json = require('html2json').html2json;\n\nexport default function() {\n    let descendant, state, id, initialParams = {};\n\n    let defaultFor = function(arg, value, warn) {\n        if (typeof arg !== 'undefined') {\n            return arg;\n        }\n\n        if (warn) {\n            console.warn(warn);\n        }\n        return value;\n    };\n\n    let assignPluginContainerIds = function(json) {\n        if (json.child) {\n            for (let i = 0; i < json.child.length; i++) {\n                assignPluginContainerIds(json.child[i]);\n            }\n        }\n        if (json.tag && json.tag === \"plugin\") {\n            if (!state.__pluginContainerIds) {\n                state.__pluginContainerIds = {};\n            }\n            let key = json.attr['plugin-data-key'];\n            if (!key) {\n                console.error(json.tag + \" has not defined plugin-data-key\");\n            } else if (state.__pluginContainerIds[key]) {\n                json.attr['plugin-data-id'] = state.__pluginContainerIds[key].id;\n                json.attr['plugin-data-display-name'] = state.__pluginContainerIds[key].name;\n                json.attr['plugin-data-height'] = state.__pluginContainerIds[key].height;\n            }\n        }\n    };\n\n    let plugin = {\n        create: function(obj) {\n            descendant = obj;\n\n            Object.keys(descendant).map(function(idKey) {\n                if (idKey !== 'init' &&\n                idKey !== 'getConfig' &&\n                idKey !== 'getToolbar' &&\n                idKey !== 'getSections' &&\n                idKey !== 'getInitialState' &&\n                idKey !== 'handleToolbar' &&\n                idKey !== 'afterRender' &&\n                idKey !== 'getConfigTemplate' &&\n                idKey !== 'getRenderTemplate' &&\n                idKey !== 'getLocales') {\n                    plugin[idKey] = descendant[idKey];\n                }\n            });\n        },\n        init: function() {\n            if (descendant.init) {\n                descendant.init();\n            }\n        },\n        getLocales: function() {\n            try {\n                let currentLanguage = Dali.i18n.language;\n                let texts = require('./../plugins/' + this.getConfig().name + \"/locales/\" + currentLanguage);\n                Dali.i18n.addResourceBundle(currentLanguage, 'translation', texts, true, false);\n            } catch (e) {\n            }\n        },\n        getConfig: function() {\n            let name, displayName, category, callback, needsConfigModal, needsConfirmation, needsTextEdition, extraTextConfig, needsPointerEventsAllowed,\n                needsXMLEdition, icon, iconFromUrl, aspectRatioButtonConfig, isRich, marksType, flavor, allowFloatingBox, limitToOneInstance;\n            if (descendant.getConfig) {\n                let cfg = descendant.getConfig();\n                name = cfg.name;\n                displayName = cfg.displayName;\n                category = cfg.category;\n                icon = cfg.icon;\n                iconFromUrl = cfg.iconFromUrl;\n                isRich = cfg.isRich;\n                flavor = cfg.flavor;\n                marksType = cfg.marksType;\n                needsConfigModal = cfg.needsConfigModal;\n                needsConfirmation = cfg.needsConfirmation;\n                needsTextEdition = cfg.needsTextEdition;\n                extraTextConfig = cfg.extraTextConfig;\n                needsXMLEdition = cfg.needsXMLEdition;\n                allowFloatingBox = cfg.allowFloatingBox;\n                aspectRatioButtonConfig = cfg.aspectRatioButtonConfig;\n                needsPointerEventsAllowed = cfg.needsPointerEventsAllowed;\n                limitToOneInstance = cfg.limitToOneInstance;\n            }\n\n            name = defaultFor(name, 'PluginName', \"Plugin name not assigned\");\n            displayName = defaultFor(displayName, 'Plugin', \"Plugin displayName not assigned\");\n            category = defaultFor(category, 'text', \"Plugin category not assigned\");\n            icon = defaultFor(icon, 'fa-cogs', \"Plugin icon not assigned\");\n            iconFromUrl = defaultFor(iconFromUrl, false);\n            isRich = defaultFor(isRich, false);\n            marksType = defaultFor(marksType, [{ name: 'value', key: 'value' }]);\n            flavor = defaultFor(flavor, 'plain');\n            allowFloatingBox = defaultFor(allowFloatingBox, true);\n            needsConfigModal = defaultFor(needsConfigModal, false);\n            needsConfirmation = defaultFor(needsConfirmation, false);\n            needsTextEdition = defaultFor(needsTextEdition, false);\n            needsXMLEdition = defaultFor(needsXMLEdition, false);\n            needsPointerEventsAllowed = defaultFor(needsPointerEventsAllowed, false);\n            limitToOneInstance = defaultFor(limitToOneInstance, false);\n\n            if (aspectRatioButtonConfig) {\n                aspectRatioButtonConfig.name = Dali.i18n.t(\"Aspect_ratio\");\n                aspectRatioButtonConfig.location = defaultFor(aspectRatioButtonConfig.location, [\"main\", \"z__extra\"], \"Aspect ratio button location not defined\");\n                if (!Array.isArray(aspectRatioButtonConfig.location) || aspectRatioButtonConfig.location.length < 2 || aspectRatioButtonConfig.location.length > 3) {\n                    console.error(\"Aspect ratio button location malformed\");\n                }\n                aspectRatioButtonConfig.defaultValue = defaultFor(aspectRatioButtonConfig.defaultValue, \"unchecked\");\n            }\n\n            callback = function(initParams, reason) {\n                state = {};\n                if (descendant.getInitialState) {\n                    state = descendant.getInitialState();\n                }\n                if (needsTextEdition) {\n                    if (!state.__text) {\n                        state.__text = \"<p>\" + Dali.i18n.t(\"text_here\") + \"</p>\";\n                    }\n                    if (!descendant.getRenderTemplate) {\n                        descendant.getRenderTemplate = function(stateObj) {\n                            return stateObj.__text;\n                        };\n                    }\n                }\n                if (needsXMLEdition) {\n                    if (!state.__xml) {\n                        state.__xml = null;\n                        state.__size = null;\n                    }\n                }\n                if(isRich) {\n                    if(!state.__marks) {\n                        state.__marks = {};\n                    }\n                }\n                initialParams = initParams;\n                let floatingBox = !isSortableContainer(initialParams.container);\n                if(descendant.getConfig().initialWidth) {\n                    initialParams.width = floatingBox && descendant.getConfig().initialWidthSlide ? descendant.getConfig().initialWidthSlide : descendant.getConfig().initialWidth;\n                }\n                if(descendant.getConfig().initialHeight) {\n                    initialParams.height = floatingBox && descendant.getConfig().initialHeightSlide ? descendant.getConfig().initialHeightSlide : descendant.getConfig().initialHeight;\n                }\n                if (needsConfigModal) {\n                    this.openConfigModal(reason, state);\n                } else {\n                    this.render(reason);\n                }\n            }.bind(this);\n\n            return {\n                name: name,\n                displayName: displayName,\n                category: category,\n                callback: callback,\n                needsConfigModal: needsConfigModal,\n                needsConfirmation: needsConfirmation,\n                needsTextEdition: needsTextEdition,\n                extraTextConfig: extraTextConfig,\n                needsXMLEdition: needsXMLEdition,\n                aspectRatioButtonConfig: aspectRatioButtonConfig,\n                allowFloatingBox: allowFloatingBox,\n                icon: icon,\n                iconFromUrl: iconFromUrl,\n                isRich: isRich,\n                marksType: marksType,\n                flavor: flavor,\n                needsPointerEventsAllowed: needsPointerEventsAllowed,\n                limitToOneInstance: limitToOneInstance,\n            };\n        },\n        getToolbar: function() {\n            let toolbar;\n            // eslint-disable-next-line no-var\n            var buttonKey;\n            if (descendant.getToolbar) {\n                toolbar = descendant.getToolbar();\n            }\n            toolbar = defaultFor(toolbar, {});\n\n            for (let tabKey in toolbar) {\n                toolbar[tabKey].__name = defaultFor(toolbar[tabKey].__name, tabKey);\n                let accordions = defaultFor(toolbar[tabKey].accordions, {}, \"Property accordions in tab '\" + tabKey + \"' not found\");\n                toolbar[tabKey].accordions = accordions;\n                for (let accordionKey in accordions) {\n                    let button;\n                    accordions[accordionKey].__name = defaultFor(accordions[accordionKey].__name, accordionKey, \"Property __name in accordion '\" + accordionKey + \"' not found\");\n                    let buttons = defaultFor(accordions[accordionKey].buttons, {}, \"Property buttons in accordion '\" + accordionKey + \"' not found\");\n                    accordions[accordionKey].buttons = buttons;\n                    for (buttonKey in buttons) {\n                        button = buttons[buttonKey];\n                        button.__name = defaultFor(button.__name, buttonKey, \"Property __name in button '\" + buttonKey + \"' not found\");\n                        button.autoManaged = defaultFor(button.autoManaged, true);\n                        if(button.type === \"radio\" || button.type === \"select\") {\n                            button.options = defaultFor(button.options, []);\n                        }\n                        if (!button.callback && !button.autoManaged) {\n                            button.callback = this.update.bind(this);\n                        }\n                    }\n                    if (accordions[accordionKey].accordions || accordions[accordionKey].order) {\n                        let accordions2 = defaultFor(accordions[accordionKey].accordions, {}, \"Property accordions in accordion '\" + accordionKey + \"' not found\");\n                        accordions[accordionKey].accordions = accordions2;\n                        accordions[accordionKey].order = defaultFor(accordions[accordionKey].order, [], \"Property order in accordion '\" + accordionKey + \"' not found\");\n                        if (accordions[accordionKey].order.length !== (Object.keys(buttons).length + Object.keys(accordions2).length)) {\n                            console.warn(\"Accordion '%s' in tab '%s' malformed. Order property length differs from expected\", accordionKey, tabKey);\n                        }\n                        for (let accordionKey2 in accordions2) {\n                            accordions2[accordionKey2].__name = defaultFor(accordions2[accordionKey2].__name, accordionKey2, \"Property __name in accordion '\" + accordionKey2 + \"' not found\");\n                            buttons = defaultFor(accordions2[accordionKey2].buttons, {}, \"Property buttons in accordion '\" + accordionKey2 + \"' not found\");\n                            accordions2[accordionKey2].buttons = buttons;\n                            for (buttonKey in buttons) {\n                                button = buttons[buttonKey];\n                                button.__name = defaultFor(button.__name, buttonKey, \"Property __name in button '\" + buttonKey + \"' not found\");\n                                button.autoManaged = defaultFor(button.autoManaged, true);\n                                if(button.type === \"radio\" || button.type === \"select\") {\n                                    button.options = defaultFor(button.options, []);\n                                }\n                                if (!button.callback && !button.autoManaged) {\n                                    button.callback = this.update.bind(this);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return toolbar;\n        },\n        openConfigModal: function(reason, oldState, sender) {\n            state = oldState;\n            id = sender;\n\n            if (!descendant.getConfigTemplate) {\n                if (this.getConfig().needsConfigModal) {\n                    console.error(this.getConfig().name + \" has not defined getConfigTemplate method\");\n                }\n            } else {\n                Dali.API.openConfig(this.getConfig().name, reason).then(function(div) {\n                    if(this.getConfig().flavor !== 'react') {\n                        let template = descendant.getConfigTemplate(oldState, div);\n                        if(template) {\n                            div.innerHTML = descendant.getConfigTemplate(oldState).replace(/[$]dali[$]/g, \"Dali.Plugins.get('\" + this.getConfig().name + \"')\");\n                        }\n                    } else {\n                        ReactDOM.render(descendant.getConfigTemplate(oldState), div);\n                    }\n                }.bind(this));\n            }\n        },\n        configModalNeedsUpdate: function() {\n            Dali.API.configModalNeedsUpdate();\n        },\n        getRichMarkInput: function(setMark) {\n            if(descendant.getRichMarkInput) {\n                descendant.getRichMarkInput(state, setMark);\n            }\n            return undefined;\n        },\n        parseRichMarkInput: function(...values) {\n            if(descendant.parseRichMarkInput) {\n                return descendant.parseRichMarkInput(...values);\n            }\n            return undefined;\n        },\n        pointerEventsCallback: function(bool, toolbarState) {\n            if(descendant.pointerEventsCallback) {\n                return descendant.pointerEventsCallback(bool, toolbarState);\n            }\n            return undefined;\n        },\n        /* Esta función es para poder comprobar si los valores introducidos por el usuario al crear marcas son correctos*/\n        validateValueInput: function(value) {\n            if(descendant.validateValueInput) {\n                return descendant.validateValueInput(value);\n            }\n            return undefined;\n        },\n        postParseRichMarkInput(mark_id, value) {\n            Dali.API.editRichMark(mark_id, value);\n        },\n        forceUpdate: function(oldState, sender, reason) {\n            state = oldState;\n            id = sender ? sender : id;\n            this.render(reason);\n        },\n        render: function(reason) {\n            // Posible reasons:\n            // ADD_BOX,\n            // ADD_RICH_MARK,\n            // EDIT_RICH_MARK,\n            // DELETE_RICH_MARK,\n            // UPDATE_TOOLBAR,\n            // UPDATE_BOX,\n            // RESIZE_SORTABLE_CONTAINER,\n            // EDIT_PLUGIN_TEXT,\n            // UPDATE_NAV_ITEM_EXTRA_FILES\n\n            if (!descendant.getRenderTemplate) {\n                console.error(this.getConfig().name + \" has not defined getRenderTemplate method\");\n            } else {\n                let template = descendant.getRenderTemplate(state);\n                if(template !== null && this.getConfig().flavor !== \"react\") {\n                    template = html2json(template);\n                    assignPluginContainerIds(template);\n                }\n                if (template !== null) {\n                    Dali.API.renderPlugin(\n                        template,\n                        this.getToolbar(),\n                        this.getConfig(),\n                        state,\n                        {\n                            id: id,\n                            parent: initialParams.parent,\n                            container: initialParams.container,\n                        },\n                        {\n                            position: initialParams.position,\n                            row: initialParams.row,\n                            col: initialParams.col,\n                            width: initialParams.width,\n                            height: initialParams.height,\n                            isDefaultPlugin: defaultFor(initialParams.isDefaultPlugin, false),\n                        },\n                        reason\n                    );\n                }\n            }\n        },\n        afterRender: function(element, oldState) {\n            state = oldState;\n            if (descendant.afterRender) {\n                descendant.afterRender(element, oldState);\n            }\n        },\n        update: function(oldState, name, value, sender, reason) {\n            state = oldState;\n            id = sender || id;\n            if (descendant.handleToolbar) {\n                descendant.handleToolbar(name, value);\n            }\n            this.render(reason);\n        },\n        setState: function(key, value) {\n            state[key] = value;\n        },\n        getState: function() {\n            return state;\n        },\n        registerExtraFunction: function() {\n        },\n    };\n\n    return plugin;\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/base_plugin.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 531,
    "kind": "variable",
    "name": "html2json",
    "memberof": "DALI_EDITOR/core/base_plugin.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/base_plugin.es6~html2json",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/base_plugin.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 532,
    "kind": "function",
    "name": "base_plugin",
    "memberof": "DALI_EDITOR/core/base_plugin.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/base_plugin.es6~base_plugin",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/base_plugin.es6",
    "importStyle": "base_plugin",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "file",
    "name": "DALI_EDITOR/core/config.es6",
    "content": "export default {\n    xml_path: \"dali_documents/add_xml\", // \"http://lamas.dit.upm.es:3000/dali_documents/add_xml\",\n    xml_fake_path: \"exercises/ua2_ue10_ejer7.xml\",\n    exercise_render_template_iframe_src: \"./exercises/index.html\",\n    dist_index: \"dist/index.html\",\n    dist_visor_bundle: \"dist/visor-bundle.js\",\n    visor_bundle: \"visor-bundle.js\",\n    scorm_ejs: \"/lib/scorm/scorm_nav.ejs\",\n    visor_ejs: \"./lib/visor/index\",\n    scorm_zip: \"./lib/scorm/scorm.zip\",\n    visor_zip: \"./lib/visor/dist.zip\",\n    export_url: \"http://127.0.0.1:8081/saveConfig\",\n    import_url: \"http://127.0.0.1:8081/getConfig\",\n    search_vish_url: \"http://vishub.org/apis/search/\",\n    show_numbers_before_navitems: false,\n    sections_have_content: false,\n    autosave_time: 30000,\n    upload_vish_url: \"http://127.0.0.1:8081/upload\",\n    pluginList: [\n        'BasicImage',\n        'BasicText',\n        'BasicPlayer',\n        'DataTable',\n        'EnrichedPlayer',\n        'VirtualTour',\n        'Webpage',\n        'GraficaD3',\n        'HotspotImages',\n\n    ],\n    availableLanguages: [\n        'en',\n        'es',\n    ],\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/config.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 534,
    "kind": "file",
    "name": "DALI_EDITOR/core/config_production.es6",
    "content": "export default {\n    xml_path: \"dali_documents/add_xml\", // \"http://lamas.dit.upm.es:3000/dali_documents/add_xml\",\n    xml_fake_path: \"exercises/ua2_ue10_ejer7.xml\",\n    exercise_render_template_iframe_src: \"./exercises/index.html\",\n    dist_index: \"dist/index.html\",\n    dist_visor_bundle: \"dist/visor-bundle.js\",\n    visor_bundle: \"/assets/editor/visor-bundle.js\",\n    scorm_ejs: \"/assets/lib/scorm/scorm_nav.ejs\",\n    visor_ejs: \"/assets/lib/visor/index\",\n    scorm_zip: \"/assets/lib/scorm/scorm.zip\",\n    visor_zip: \"/assets/lib/dist.zip\",\n    export_url: \"http://127.0.0.1:8081/saveConfig\",\n    import_url: \"http://127.0.0.1:8081/getConfig\",\n    search_vish_url: \"http://vishub.org/apis/search/\",\n    show_numbers_before_navitems: false,\n    sections_have_content: false,\n    autosave_time: 30000,\n    upload_vish_url: \"http://127.0.0.1:8081/upload\",\n    pluginList: [\n        'BasicImage',\n        'BasicText',\n        'BasicPlayer',\n        'DataTable',\n        'EnrichedPlayer',\n        'VirtualTour',\n        'Webpage',\n        'GraficaD3',\n        'HotspotImages',\n    ],\n    availableLanguages: [\n        'en',\n        'es',\n    ],\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/config_production.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 535,
    "kind": "file",
    "name": "DALI_EDITOR/core/main.es6",
    "content": "import DevConfig from './config';\nimport ProductionConfig from './config_production';\nimport { api, api_private } from './api';\nimport Plugins from './plugins';\nimport Visor from './visor/main';\nimport Scorm from './scorm/main';\nimport i18n from 'i18next';\n\nconst Config = process.env.NODE_ENV === \"production\" ? ProductionConfig : DevConfig;\n\nexport default {\n    Config: Config,\n    API: api(),\n    API_Private: api_private(),\n    Plugins: Plugins(),\n    Visor: Visor,\n    Scorm: Scorm,\n    i18n: i18n,\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/main.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 536,
    "kind": "variable",
    "name": "Config",
    "memberof": "DALI_EDITOR/core/main.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/main.es6~Config",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/main.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 537,
    "kind": "file",
    "name": "DALI_EDITOR/core/plugins.es6",
    "content": "import Dali from './main';\nimport BasePlugin from './base_plugin';\n\nexport default function() {\n    let pluginInstancesList = {};\n\n    return {\n        get: function(name) {\n            return pluginInstancesList[name];\n        },\n        getAll: function() {\n            return pluginInstancesList;\n        },\n        getPluginsInCurrentView: function(getAliasedPlugins) {\n            return this.getPluginsInView(null, getAliasedPlugins);\n        },\n        getPluginsInView: function(view, getAliasedPlugins) {\n            let promise = new Promise(function(resolve) {\n                Dali.API_Private.listenAnswer(Dali.API_Private.events.getPluginsInView, resolve);\n            });\n            Dali.API_Private.emit(Dali.API_Private.events.getPluginsInView, { view, getAliasedPlugins });\n\n            return promise;\n        },\n        loadAll: function() {\n            let pluginConfigs = [];\n\n            Dali.Config.pluginList.map(id => {\n                try {\n                    let plugin = new BasePlugin();\n                    Dali.Plugins[id] = require('./../plugins/' + id + '/' + id)[id](plugin);\n                    plugin.create(Dali.Plugins[id]);\n                    plugin.init();\n                    plugin.getLocales();\n                    pluginInstancesList[id] = plugin;\n                    pluginConfigs.push(plugin.getConfig());\n\n                    Dali.Visor.Plugins.add(id);\n                } catch (e) {\n                }\n            });\n\n            Dali.API.addMenuButtons(pluginConfigs);\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/plugins.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 538,
    "kind": "function",
    "name": "plugins",
    "memberof": "DALI_EDITOR/core/plugins.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/plugins.es6~plugins",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/plugins.es6",
    "importStyle": "plugins",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"get\": *, \"getAll\": *, \"getPluginsInCurrentView\": *, \"getPluginsInView\": *, \"loadAll\": *}"
      ]
    }
  },
  {
    "__docId__": 539,
    "kind": "file",
    "name": "DALI_EDITOR/core/scorm/main.es6",
    "content": "import Dali from './../main';\nimport { ID_PREFIX_SECTION } from '../../common/constants';\nimport { isSection } from '../../common/utils';\nexport default {\n    createSPAimsManifest: function(navsIds, sections, globalConfig) {\n        let doc = document.implementation.createDocument(\"\", \"\", null);\n\n        // /     ROOT MANIFEST\n        let manifest = doc.createElement(\"manifest\");\n        manifest.setAttribute(\"identifier\", \"com.dali.presentation\");\n        manifest.setAttribute(\"version\", \"1.0\");\n        manifest.setAttribute(\"xmlns\", \"http://www.imsglobal.org/xsd/imscp_v1p1\");\n        manifest.setAttribute(\"xmlns:adlcp\", \"http://www.adlnet.org/xsd/adlcp_v1p3\");\n        manifest.setAttribute(\"xmlns:adlseq\", \"http://www.adlnet.org/xsd/adlseq_v1p3\");\n        manifest.setAttribute(\"xmlns:adlnav\", \"http://www.adlnet.org/xsd/adlnav_v1p3\");\n        manifest.setAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        manifest.setAttribute(\"xmlns:imsss\", \"http://www.imsglobal.org/xsd/imsss\");\n        manifest.setAttribute(\"xsi:schemaLocation\", \"http://www.imsglobal.org/xsd/imscp_v1p1 imscp_v1p1.xsd http://www.adlnet.org/xsd/adlcp_v1p3 adlcp_v1p3.xsd http://www.adlnet.org/xsd/adlseq_v1p3 adlseq_v1p3.xsd http://www.adlnet.org/xsd/adlnav_v1p3 adlnav_v1p3.xsd http://www.imsglobal.org/xsd/imsss imsss_v1p0.xsd\");\n\n        // /      METADATA\n        let metadata = doc.createElement(\"metadata\");\n        let schema = doc.createElement(\"schema\");\n        let schema_txt = doc.createTextNode(\"ADL SCORM\");\n        schema.appendChild(schema_txt);\n        metadata.appendChild(schema);\n        let schemaVersion = doc.createElement(\"schemaversion\");\n        let schema_version_txt = doc.createTextNode(\"2004 3rd Edition\");\n        schemaVersion.appendChild(schema_version_txt);\n        metadata.appendChild(schemaVersion);\n        metadata = this.lomCreator(globalConfig, doc, metadata);\n\n        // /       ORGANIZATION (USED DEFAULT)\n        let organizations = this.organizationsCreator(globalConfig, navsIds, sections, doc);\n\n        // /   RESOURCE ITEMS\n        let resources = doc.createElement(\"resources\");\n        let resource = doc.createElement(\"resource\");\n        resource.setAttribute(\"identifier\", \"resource_1\");\n        resource.setAttribute(\"type\", \"webcontent\");\n        resource.setAttribute(\"adlcp:scormType\", \"sco\");\n        resource.setAttribute(\"href\", \"dist/index.html\");\n        let file = doc.createElement(\"file\");\n        file.setAttribute(\"href\", \"dist/index.html\");\n        resource.appendChild(file);\n        resources.appendChild(resource);\n\n        // Common DATA\n\n        // / APPEND DATA\n        manifest.appendChild(metadata);\n        manifest.appendChild(organizations);\n        manifest.appendChild(resources);\n\n        doc.appendChild(manifest);\n\n        return (this.beautifyXML(new XMLSerializer().serializeToString(doc)));\n    },\n    lomCreator: function(gc, doc, metadata) {\n        let lom = doc.createElement('lom');\n        lom.setAttribute('xmlns', \"http://ltsc.ieee.org/xsd/LOM\");\n        lom.setAttribute('xmlns:xsi', \"http://www.w3.org/2001/XMLSchema-instance\");\n        lom.setAttribute('xsi:schemaLocation', \"http://ltsc.ieee.org/xsd/LOM lom.xsd\");\n        // GENERAL\n        let general = this.generalCreator(gc, doc);\n        lom.appendChild(general);\n\n        // CLASSIFICATION (not implemented)\n        // var classification = doc.createElement('classification');\n        // lom.appendChild(classification);\n\n        // ANNOTATION\n        let annotation = this.annotationCreator(gc, doc);\n        lom.appendChild(annotation);\n\n        // LIFE CYCLE\n        let lifeCycle = this.lifeCycleCreator(gc, doc);\n        lom.appendChild(lifeCycle);\n\n        // TECHNICAL\n        let technical = this.technicalCreator(gc, doc);\n        lom.appendChild(technical);\n\n        // METAMETADATA\n        let metaMetadata = this.metaMetadataCreator(gc, doc);\n        lom.appendChild(metaMetadata);\n\n        // EDUCATIONAL\n        let educational = this.educationalCreator(gc, doc);\n        lom.appendChild(educational);\n\n        // RELATION\n        /* var relation = this.relationCreator(gc,doc);\n        lom.appendChild(relation); */\n\n        // RIGHTS\n        let rights = this.rightsCreator(gc, doc);\n        lom.appendChild(rights);\n\n        metadata.appendChild(lom);\n        return metadata;\n    },\n    generalCreator: function(gc, doc) {\n        let lang = gc.language || 'en';\n        let date = this.currentDate();\n        let general = doc.createElement('general');\n        let genId = doc.createElement('identifier'); // Identifier\n        let genIdCatalog = doc.createElement('catalog');\n        let genIdCatalogTxt = doc.createTextNode(\"URI\");\n        genIdCatalog.appendChild(genIdCatalogTxt);\n        genId.appendChild(genIdCatalog);\n        let genIdEntry = doc.createElement('entry');\n        let genIdEntryTxt = doc.createTextNode(\"http://vishub.org\");// ////////////////////////NOT IMPLEMENTED YET (Missing info from vish)\n        genIdEntry.appendChild(genIdEntryTxt);\n        genId.appendChild(genIdEntry);\n        general.appendChild(genId);\n        let genTitle = doc.createElement('title'); // Title\n        let genTitleString = doc.createElement('string');\n        genTitleString.setAttribute('language', lang);\n        let genTitleStringTxt = doc.createTextNode(gc.title || '---');\n        genTitleString.appendChild(genTitleStringTxt);\n        genTitle.appendChild(genTitleString);\n        general.appendChild(genTitle);\n        let genLang = doc.createElement('language'); // Language\n        let genLangTxt = doc.createTextNode(lang);\n        genLang.appendChild(genLangTxt);\n        general.appendChild(genLang);\n        let genDesc = doc.createElement('description'); // Description\n        let genDescString = doc.createElement('string');\n        genDescString.setAttribute('language', lang);\n        let genDescStringTxt = doc.createTextNode(gc.description || '...');\n        genDescString.appendChild(genDescStringTxt);\n        genDesc.appendChild(genDescString);\n        general.appendChild(genDesc);\n        if (gc.keywords && gc.keywords.length > 0) { // Keywords\n            for (let i = 0; i < gc.keywords.length; i++) {\n                let genKw = doc.createElement('keyword');\n                let genKwString = doc.createElement('string');\n                genKwString.setAttribute('language', lang);\n                let genKwStringTxt = doc.createTextNode(gc.keywords[i].text);\n                genKwString.appendChild(genKwStringTxt);\n                genKw.appendChild(genKwString);\n                general.appendChild(genKw);\n            }\n        }\n        let genStruc = doc.createElement('structure'); // Structure\n        let genStrucSource = doc.createElement('source');\n        let genStrucSourceTxt = doc.createTextNode('LOMv1.0');\n        genStrucSource.appendChild(genStrucSourceTxt);\n        genStruc.appendChild(genStrucSource);\n        let genStrucVal = doc.createElement('value');\n        let genStrucValTxt = doc.createTextNode('linear'); // DEFAULT\n        genStrucVal.appendChild(genStrucValTxt);\n        genStruc.appendChild(genStrucVal);\n        general.appendChild(genStruc);\n        let genAggLevel = doc.createElement('aggregationLevel'); // Aggregation Level\n        let genAggLevelSource = doc.createElement('source');\n        let genAggLevelSourceTxt = doc.createTextNode('LOMv1.0');\n        genAggLevelSource.appendChild(genAggLevelSourceTxt);\n        genAggLevel.appendChild(genAggLevelSource);\n        let genAggLVal = doc.createElement('value');\n        let genAggLValTxt = doc.createTextNode('3'); // DEFAULT\n        genAggLVal.appendChild(genAggLValTxt);\n        genAggLevel.appendChild(genAggLVal);\n        general.appendChild(genAggLevel);\n        return general;\n    },\n    annotationCreator: function(gc, doc) {\n        let lang = gc.language || 'en';\n        let date = this.currentDate();\n        let annotation = doc.createElement('annotation');\n        let annEntity = doc.createElement('entity'); // Entity\n        let annEntTxt = doc.createTextNode('BEGIN:VCARD&amp;#xD;VERSION:3.0&amp;#xD;N:' + (gc.author || 'anonymous') + '&amp;#xD;FN:' + (gc.author || 'anonymous') + '&amp;#xD;END:VCARD');\n        annEntity.appendChild(annEntTxt);\n        annotation.appendChild(annEntity);\n        let annDate = doc.createElement('date'); // Date\n        let annDateTime = doc.createElement('dateTime');\n        let annDateTimeTxt = doc.createTextNode(date);\n        annDateTime.appendChild(annDateTimeTxt);\n        annDate.appendChild(annDateTime);\n        let annDateDesc = doc.createElement('description');\n        let annDateDescString = doc.createElement('string');\n        annDateDescString.setAttribute('language', 'en');\n        let annDateDescTxt = doc.createTextNode('This date represents the date the author finished authoring the metadata of the indicated version of the Learning Object.');\n        annDateDescString.appendChild(annDateDescTxt);\n        annDateDesc.appendChild(annDateDescString);\n        annDate.appendChild(annDateDesc);\n        annotation.appendChild(annDate);\n        return annotation;\n    },\n    lifeCycleCreator: function(gc, doc) {\n        let lang = gc.language || 'en';\n        let date = this.currentDate();\n        let lifeCycle = doc.createElement('lifeCycle');\n        let lcv = doc.createElement('version');\n        let lcvStr = doc.createElement('string');\n        lcvStr.setAttribute('language', lang);\n        let lcvStrTxt = doc.createTextNode(gc.version);\n        lcvStr.appendChild(lcvStrTxt);\n        lcv.appendChild(lcvStr);\n        lifeCycle.appendChild(lcv);\n        let lcs = doc.createElement('status');\n        let lcss = doc.createElement('source');\n        let lcssTxt = doc.createTextNode(\"LOMv1.0\");\n        lcss.appendChild(lcssTxt);\n        lcs.appendChild(lcss);\n        let lcsv = doc.createElement('value');\n        let lcsvTxt = doc.createTextNode(gc.status);\n        lcsv.appendChild(lcsvTxt);\n        lcs.appendChild(lcsv);\n        lifeCycle.appendChild(lcs);\n        let lcc = doc.createElement('contribute');\n        let lccrole = doc.createElement('role');\n        let lccrolesource = doc.createElement('source');\n        let lccrolesourcetxt = doc.createTextNode('LOMv1.0');\n        lccrolesource.appendChild(lccrolesourcetxt);\n        lccrole.appendChild(lccrolesource);\n        let lccroleval = doc.createElement('value');\n        let lccrolevaltxt = doc.createTextNode('technical implementer');\n        lccroleval.appendChild(lccrolevaltxt);\n        lccrole.appendChild(lccroleval);\n        lcc.appendChild(lccrole);\n        let lccEntity = doc.createElement('entity'); // Entity\n        let lcEntTxt = doc.createTextNode('BEGIN:VCARD&#xD;VERSION:3.0&#xD;N:Authoring Tool Dali Editor (http://github.com/ging/DALI_EDITOR)&#xD;FN:Authoring Tool Dali Editor (http://github.com/ging/DALI_EDITOR)&#xD;END:VCARD'); // / Yet to determine\n        lccEntity.appendChild(lcEntTxt);\n        lcc.appendChild(lccEntity);\n        let lccDate = doc.createElement('date'); // Date\n        let lccDateTime = doc.createElement('dateTime');\n        let lccDateTimeTxt = doc.createTextNode(date);\n        lccDateTime.appendChild(lccDateTimeTxt);\n        lccDate.appendChild(lccDateTime);\n        lcc.appendChild(lccDate);\n        lifeCycle.appendChild(lcc);\n        return lifeCycle;\n    },\n    technicalCreator: function(gc, doc) {\n        let technical = doc.createElement('technical');\n        let format = doc.createElement('format');\n        let formatTxt = doc.createTextNode('text/html');\n        format.appendChild(formatTxt);\n        technical.appendChild(format);\n        let location = doc.createElement('location');\n        let locationTxt = doc.createTextNode('http://vishub.org/'); // Not yet implemented\n        location.appendChild(locationTxt);\n        technical.appendChild(location);\n        let requirement = doc.createElement('requirement');\n        let orComposite = doc.createElement('orComposite');\n        let orCType = doc.createElement('type');\n        let orCTSource = doc.createElement('source');\n        let orctsTxt = doc.createTextNode('LOMv1.0');\n        orCTSource.appendChild(orctsTxt);\n        orCType.appendChild(orCTSource);\n        let orCTValue = doc.createElement('value');\n        let orctvTxt = doc.createTextNode('browser');\n        orCTValue.appendChild(orctvTxt);\n        orCType.appendChild(orCTValue);\n        orComposite.appendChild(orCType);\n        let orCName = doc.createElement('name');\n        let orCNSource = doc.createElement('source');\n        let orcnsTxt = doc.createTextNode('LOMv1.0');\n        orCNSource.appendChild(orcnsTxt);\n        orCName.appendChild(orCNSource);\n        let orCNValue = doc.createElement('value');\n        let orcnvTxt = doc.createTextNode('browser');\n        orCNValue.appendChild(orcnvTxt);\n        orCName.appendChild(orCNValue);\n        orComposite.appendChild(orCName);\n        requirement.appendChild(orComposite);\n        // installationRemarks\n        let otherPlatformReqs = doc.createElement('otherPlatformRequirements');\n        let oprStr = doc.createElement('string');\n        oprStr.setAttribute('language', 'en');\n        let oprStrTxt = doc.createTextNode('HTML5-compliant web browser');\n        oprStr.appendChild(oprStrTxt);\n        otherPlatformReqs.appendChild(oprStr);\n        requirement.appendChild(otherPlatformReqs);\n        technical.appendChild(requirement);\n        return technical;\n    },\n    metaMetadataCreator: function(gc, doc) {\n        let lang = gc.language || 'en';\n        let date = this.currentDate();\n        let metaMetadata = doc.createElement('metaMetadata');\n        // identifier data missing\n        let mmc = doc.createElement('contribute');\n        let mmcrole = doc.createElement('role');\n        let mmcrolesource = doc.createElement('source');\n        let mmcrolesourcetxt = doc.createTextNode('LOMv1.0');\n        mmcrolesource.appendChild(mmcrolesourcetxt);\n        mmcrole.appendChild(mmcrolesource);\n        let mmcroleval = doc.createElement('value');\n        let mmcrolevaltxt = doc.createTextNode('creator');\n        mmcroleval.appendChild(mmcrolevaltxt);\n        mmcrole.appendChild(mmcroleval);\n        mmc.appendChild(mmcrole);\n        let mmcEntity = doc.createElement('entity'); // Entity\n        let mmcEntTxt = doc.createTextNode('BEGIN:VCARD&amp;#xD;VERSION:3.0&amp;#xD;N:' + (gc.author || 'anonymous') + '&amp;#xD;FN:' + (gc.author || 'anonymous') + '&amp;#xD;END:VCARD');\n        mmcEntity.appendChild(mmcEntTxt);\n        mmc.appendChild(mmcEntity);\n        let mmcDate = doc.createElement('date'); // Date\n        let mmcDateTime = doc.createElement('dateTime');\n        let mmcDateTimeTxt = doc.createTextNode(date);\n        mmcDateTime.appendChild(mmcDateTimeTxt);\n        mmcDate.appendChild(mmcDateTime);\n        let mmcDateTimeDesc = doc.createElement('description');\n        let mmcDTDStr = doc.createElement('string');\n        mmcDTDStr.setAttribute('language', 'en');\n        let mmcDateTimeDescTxt = doc.createTextNode('This date represents the date the author finished authoring the metadata of the indicated version of the Learning Object');\n        mmcDTDStr.appendChild(mmcDateTimeDescTxt);\n        mmcDateTimeDesc.appendChild(mmcDTDStr);\n        mmcDate.appendChild(mmcDateTimeDesc);\n        mmc.appendChild(mmcDate);\n        metaMetadata.appendChild(mmc);\n        let mms = doc.createElement('metadataSchema');\n        let mmsTxt = doc.createTextNode('LOMv1.0');\n        mms.appendChild(mmsTxt);\n        metaMetadata.appendChild(mms);\n        let mml = doc.createElement('language');\n        let mmlTxt = doc.createTextNode('en');\n        mml.appendChild(mmlTxt);\n        metaMetadata.appendChild(mml);\n        return metaMetadata;\n    },\n    educationalCreator: function(gc, doc) {\n        let lang = gc.language || 'en';\n        let date = this.currentDate();\n        let educational = doc.createElement('educational');\n        let interactivityType = doc.createElement('interactivityType');\n        let itSource = doc.createElement('source');\n        let itSourceTxt = doc.createTextNode('LOMv1.0');\n        itSource.appendChild(itSourceTxt);\n        interactivityType.appendChild(itSource);\n        let itValue = doc.createElement('value');\n        let itValueTxt = doc.createTextNode('mixed');// ///////// Yet to determine\n        itValue.appendChild(itValueTxt);\n        interactivityType.appendChild(itValue);\n        educational.appendChild(interactivityType);\n        /* MULTI?*/ \n        /* var learningResourceType = doc.createElement('learningResourceType');\n                var lrtSource = doc.createElement('source');\n                    var lrtSourceTxt = doc.createTextNode('LOMv1.0');\n                    lrtSource.appendChild(lrtSourceTxt);\n                interactivityType.appendChild(lrtSource);\n                var lrtValue = doc.createElement('value');\n                    var lrtValueTxt = doc.createTextNode('figure');\n                    lrtValue.appendChild(lrtValueTxt);\n                interactivityType.appendChild(lrtValue);\n            educational.appendChild(learningResourceType);*/\n        let interactivityLevel = doc.createElement('interactivityLevel');\n        let ilSource = doc.createElement('source');\n        let ilSourceTxt = doc.createTextNode('LOMv1.0');\n        ilSource.appendChild(ilSourceTxt);\n        interactivityLevel.appendChild(ilSource);\n        let ilValue = doc.createElement('value');\n        let ilValueTxt = doc.createTextNode('medium');// ///////// Yet to determine\n        ilValue.appendChild(ilValueTxt);\n        interactivityLevel.appendChild(ilValue);\n        educational.appendChild(interactivityLevel);\n        let semanticDensity = doc.createElement('semanticDensity');\n        let sdSource = doc.createElement('source');\n        let sdSourceTxt = doc.createTextNode('LOMv1.0');\n        sdSource.appendChild(sdSourceTxt);\n        semanticDensity.appendChild(sdSource);\n        let sdValue = doc.createElement('value');\n        let sdValueTxt = doc.createTextNode('medium');// ///////// Yet to determine\n        sdValue.appendChild(sdValueTxt);\n        semanticDensity.appendChild(sdValue);\n        educational.appendChild(semanticDensity);\n        let intendedEndUserRole = doc.createElement('intendedEndUserRole');\n        let ieurSource = doc.createElement('source');\n        let ieurSourceTxt = doc.createTextNode('LOMv1.0');\n        ieurSource.appendChild(ieurSourceTxt);\n        intendedEndUserRole.appendChild(ieurSource);\n        let ieurValue = doc.createElement('value');\n        let ieurValueTxt = doc.createTextNode('learner');// ///////// Yet to determine\n        ieurValue.appendChild(ieurValueTxt);\n        intendedEndUserRole.appendChild(ieurValue);\n        educational.appendChild(intendedEndUserRole);\n        let context = doc.createElement('context');\n        let contSource = doc.createElement('source');\n        let contSourceTxt = doc.createTextNode('LOMv1.0');\n        contSource.appendChild(contSourceTxt);\n        context.appendChild(contSource);\n        let contValue = doc.createElement('value');\n        let contValueTxt = doc.createTextNode(gc.context || 'other');\n        contValue.appendChild(contValueTxt);\n        context.appendChild(contValue);\n        educational.appendChild(context);\n        let typicalAgeRange = doc.createElement('typicalAgeRange');\n        let taeString = doc.createElement('string');\n        taeString.setAttribute('language', 'en');\n        let taeStringTxt = doc.createTextNode((gc.age.min || 0) + '-' + (gc.age.max || ''));\n        taeString.appendChild(taeStringTxt);\n        typicalAgeRange.appendChild(taeString);\n        educational.appendChild(typicalAgeRange);\n        let difficulty = doc.createElement('difficulty');\n        let diffSource = doc.createElement('source');\n        let diffSourceTxt = doc.createTextNode('LOMv1.0');\n        diffSource.appendChild(diffSourceTxt);\n        difficulty.appendChild(diffSource);\n        let diffValue = doc.createElement('value');\n        let diffValueTxt = doc.createTextNode(gc.difficulty || 'easy');\n        diffValue.appendChild(diffValueTxt);\n        difficulty.appendChild(diffValue);\n        educational.appendChild(difficulty);\n        let tlt = gc.typicalLearningTime;\n        let hh = tlt && tlt.h !== 0 && tlt.h !== '';\n        let mm = tlt && tlt.m !== 0 && tlt.m !== '';\n        let ss = tlt && tlt.s !== 0 && tlt.s !== '';\n        if (hh || mm || ss) {\n            let typicalLearningTime = doc.createElement('typicalLearningTime');\n            let tltDur = doc.createElement('duration');\n            let tltDurTxt = doc.createTextNode('PT' + (hh ? (tlt.h + 'H') : '') + (mm ? (tlt.m + 'M') : '') + (ss ? (tlt.s + 'S') : ''));\n            tltDur.appendChild(tltDurTxt);\n            typicalLearningTime.appendChild(tltDur);\n            let tltDesc = doc.createElement('description');\n            let tltDescStr = doc.createElement('string');\n            tltDescStr.setAttribute('language', 'en');\n            let tltDescStrTxt = doc.createTextNode('Average length of time to experience the activity.');\n            tltDescStr.appendChild(tltDescStrTxt);\n            tltDesc.appendChild(tltDescStr);\n            typicalLearningTime.appendChild(tltDesc);\n            educational.appendChild(typicalLearningTime);\n        }\n        let eduLanguage = doc.createElement('language');\n        let eduLangTxt = doc.createTextNode(lang);\n        eduLanguage.appendChild(eduLangTxt);\n        educational.appendChild(eduLanguage);\n        return educational;\n    },\n    relationCreator: function(gc, doc) {\n        let lang = gc.language || 'en';\n        let date = this.currentDate();\n        let relation = doc.createElement('relation');\n        let relKind = doc.createElement('kind');\n        let relKindSource = doc.createElement('source');\n        let relKindSourceTxt = doc.createTextNode('LOMv1.0');\n        relKindSource.appendChild(relKindSourceTxt);\n        relKind.appendChild(relKindSource);\n        let relKindVal = doc.createElement('value');\n        let relKindValTxt = doc.createTextNode('isbasedon');\n        relKindVal.appendChild(relKindValTxt);\n        relKind.appendChild(relKindVal);\n        relation.appendChild(relKind);\n        let relResource = doc.createElement('resource');\n        let relResId = doc.createElement('identifier');\n        let relResIdCat = doc.createElement('catalog');\n        let rricTxt = doc.createTextNode('URI');\n        relResIdCat.appendChild(rricTxt);\n        relResId.appendChild(relResIdCat);\n        let relResIdEntry = doc.createElement('entry');\n        let rrieTxt = doc.createTextNode('http://.....');\n        relResIdCat.appendChild(rrieTxt);\n        relResId.appendChild(relResIdEntry);\n        relResource.appendChild(relResId);\n        let relResDesc = doc.createElement('description');\n        let relResDescStr = doc.createElement('string');\n        relResDescStr.setAttribute('language', 'en');\n        let rrdsTxt = doc.createTextNode('Microsoft MSCE');\n        relResDescStr.appendChild(rrdsTxt);\n        relResDesc.appendChild(relResDescStr);\n        relResource.appendChild(relResDesc);\n        relation.appendChild(relResource);\n        return relation;\n    },\n    rightsCreator: function(gc, doc) {\n        let lang = gc.language || 'en';\n        let date = this.currentDate();\n        let rights = doc.createElement('rights');\n        let cost = doc.createElement('cost');\n        let costSource = doc.createElement('source');\n        let costSourceTxt = doc.createTextNode('LOMv1.0');\n        costSource.appendChild(costSourceTxt);\n        cost.appendChild(costSource);\n        let costValue = doc.createElement('value');\n        let costValueTxt = doc.createTextNode('no');\n        costValue.appendChild(costValueTxt);\n        cost.appendChild(costValue);\n        rights.appendChild(cost);\n        let copyrightAndOtherRestrictions = doc.createElement('copyrightAndOtherRestrictions');\n        let caorSource = doc.createElement('source');\n        let caorSourceTxt = doc.createTextNode('LOMv1.0');\n        caorSource.appendChild(caorSourceTxt);\n        copyrightAndOtherRestrictions.appendChild(caorSource);\n        let caorValue = doc.createElement('value');\n        let caorValueTxt = doc.createTextNode('yes');\n        caorValue.appendChild(caorValueTxt);\n        copyrightAndOtherRestrictions.appendChild(caorValue);\n        rights.appendChild(copyrightAndOtherRestrictions);\n        let rightsDesc = doc.createElement('description');\n        let rightsDescStr = doc.createElement(\"string\");\n        rightsDescStr.setAttribute('language', 'en');\n        let rightsDescStrTxt = doc.createTextNode('Open License');\n        rightsDescStr.appendChild(rightsDescStrTxt);\n        rightsDesc.appendChild(rightsDescStr);\n        rights.appendChild(rightsDesc);\n        return rights;\n    },\n    currentDate: function() {\n        let now = new Date();\n        let str = now.getFullYear() + '-' + (\"0\" + (now.getMonth() + 1)).slice(-2) + '-' + (\"0\" + now.getDate()).slice(-2) + 'T' + (\"0\" + now.getHours()).slice(-2) + ':' + (\"0\" + now.getMinutes()).slice(-2) + ':' + (\"0\" + now.getSeconds()).slice(-2) + '+' + (\"0\" + now.getTimezoneOffset() / -60).slice(-2) + ':00';\n        return str;\n    },\n    getIndex: function(navs) {\n        return (new EJS({ url: Dali.Config.scorm_ejs }).render({ navs: navs }));\n    },\n    xmlOrganizationBranch: function(root_child, actual_child, sections, doc, resource_elements) {\n        let branch_elements = [];\n        if(sections[actual_child].children.length !== 0) {\n            while(sections[actual_child].children.length > 0) {\n                let iteration_child = sections[actual_child].children.shift();\n                if(iteration_child.indexOf(ID_PREFIX_SECTION) !== -1) {\n                    if(!sections[iteration_child].hidden) {\n                        branch_elements.push(this.xmlOrganizationBranch(root_child, iteration_child, sections, doc, resource_elements));\n                    }\n                } else if(!sections[iteration_child].hidden) {\n                    let actual_section = iteration_child;\n\n                    let element = doc.createElement(\"item\");\n                    element.setAttribute(\"identifier\", this.santinize_id(sections[actual_section].id) + \"_item\");\n                    element.setAttribute(\"identifierref\", this.santinize_id(sections[actual_section].id) + \"_resource\");\n                    let element_title = doc.createElement(\"title\");\n                    let element_text = doc.createTextNode(sections[actual_section].name);\n                    element_title.appendChild(element_text);\n                    element.appendChild(element_title);\n\n                    let unit;\n                    if(typeof sections[actual_section].unitNumber === \"undefined\") {\n                        unit = \"blank\";\n                    } else {\n                        unit = sections[actual_section].unitNumber;\n                    }\n\n                    resource_elements.push({\n                        path: \"unit\" + unit + \"/\" + this.santinize_id(sections[actual_section].id) + \".html\",\n                        id: sections[actual_section].id,\n                    });\n\n                    branch_elements.push(element);\n                }\n            }\n        }\n        if(!sections[actual_child].hidden) {\n            let actual_section = actual_child;\n            let element = doc.createElement(\"item\");\n            element.setAttribute(\"identifier\", this.santinize_id(sections[actual_section].id) + \"_item\");\n            if (Dali.Config.sections_have_content || (sections[actual_section].id.indexOf(ID_PREFIX_SECTION) === -1)) {\n                element.setAttribute(\"identifierref\", this.santinize_id(sections[actual_section].id) + \"_resource\");\n            }\n            let element_title = doc.createElement(\"title\");\n            let element_text = doc.createTextNode(sections[actual_section].name);\n            element_title.appendChild(element_text);\n\n            element.appendChild(element_title);\n\n            let unit;\n            if(typeof sections[actual_section].unitNumber === \"undefined\") {\n                unit = \"blank\";\n            } else {\n                unit = sections[actual_section].unitNumber;\n            }\n\n            resource_elements.push({\n                path: \"unit\" + unit + \"/\" + this.santinize_id(sections[actual_section].id) + \".html\",\n                id: sections[actual_section].id,\n            });\n\n            if(branch_elements.length !== 0) {\n                for(let n = 0; n < branch_elements.length; n++) {\n                    element.appendChild(branch_elements[n]);\n                }\n            }\n\n            return element;\n        }\n        return \"\";\n    },\n    beautifyXML: function(xml) {\n        let reg = /(>)\\s*(<)(\\/*)/g; // updated Mar 30, 2015\n        let wsexp = / *(.*) +\\n/g;\n        let contexp = /(<.+>)(.+\\n)/g;\n        xml = xml.replace(reg, '$1\\n$2$3').replace(wsexp, '$1\\n').replace(contexp, '$1\\n$2');\n        let pad = 0;\n        let formatted = '';\n        let lines = xml.split('\\n');\n        let indent = 0;\n        let lastType = 'other';\n        // 4 types of tags - single, closing, opening, other (text, doctype, comment) - 4*4 = 16 transitions\n        let transitions = {\n            'single->single': 0,\n            'single->closing': -1,\n            'single->opening': 0,\n            'single->other': 0,\n            'closing->single': 0,\n            'closing->closing': -1,\n            'closing->opening': 0,\n            'closing->other': 0,\n            'opening->single': 1,\n            'opening->closing': 0,\n            'opening->opening': 1,\n            'opening->other': 1,\n            'other->single': 0,\n            'other->closing': -1,\n            'other->opening': 0,\n            'other->other': 0,\n        };\n\n        for (let i = 0; i < lines.length; i++) {\n            let ln = lines[i];\n            let single = Boolean(ln.match(/<.+\\/>/)); // is this line a single tag? ex. <br />\n            let closing = Boolean(ln.match(/<\\/.+>/)); // is this a closing tag? ex. </a>\n            let opening = Boolean(ln.match(/<[^!].*>/)); // is this even a tag (that's not <!something>)\n            let type = single ? 'single' : closing ? 'closing' : opening ? 'opening' : 'other';\n            let fromTo = lastType + '->' + type;\n            lastType = type;\n            let padding = '';\n\n            indent += transitions[fromTo];\n            for (let j = 0; j < indent; j++) {\n                padding += '\\t';\n            }\n            if (fromTo === 'opening->closing') {\n                formatted = formatted.substr(0, formatted.length - 1) + ln + '\\n'; // substr removes line break (\\n) from prev loop\n            }\n            else {\n                formatted += padding + ln + '\\n';\n            }\n        }\n        return formatted;\n    },\n    objCreator: function(navsIds, sections, doc) {\n        console.log(sections);\n        let objectives = doc.createElement(\"imsss:objectives\");\n        let primaryObjective = doc.createElement(\"imsss:primaryObjective\");\n        primaryObjective.setAttribute(\"objectiveID\", \"PRIMARYOBJ\");\n        primaryObjective.setAttribute(\"satisfiedByMeasure\", \"true\");\n        let minNorMeas = doc.createElement(\"imsss:minNormalizedMeasure\");\n        let mnmTxt = doc.createTextNode(0.8);\n        minNorMeas.appendChild(mnmTxt);\n        primaryObjective.appendChild(minNorMeas);\n        objectives.appendChild(primaryObjective);\n        for (let i = 0; i < navsIds.length; i++) {\n            let id = navsIds[i];\n            if (Dali.Config.sections_have_content || (!Dali.Config.sections_have_content && !isSection(id))) {\n                let newObjective = doc.createElement(\"imsss:objective\");\n                newObjective.setAttribute(\"objectiveID\", id);\n                objectives.appendChild(newObjective);\n            }\n        }\n        return objectives;\n    },\n    organizationsCreator: function(gc, navsIds, sections, doc) {\n        let title = gc.title;\n        let organizations = doc.createElement(\"organizations\");\n        organizations.setAttribute(\"default\", \"GING\");\n        let organization = doc.createElement(\"organization\");\n        organization.setAttribute(\"identifier\", \"GING\");\n\n        //        ORGANIZATION _TITLE\n        let title_org = doc.createElement(\"title\");\n        let title_item_txt = doc.createTextNode(title);\n        title_org.appendChild(title_item_txt);\n        organization.appendChild(title_org);\n\n        let root_element = doc.createElement(\"item\");\n        root_element.setAttribute(\"identifierref\", \"resource_1\");\n        root_element.setAttribute(\"identifier\", \"item_1\");\n        let root_title = doc.createElement(\"title\");\n        let item_title = doc.createTextNode(title);\n        root_title.appendChild(item_title);\n        root_element.appendChild(root_title);\n        let root_seq = doc.createElement(\"imsss:sequencing\");\n        let objectives = this.objCreator(navsIds, sections, doc);\n        root_seq.appendChild(objectives);\n        let deliveryControls = doc.createElement(\"imsss:deliveryControls\");\n        deliveryControls.setAttribute(\"completionSetByContent\", \"true\");\n        deliveryControls.setAttribute(\"objectiveSetByContent\", \"true\");\n        root_seq.appendChild(deliveryControls);\n        root_element.appendChild(root_seq);\n        organization.appendChild(root_element);\n        let ims_org = doc.createElement(\"imsss:sequencing\");\n        let ims_controlMode = doc.createElement(\"imsss:controlMode\");\n        ims_controlMode.setAttribute(\"choice\", \"true\");\n        ims_controlMode.setAttribute(\"flow\", \"true\");\n        organization.appendChild(ims_org);\n\n        organizations.appendChild(organization);\n        return organizations;\n    },\n    santinize_id: function(str) {\n        return str.replace(/\\-/g, \"\\_\");\n    },\n    createOldimsManifest: function(title, sections) {\n        let doc = document.implementation.createDocument(\"\", \"\", null);\n\n        // /     ROOT MANIFEST\n        let manifest = doc.createElement(\"manifest\");\n        manifest.setAttribute(\"xmlns\", \"http://www.imsproject.org/xsd/imscp_rootv1p1p2\");\n        manifest.setAttribute(\"xmlns:adlcp\", \"http://www.adlnet.org/xsd/adlcp_rootv1p2\");\n        manifest.setAttribute(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n        manifest.setAttribute(\"identifier\", \"com.dali.presentation\");\n        manifest.setAttribute(\"version\", \"1.0\");\n        manifest.setAttribute(\"xsi:schemaLocation\", \"http://www.imsproject.org/xsd/imscp_rootv1p1p2 imscp_rootv1p1p2.xsd http://www.imsglobal.org/xsd/imsmd_rootv1p2p1 imsmd_rootv1p2p1.xsd http://www.adlnet.org/xsd/adlcp_rootv1p2 adlcp_rootv1p2.xsd\");\n\n        // /      METADATA\n        let metadata = doc.createElement(\"metadata\");\n        let schema = doc.createElement(\"schema\");\n        let schema_txt = doc.createTextNode(\"ADL SCORM\");\n        schema.appendChild(schema_txt);\n        metadata.appendChild(schema);\n\n        let schemaVersion = doc.createElement(\"schemaversion\");\n        let schema_version_txt = doc.createTextNode(\"1.2\");\n        schemaVersion.appendChild(schema_version_txt);\n        metadata.appendChild(schemaVersion);\n\n        // /       ORGANIZATION (USED DEFAULT)\n        let organizations = doc.createElement(\"organizations\");\n        organizations.setAttribute(\"default\", \"defaultOrganization\");\n        let organization = doc.createElement(\"organization\");\n        organization.setAttribute(\"identifier\", \"defaultOrganization\");\n\n        //        ORGANIZATION _TITLE\n        let title_org = doc.createElement(\"title\");\n        let title_item_txt = doc.createTextNode(title);\n        title_org.appendChild(title_item_txt);\n        organization.appendChild(title_org);\n\n        // Create Organization Item Tree\n        let root_elements = sections[0].children;\n        // Resource XLM elements array\n        let resource_elements = [];\n\n        //        ORGANIZATION_ITEMS\n        for (let n = 0; n < root_elements.length; n ++) {\n            let root_section = root_elements[n];\n\n            if(!sections[root_section].hidden) {\n                let children_elements = [];\n\n                let root_element = doc.createElement(\"item\");\n\n                root_element.setAttribute(\"identifier\", this.santinize_id(root_section) + \"_item\");\n                if (Dali.Config.sections_have_content || root_section.indexOf(ID_PREFIX_SECTION) === -1) {\n                    root_element.setAttribute(\"identifierref\", this.santinize_id(sections[root_section].id) + \"_resource\");\n                }\n\n                let root_element_title = doc.createElement(\"title\");\n                let root_element_text = doc.createTextNode(sections[root_section].name);\n                root_element_title.appendChild(root_element_text);\n                root_element.appendChild(root_element_title);\n\n                let sections_copy = JSON.parse(JSON.stringify(sections));\n                children_elements = sections_copy[root_section].children;\n\n                let unit;\n                if(typeof sections[root_section].unitNumber === \"undefined\") {\n                    unit = \"blank\";\n                } else {\n                    unit = sections[root_section].unitNumber;\n                }\n                // Added root element for resource iteration\n                resource_elements.push({\n                    path: \"unit\" + unit + \"/\" + this.santinize_id(sections[root_section].id) + \".html\",\n                    id: sections[root_section].id,\n                });\n\n                // Unit children Tree\n                while (children_elements.length !== 0) {\n                    let actual_child = children_elements.shift();\n                    let branch = this.xmlOrganizationBranch(actual_child, actual_child, sections_copy, doc, resource_elements);\n                    if(typeof branch !== \"undefined\") {\n                        root_element.appendChild(branch);\n                    }\n                }\n\n                // end children Tree\n                organization.appendChild(root_element);\n            }\n\n        }\n        // end of Organization Item Tree\n\n        organizations.appendChild(organization);\n\n        // /   RESOURCE ITEMS\n        let resources = doc.createElement(\"resources\");\n        for (let i = 0; i < resource_elements.length; i++) {\n            if (!Dali.Config.sections_have_content && (resource_elements[i].id.indexOf(ID_PREFIX_SECTION) !== -1)) {\n\n            }\n            let resource = doc.createElement(\"resource\");\n            resource.setAttribute(\"identifier\", this.santinize_id(resource_elements[i].id) + \"_resource\");\n            resource.setAttribute(\"type\", \"webcontent\");\n            resource.setAttribute(\"adlcp:scormtype\", \"sco\");\n            resource.setAttribute(\"href\", resource_elements[i].path);\n\n            let file = doc.createElement(\"file\");\n            file.setAttribute(\"href\", resource_elements[i].path);\n            resource.appendChild(file);\n\n            resources.appendChild(resource);\n            // End of pieze of code to iterate\n        }\n\n        // Common DATA\n\n        // / APPEND DATA\n        manifest.appendChild(metadata);\n        manifest.appendChild(organizations);\n        manifest.appendChild(resources);\n\n        doc.appendChild(manifest);\n\n        return (this.beautifyXML(new XMLSerializer().serializeToString(doc)));\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/scorm/main.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 540,
    "kind": "file",
    "name": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "content": "import * as API from './scorm_wrapper';\nimport Config from './../config';\nimport { isSection } from '../../common/utils';\n\nexport function init() {\n    let result = API.doInitialize();\n    let currentStatus = API.doGetValue(\"cmi.completion_status\");\n    let bookmark = API.doGetValue(\"cmi.location\");\n    if (currentStatus !== 'completed') {\n        currentStatus = \"incomplete\";\n    }\n\n    return { currentStatus: currentStatus, bookmark: bookmark };\n}\n\nexport function changeInitialState() {\n    let length = API.doGetValue(\"cmi.objectives._count\");\n    let scores = [];\n    let visited = [];\n    for (let i = 1; i < length; i++) {\n        let obj = API.doGetValue(\"cmi.objectives.\" + i + \".score.raw\");\n        let comp = API.doGetValue(\"cmi.objectives.\" + i + \".completion_status\");\n        scores.push(!obj || isNaN(obj) ? 0 : parseFloat(obj));\n        visited.push(comp);\n    }\n    return { scores: scores, visited: visited };\n}\n\nexport function changeLocation(id) {\n    API.doSetValue(\"cmi.location\", id);\n    return API.doCommit();\n}\n\nexport function savePreviousResults(el, navsIds, trackProgress) {\n    let num = getPageNum(el, navsIds);\n    if (trackProgress) {\n        setScore(\"objectives.\" + num + \".\", 0, 0, 0, 0, \"completed\", \"passed\");\n    } else {\n        setScore(\"objectives.\" + num + \".\", 0, 1, 1, 1, \"completed\", \"passed\");\n    }\n\n    API.doCommit();\n    return { index: num - 1, score: 1, visited: \"completed\" };\n}\n\nexport function setFinalScore(scores, visited, trackProgress) {\n    let sizeSc = scores.length || 1;\n    let sizeV = visited.length || 1;\n    let num = 0;\n    let sumSc = scores.reduce((a, b) => a + b, 0);\n    let sumV = visited.reduce((a, b) => a + (b === \"completed\" ? 1 : 0), 0);\n    let avgSc = sumSc / sizeSc;\n    let avgV = sumV / sizeV;\n    let thresholdSc = API.doGetValue(\"cmi.scaled_passing_score\") || 0.8;\n    let thresholdV = API.doGetValue(\"cmi.completion_threshold\") || 0.8;\n    let isPassed = true;\n    let isComplete = true;\n    if (trackProgress) {\n        /* Course is passed when more pages than threshold are viewed*/\n        let completed = avgV >= thresholdV;\n        isPassed = completed ? \"passed\" : \"failed\";\n        isComplete = completed ? \"completed\" : \"incomplete\";\n        setScore(\"objectives.\" + num + \".\", 0, sizeV, sumV, avgV, isComplete, isPassed);\n        setScore(\"\", 0, sizeV, sumV, avgV, isComplete, isPassed);\n    } else {\n        /* Course is passed when the total score is greater than the threshold*/\n        isPassed = avgSc >= thresholdSc ? \"passed\" : \"failed\";\n        isComplete = avgV >= thresholdV ? \"completed\" : \"incomplete\";\n        setScore(\"objectives.\" + num + \".\", 0, sizeSc, sumSc, avgSc, isComplete, isPassed);\n        setScore(\"\", 0, sizeSc, sumSc, avgSc, isComplete, isPassed);\n    }\n    // console.log('setfinal', 'track?' + trackProgress, \"sizeV: \"+ sizeV,\"sumV: \"+  sumV, \"avgV:\" + avgV, \"sizeSc\" + sizeSc, \"sUMSc\" + sumSc, \"avgSc\" + avgSc, isComplete, isPassed);\n    return API.doCommit();\n}\n\nexport function finish() {\n\n    // if (!window.terminated) {\n    // API.doSetValue(\"cmi.success_status\", \"passed\");\n    // API.doSetValue(\"cmi.completion_status\", \"completed\");\n    // set exit to suspend\n    API.doSetValue(\"cmi.exit\", \"suspend\");\n    // API.doSetValue(\"cmi.exit\", \"\");\n    // issue a suspendAll navigation request\n    // API.doSetValue(\"adl.nav.request\", \"exitAll\");\n    // API.doSetValue(\"adl.nav.request\", \"suspendAll\");\n    API.doTerminate();\n    window.terminated = true;\n    // }\n}\n\nfunction countScore(id) {\n    return Config.sections_have_content || (!Config.sections_have_content && !isSection(id));\n}\n\nfunction getPageNum(el, navsIds) {\n    let newIds = navsIds.filter(countScore);\n    let num = newIds.indexOf(el) + 1;\n    return num;\n}\n\nfunction setScore(who, min, max, raw, scaled, completion_status, success_status) {\n    API.doSetValue(\"cmi.\" + who + \"score.scaled\", scaled);\n    API.doSetValue(\"cmi.\" + who + \"score.min\", min);\n    API.doSetValue(\"cmi.\" + who + \"score.max\", max);\n    API.doSetValue(\"cmi.\" + who + \"score.raw\", raw);\n    API.doSetValue(\"cmi.\" + who + \"completion_status\", completion_status);\n    API.doSetValue(\"cmi.\" + who + \"success_status\", success_status);\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "function",
    "name": "init",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~init",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": "{init}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"currentStatus\": *, \"bookmark\": *}"
      ]
    }
  },
  {
    "__docId__": 542,
    "kind": "function",
    "name": "changeInitialState",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~changeInitialState",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": "{changeInitialState}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"scores\": *, \"visited\": *}"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "function",
    "name": "changeLocation",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~changeLocation",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": "{changeLocation}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 544,
    "kind": "function",
    "name": "savePreviousResults",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~savePreviousResults",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": "{savePreviousResults}",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "el",
        "types": [
          "*"
        ]
      },
      {
        "name": "navsIds",
        "types": [
          "*"
        ]
      },
      {
        "name": "trackProgress",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"index\": *, \"score\": number, \"visited\": string}"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "function",
    "name": "setFinalScore",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~setFinalScore",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": "{setFinalScore}",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "scores",
        "types": [
          "*"
        ]
      },
      {
        "name": "visited",
        "types": [
          "*"
        ]
      },
      {
        "name": "trackProgress",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 546,
    "kind": "function",
    "name": "finish",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~finish",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": "{finish}",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 547,
    "kind": "function",
    "name": "countScore",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~countScore",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 548,
    "kind": "function",
    "name": "getPageNum",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~getPageNum",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "el",
        "types": [
          "*"
        ]
      },
      {
        "name": "navsIds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 549,
    "kind": "function",
    "name": "setScore",
    "memberof": "DALI_EDITOR/core/scorm/scorm_utils.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_utils.es6~setScore",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_utils.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "who",
        "types": [
          "*"
        ]
      },
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      },
      {
        "name": "raw",
        "types": [
          "*"
        ]
      },
      {
        "name": "scaled",
        "types": [
          "*"
        ]
      },
      {
        "name": "completion_status",
        "types": [
          "*"
        ]
      },
      {
        "name": "success_status",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 550,
    "kind": "file",
    "name": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "content": "/*eslint-disable */\n/** **************************************************************************\nSCORM_2004_APIwrapper.js\n© 2000, 2011 Advanced Distributed Learning (ADL). Some Rights Reserved.\n*****************************************************************************\n\nAdvanced Distributed Learning (\"ADL\") grants you (\"Licensee\") a  non-exclusive, \nroyalty free, license to use and redistribute this  software in source and binary \ncode form, provided that i) this copyright  notice and license appear on all \ncopies of the software; and ii) Licensee does not utilize the software in a \nmanner which is disparaging to ADL.\n\nThis software is provided \"AS IS,\" without a warranty of any kind.  \nALL EXPRESS OR IMPLIED CONDITIONS, REPRESENTATIONS AND WARRANTIES, INCLUDING \nANY IMPLIED WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR \nNON-INFRINGEMENT, ARE HEREBY EXCLUDED.  ADL AND ITS LICENSORS SHALL NOT BE LIABLE \nFOR ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR \nDISTRIBUTING THE SOFTWARE OR ITS DERIVATIVES.  IN NO EVENT WILL ADL OR ITS LICENSORS \nBE LIABLE FOR ANY LOST REVENUE, PROFIT OR DATA, OR FOR DIRECT, INDIRECT, SPECIAL, \nCONSEQUENTIAL, INCIDENTAL OR PUNITIVE DAMAGES, HOWEVER CAUSED AND REGARDLESS OF THE \nTHEORY OF LIABILITY, ARISING OUT OF THE USE OF OR INABILITY TO USE SOFTWARE, EVEN IF \nADL HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.\n\n*****************************************************************************\n*SCORM_2004_APIwrapper.js code is licensed under the Creative Commons\nAttribution-ShareAlike 3.0 Unported License.\n\nTo view a copy of this license:\n\n     - Visit http://creativecommons.org/licenses/by-sa/3.0/ \n     - Or send a letter to\n            Creative Commons, 444 Castro Street,  Suite 900, Mountain View,\n            California, 94041, USA.\n\nThe following is a summary of the full license which is available at:\n\n      - http://creativecommons.org/licenses/by-sa/3.0/legalcode\n\n*****************************************************************************\n\nCreative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)\n\nYou are free to:\n\n     - Share : to copy, distribute and transmit the work\n     - Remix : to adapt the work\n\nUnder the following conditions:\n\n     - Attribution: You must attribute the work in the manner specified by \n       the author or licensor (but not in any way that suggests that they \n       endorse you or your use of the work).\n\n     - Share Alike: If you alter, transform, or build upon this work, you \n       may distribute the resulting work only under the same or similar \n       license to this one.\n\nWith the understanding that:\n\n     - Waiver: Any of the above conditions can be waived if you get permission \n       from the copyright holder.\n\n     - Public Domain: Where the work or any of its elements is in the public \n       domain under applicable law, that status is in no way affected by the license.\n\n     - Other Rights: In no way are any of the following rights affected by the license:\n\n           * Your fair dealing or fair use rights, or other applicable copyright \n             exceptions and limitations;\n\n           * The author's moral rights;\n\n           * Rights other persons may have either in the work itself or in how the \n             work is used, such as publicity or privacy rights.\n\n     - Notice: For any reuse or distribution, you must make clear to others the \n               license terms of this work.\n\n****************************************************************************/\n/** *****************************************************************************\n** Usage: Executable course content can call the API Wrapper\n**      functions as follows:\n**\n**    javascript:\n**          var result = doInitialize();\n**          if (result != true)\n**          {\n**             // handle error\n**          }\n**\n**    authorware:\n**          result := ReadURL(\"javascript:doInitialize()\", 100)\n**\n**    director:\n**          result = externalEvent(\"javascript:doInitialize()\")\n**\n**\n*******************************************************************************/\n\nlet debug = true; // set this to false to turn debugging off\n\nlet output = window.console; // output can be set to any object that has a log(string) function\n// such as: var output = { log: function(str){alert(str);} };\n\n// Define exception/error codes\nlet _NoError = { \"code\": \"0\", \"string\": \"No Error\", \"diagnostic\": \"No Error\" };\nlet _GeneralException = { \"code\": \"101\", \"string\": \"General Exception\", \"diagnostic\": \"General Exception\" };\nlet _AlreadyInitialized = { \"code\": \"103\", \"string\": \"Already Initialized\", \"diagnostic\": \"Already Initialized\" };\n\nlet initialized = false;\n\n// local variable definitions\nlet apiHandle = null;\n\n/** *****************************************************************************\n**\n** Function: doInitialize()\n** Inputs:  None\n** Return:  true if the initialization was successful, or\n**          false if the initialization failed.\n**\n** Description:\n** Initialize communication with LMS by calling the Initialize\n** function which will be implemented by the LMS.\n**\n*******************************************************************************/\nexport function doInitialize()\n{\n    if (initialized) {return \"true\";}\n\n    let api = getAPIHandle();\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nInitialize was not successful.\");\n        return \"false\";\n    }\n\n    let result = api.Initialize(\"\");\n\n    if (result.toString() != \"true\")\n    {\n        let err = ErrorHandler();\n        message(\"Initialize failed with error code: \" + err.code);\n    }\n    else\n    {\n        initialized = true;\n    }\n\n    return result.toString();\n}\n\n/** *****************************************************************************\n**\n** Function doTerminate()\n** Inputs:  None\n** Return:  true if successful\n**          false if failed.\n**\n** Description:\n** Close communication with LMS by calling the Terminate\n** function which will be implemented by the LMS\n**\n*******************************************************************************/\nexport function doTerminate()\n{\n    if (! initialized) {return \"true\";}\n\n    let api = getAPIHandle();\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nTerminate was not successful.\");\n        return \"false\";\n    }\n\n    // call the Terminate function that should be implemented by the API\n    let result = api.Terminate(\"\");\n    if (result.toString() != \"true\")\n    {\n        let err = ErrorHandler();\n        message(\"Terminate failed with error code: \" + err.code);\n    }\n\n    initialized = false;\n\n    return result.toString();\n}\n\n/** *****************************************************************************\n**\n** Function doGetValue(name)\n** Inputs:  name - string representing the cmi data model defined category or\n**             element (e.g. cmi.learner_id)\n** Return:  The value presently assigned by the LMS to the cmi data model\n**       element defined by the element or category identified by the name\n**       input value.\n**\n** Description:\n** Wraps the call to the GetValue method\n**\n*******************************************************************************/\nexport function doGetValue(name)\n{\n    let api = getAPIHandle();\n    let result = \"\";\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nGetValue was not successful.\");\n    }\n    else if (!initialized && ! doInitialize())\n    {\n        let err = ErrorHandler();\n        message(\"GetValue failed - Could not initialize communication with the LMS - error code: \" + err.code);\n    }\n    else\n    {\n        result = api.GetValue(name);\n\n        let error = ErrorHandler();\n        if (error.code != _NoError.code)\n        {\n            // an error was encountered so display the error description\n            message(\"GetValue(\" + name + \") failed. \\n\" + error.code + \": \" + error.string);\n            result = \"\";\n        }\n    }\n    return result.toString();\n}\n\n/** *****************************************************************************\n**\n** Function doSetValue(name, value)\n** Inputs:  name -string representing the data model defined category or element\n**          value -the value that the named element or category will be assigned\n** Return:  true if successful\n**          false if failed.\n**\n** Description:\n** Wraps the call to the SetValue function\n**\n*******************************************************************************/\nexport function doSetValue(name, value)\n{\n    let api = getAPIHandle();\n    let result = \"false\";\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nSetValue was not successful.\");\n    }\n    else if (!initialized && !doInitialize())\n    {\n        let error = ErrorHandler();\n        message(\"SetValue failed - Could not initialize communication with the LMS - error code: \" + error.code);\n    }\n    else\n    {\n        result = api.SetValue(name, value);\n        if (result.toString() != \"true\")\n        {\n            let err = ErrorHandler();\n            message(\"SetValue(\" + name + \", \" + value + \") failed. \\n\" + err.code + \": \" + err.string);\n        }\n    }\n\n    return result.toString();\n}\n\n/** *****************************************************************************\n**\n** Function doCommit()\n** Inputs:  None\n** Return:  true if successful\n**          false if failed\n**\n** Description:\n** Commits the data to the LMS.\n**\n*******************************************************************************/\nexport function doCommit()\n{\n    let api = getAPIHandle();\n    let result = \"false\";\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nCommit was not successful.\");\n    }\n    else if (!initialized && ! doInitialize())\n    {\n        let error = ErrorHandler();\n        message(\"Commit failed - Could not initialize communication with the LMS - error code: \" + error.code);\n    }\n    else\n    {\n        result = api.Commit(\"\");\n        if (result != \"true\")\n        {\n            let err = ErrorHandler();\n            message(\"Commit failed - error code: \" + err.code);\n        }\n    }\n\n    return result.toString();\n}\n\n/** *****************************************************************************\n**\n** Function doGetLastError()\n** Inputs:  None\n** Return:  The error code that was set by the last LMS function call\n**\n** Description:\n** Call the GetLastError function\n**\n*******************************************************************************/\nexport function doGetLastError()\n{\n    let api = getAPIHandle();\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nGetLastError was not successful.\");\n        // since we can't get the error code from the LMS, return a general error\n        return _GeneralException.code;\n    }\n\n    return api.GetLastError().toString();\n}\n\n/** *****************************************************************************\n**\n** Function doGetErrorString(errorCode)\n** Inputs:  errorCode - Error Code\n** Return:  The textual description that corresponds to the input error code\n**\n** Description:\n** Call the GetErrorString function\n**\n********************************************************************************/\nexport function doGetErrorString(errorCode)\n{\n    let api = getAPIHandle();\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nGetErrorString was not successful.\");\n        return _GeneralException.string;\n    }\n\n    return api.GetErrorString(errorCode).toString();\n}\n\n/** *****************************************************************************\n**\n** Function doGetDiagnostic(errorCode)\n** Inputs:  errorCode - Error Code(integer format), or null\n** Return:  The vendor specific textual description that corresponds to the\n**          input error code\n**\n** Description:\n** Call the LMSGetDiagnostic function\n**\n*******************************************************************************/\nexport function doGetDiagnostic(errorCode)\n{\n    let api = getAPIHandle();\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nGetDiagnostic was not successful.\");\n        return \"Unable to locate the LMS's API Implementation. GetDiagnostic was not successful.\";\n    }\n\n    return api.GetDiagnostic(errorCode).toString();\n}\n\n/** *****************************************************************************\n**\n** Function ErrorHandler()\n** Inputs:  None\n** Return:  The current error\n**\n** Description:\n** Determines if an error was encountered by the previous API call\n** and if so, returns the error.\n**\n** Usage:\n** var last_error = ErrorHandler();\n** if (last_error.code != _NoError.code)\n** {\n**    message(\"Encountered an error. Code: \" + last_error.code +\n**                                \"\\nMessage: \" + last_error.string +\n**                                \"\\nDiagnostics: \" + last_error.diagnostic);\n** }\n*******************************************************************************/\nexport function ErrorHandler()\n{\n    let error = { \"code\": _NoError.code, \"string\": _NoError.string, \"diagnostic\": _NoError.diagnostic };\n    let api = getAPIHandle();\n    if (api == null)\n    {\n        message(\"Unable to locate the LMS's API Implementation.\\nCannot determine LMS error code.\");\n        error.code = _GeneralException.code;\n        error.string = _GeneralException.string;\n        error.diagnostic = \"Unable to locate the LMS's API Implementation. Cannot determine LMS error code.\";\n        return error;\n    }\n\n    // check for errors caused by or from the LMS\n    error.code = api.GetLastError().toString();\n    if (error.code != _NoError.code)\n    {\n        // an error was encountered so display the error description\n        error.string = api.GetErrorString(error.code);\n        error.diagnostic = api.GetDiagnostic(\"\");\n    }\n\n    return error;\n}\n\n/** ****************************************************************************\n**\n** Function getAPIHandle()\n** Inputs:  None\n** Return:  value contained by APIHandle\n**\n** Description:\n** Returns the handle to API object if it was previously set,\n** otherwise it returns null\n**\n*******************************************************************************/\nexport function getAPIHandle()\n{\n    if (apiHandle == null)\n    {\n        apiHandle = getAPI();\n    }\n\n    return apiHandle;\n}\n\n/** *****************************************************************************\n**\n** Function findAPI(win)\n** Inputs:  win - a Window Object\n** Return:  If an API object is found, it's returned, otherwise null is returned\n**\n** Description:\n** This function looks for an object named API_1484_11 in parent and opener\n** windows\n**\n*******************************************************************************/\nexport function findAPI(win)\n{\n    let findAPITries = 0;\n    while ((win.API_1484_11 == null) && (win.parent != null) && (win.parent != win))\n    {\n        findAPITries++;\n\n        if (findAPITries > 500)\n        {\n            message(\"Error finding API -- too deeply nested.\");\n            return null;\n        }\n\n        win = win.parent;\n\n    }\n    return win.API_1484_11;\n}\n\n/** *****************************************************************************\n**\n** Function getAPI()\n** Inputs:  none\n** Return:  If an API object is found, it's returned, otherwise null is returned\n**\n** Description:\n** This function looks for an object named API_1484_11, first in the current window's\n** frame hierarchy and then, if necessary, in the current window's opener window\n** hierarchy (if there is an opener window).\n**\n*******************************************************************************/\nexport function getAPI()\n{\n    let theAPI = findAPI(window);\n    if ((theAPI == null) && (window.opener != null) && (typeof(window.opener) !== \"undefined\"))\n    {\n        theAPI = findAPI(window.opener);\n    }\n    if (theAPI == null)\n    {\n        message(\"Unable to find an API adapter\");\n    }\n    return theAPI;\n}\n\n/** *****************************************************************************\n**\n** Function findObjective(objId)\n** Inputs:  objId - the id of the objective\n** Return:  the index where this objective is located\n**\n** Description:\n** This function looks for the objective within the objective array and returns\n** the index where it was found or it will create the objective for you and return\n** the new index.\n**\n*******************************************************************************/\nexport function findObjective(objId)\n{\n    let num = doGetValue(\"cmi.objectives._count\");\n    let objIndex = -1;\n\n    for (let i = 0; i < num; ++i) {\n        if (doGetValue(\"cmi.objectives.\" + i + \".id\") == objId) {\n            objIndex = i;\n            break;\n        }\n    }\n\n    if (objIndex == -1) {\n        message(\"Objective \" + objId + \" not found.\");\n        objIndex = num;\n        message(\"Creating new objective at index \" + objIndex);\n        doSetValue(\"cmi.objectives.\" + objIndex + \".id\", objId);\n    }\n    return objIndex;\n}\n\n/** *****************************************************************************\n** NOTE: This is a SCORM 2004 4th Edition feature.\n*\n** Function findDataStore(id)\n** Inputs:  id - the id of the data store\n** Return:  the index where this data store is located or -1 if the id wasn't found\n**\n** Description:\n** This function looks for the data store within the data array and returns\n** the index where it was found or returns -1 to indicate the id wasn't found\n** in the collection.\n**\n** Usage:\n** var dsIndex = findDataStore(\"myds\");\n** if (dsIndex > -1)\n** {\n**    doSetValue(\"adl.data.\" + dsIndex + \".store\", \"save this info...\");\n** }\n** else\n** {\n**    var appending_data = doGetValue(\"cmi.suspend_data\");\n**    doSetValue(\"cmi.suspend_data\", appending_data + \"myds:save this info\");\n** }\n*******************************************************************************/\nexport function findDataStore(id)\n{\n    let num = doGetValue(\"adl.data._count\");\n    let index = -1;\n\n    // if the get value was not null and is a number\n    // in other words, we got an index in the adl.data array\n    if (num != null && ! isNaN(num))\n    {\n        for (let i = 0; i < num; ++i)\n        {\n            if (doGetValue(\"adl.data.\" + i + \".id\") == id)\n            {\n                index = i;\n                break;\n            }\n        }\n\n        if (index == -1)\n        {\n            message(\"Data store \" + id + \" not found.\");\n        }\n    }\n\n    return index;\n}\n\n/** *****************************************************************************\n**\n** Function message(str)\n** Inputs:  String - message you want to send to the designated output\n** Return:  none\n** Depends on: boolean debug to indicate if output is wanted\n**             object output to handle the messages. must implement a function \n**             log(string)\n**\n** Description:\n** This function outputs messages to a specified output. You can define your own \n** output object. It will just need to implement a log(string) function. This \n** interface was used so that the output could be assigned the window.console object.\n*******************************************************************************/\nexport function message(str)\n{\n    if(debug)\n    {\n        output.log(str);\n    }\n}\n/*eslint-enable */\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 551,
    "kind": "variable",
    "name": "debug",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~debug",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": null,
    "description": "****************************************************************************\n* Usage: Executable course content can call the API Wrapper\n*      functions as follows:\n*\n*    javascript:\n*          var result = doInitialize();\n*          if (result != true)\n*          {\n*             // handle error\n*          }\n*\n*    authorware:\n*          result := ReadURL(\"javascript:doInitialize()\", 100)\n*\n*    director:\n*          result = externalEvent(\"javascript:doInitialize()\")\n*\n*\n*****************************************************************************",
    "lineNumber": 100,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 552,
    "kind": "variable",
    "name": "output",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~output",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 553,
    "kind": "variable",
    "name": "_NoError",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~_NoError",
    "access": "private",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "type": {
      "types": [
        "{\"code\": string, \"string\": string, \"diagnostic\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 554,
    "kind": "variable",
    "name": "_GeneralException",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~_GeneralException",
    "access": "private",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "{\"code\": string, \"string\": string, \"diagnostic\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 555,
    "kind": "variable",
    "name": "_AlreadyInitialized",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~_AlreadyInitialized",
    "access": "private",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "{\"code\": string, \"string\": string, \"diagnostic\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 556,
    "kind": "variable",
    "name": "initialized",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~initialized",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 557,
    "kind": "variable",
    "name": "apiHandle",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~apiHandle",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 558,
    "kind": "function",
    "name": "doInitialize",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doInitialize",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doInitialize}",
    "description": "****************************************************************************\n*\n* Function: doInitialize()\n* Inputs:  None\n* Return:  true if the initialization was successful, or\n*          false if the initialization failed.\n*\n* Description:\n* Initialize communication with LMS by calling the Initialize\n* function which will be implemented by the LMS.\n*\n*****************************************************************************",
    "lineNumber": 127,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 559,
    "kind": "function",
    "name": "doTerminate",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doTerminate",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doTerminate}",
    "description": "****************************************************************************\n*\n* Function doTerminate()\n* Inputs:  None\n* Return:  true if successful\n*          false if failed.\n*\n* Description:\n* Close communication with LMS by calling the Terminate\n* function which will be implemented by the LMS\n*\n*****************************************************************************",
    "lineNumber": 165,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 560,
    "kind": "function",
    "name": "doGetValue",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doGetValue",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doGetValue}",
    "description": "****************************************************************************\n*\n* Function doGetValue(name)\n* Inputs:  name - string representing the cmi data model defined category or\n*             element (e.g. cmi.learner_id)\n* Return:  The value presently assigned by the LMS to the cmi data model\n*       element defined by the element or category identified by the name\n*       input value.\n*\n* Description:\n* Wraps the call to the GetValue method\n*\n*****************************************************************************",
    "lineNumber": 202,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 561,
    "kind": "function",
    "name": "doSetValue",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doSetValue",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doSetValue}",
    "description": "****************************************************************************\n*\n* Function doSetValue(name, value)\n* Inputs:  name -string representing the data model defined category or element\n*          value -the value that the named element or category will be assigned\n* Return:  true if successful\n*          false if failed.\n*\n* Description:\n* Wraps the call to the SetValue function\n*\n*****************************************************************************",
    "lineNumber": 242,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 562,
    "kind": "function",
    "name": "doCommit",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doCommit",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doCommit}",
    "description": "****************************************************************************\n*\n* Function doCommit()\n* Inputs:  None\n* Return:  true if successful\n*          false if failed\n*\n* Description:\n* Commits the data to the LMS.\n*\n*****************************************************************************",
    "lineNumber": 279,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 563,
    "kind": "function",
    "name": "doGetLastError",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doGetLastError",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doGetLastError}",
    "description": "****************************************************************************\n*\n* Function doGetLastError()\n* Inputs:  None\n* Return:  The error code that was set by the last LMS function call\n*\n* Description:\n* Call the GetLastError function\n*\n*****************************************************************************",
    "lineNumber": 315,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 564,
    "kind": "function",
    "name": "doGetErrorString",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doGetErrorString",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doGetErrorString}",
    "description": "****************************************************************************\n*\n* Function doGetErrorString(errorCode)\n* Inputs:  errorCode - Error Code\n* Return:  The textual description that corresponds to the input error code\n*\n* Description:\n* Call the GetErrorString function\n*\n******************************************************************************",
    "lineNumber": 338,
    "params": [
      {
        "name": "errorCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 565,
    "kind": "function",
    "name": "doGetDiagnostic",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~doGetDiagnostic",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{doGetDiagnostic}",
    "description": "****************************************************************************\n*\n* Function doGetDiagnostic(errorCode)\n* Inputs:  errorCode - Error Code(integer format), or null\n* Return:  The vendor specific textual description that corresponds to the\n*          input error code\n*\n* Description:\n* Call the LMSGetDiagnostic function\n*\n*****************************************************************************",
    "lineNumber": 361,
    "params": [
      {
        "name": "errorCode",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 566,
    "kind": "function",
    "name": "ErrorHandler",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~ErrorHandler",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{ErrorHandler}",
    "description": "****************************************************************************\n*\n* Function ErrorHandler()\n* Inputs:  None\n* Return:  The current error\n*\n* Description:\n* Determines if an error was encountered by the previous API call\n* and if so, returns the error.\n*\n* Usage:\n* var last_error = ErrorHandler();\n* if (last_error.code != _NoError.code)\n* {\n*    message(\"Encountered an error. Code: \" + last_error.code +\n*                                \"\\nMessage: \" + last_error.string +\n*                                \"\\nDiagnostics: \" + last_error.diagnostic);\n* }\n*****************************************************************************",
    "lineNumber": 392,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 567,
    "kind": "function",
    "name": "getAPIHandle",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~getAPIHandle",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{getAPIHandle}",
    "description": "***************************************************************************\n*\n* Function getAPIHandle()\n* Inputs:  None\n* Return:  value contained by APIHandle\n*\n* Description:\n* Returns the handle to API object if it was previously set,\n* otherwise it returns null\n*\n*****************************************************************************",
    "lineNumber": 428,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "function",
    "name": "findAPI",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~findAPI",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{findAPI}",
    "description": "****************************************************************************\n*\n* Function findAPI(win)\n* Inputs:  win - a Window Object\n* Return:  If an API object is found, it's returned, otherwise null is returned\n*\n* Description:\n* This function looks for an object named API_1484_11 in parent and opener\n* windows\n*\n*****************************************************************************",
    "lineNumber": 449,
    "params": [
      {
        "name": "win",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 569,
    "kind": "function",
    "name": "getAPI",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~getAPI",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{getAPI}",
    "description": "****************************************************************************\n*\n* Function getAPI()\n* Inputs:  none\n* Return:  If an API object is found, it's returned, otherwise null is returned\n*\n* Description:\n* This function looks for an object named API_1484_11, first in the current window's\n* frame hierarchy and then, if necessary, in the current window's opener window\n* hierarchy (if there is an opener window).\n*\n*****************************************************************************",
    "lineNumber": 480,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 570,
    "kind": "function",
    "name": "findObjective",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~findObjective",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{findObjective}",
    "description": "****************************************************************************\n*\n* Function findObjective(objId)\n* Inputs:  objId - the id of the objective\n* Return:  the index where this objective is located\n*\n* Description:\n* This function looks for the objective within the objective array and returns\n* the index where it was found or it will create the objective for you and return\n* the new index.\n*\n*****************************************************************************",
    "lineNumber": 506,
    "params": [
      {
        "name": "objId",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 571,
    "kind": "function",
    "name": "findDataStore",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~findDataStore",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{findDataStore}",
    "description": "****************************************************************************\n* NOTE: This is a SCORM 2004 4th Edition feature.\n\n* Function findDataStore(id)\n* Inputs:  id - the id of the data store\n* Return:  the index where this data store is located or -1 if the id wasn't found\n*\n* Description:\n* This function looks for the data store within the data array and returns\n* the index where it was found or returns -1 to indicate the id wasn't found\n* in the collection.\n*\n* Usage:\n* var dsIndex = findDataStore(\"myds\");\n* if (dsIndex > -1)\n* {\n*    doSetValue(\"adl.data.\" + dsIndex + \".store\", \"save this info...\");\n* }\n* else\n* {\n*    var appending_data = doGetValue(\"cmi.suspend_data\");\n*    doSetValue(\"cmi.suspend_data\", appending_data + \"myds:save this info\");\n* }\n*****************************************************************************",
    "lineNumber": 551,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 572,
    "kind": "function",
    "name": "message",
    "memberof": "DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/scorm/scorm_wrapper.es6~message",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/scorm/scorm_wrapper.es6",
    "importStyle": "{message}",
    "description": "****************************************************************************\n*\n* Function message(str)\n* Inputs:  String - message you want to send to the designated output\n* Return:  none\n* Depends on: boolean debug to indicate if output is wanted\n*             object output to handle the messages. must implement a function \n*             log(string)\n*\n* Description:\n* This function outputs messages to a specified output. You can define your own \n* output object. It will just need to implement a log(string) function. This \n* interface was used so that the output could be assigned the window.console object.\n*****************************************************************************",
    "lineNumber": 592,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 573,
    "kind": "file",
    "name": "DALI_EDITOR/core/temp_hack.es6",
    "content": "module.exports = require('./main').default;\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/temp_hack.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 574,
    "kind": "file",
    "name": "DALI_EDITOR/core/visor/base_plugin.es6",
    "content": "import Dali from './../main';\nlet html2json = require('html2json').html2json;\n\nexport default function() {\n    let descendant;\n    let extraFunctions = {};\n\n    let parseJson = function(json, state, hasVisorTemplate) {\n        if (json.child) {\n            for (let i = 0; i < json.child.length; i++) {\n                if (json.child[i].tag && json.child[i].tag === \"plugin\") {\n                    let height = state.__pluginContainerIds[json.child[i].attr['plugin-data-key']].height;\n                    height = !isNaN(height) ? height + \"px\" : height;\n                    json.child[i].attr[\"plugin-data-height\"] = height;\n                    if (!json.attr) {\n                        json.attr = {\n                            style: { height: height },\n                        };\n                    } else if (!json.attr.style) {\n                        json.attr.style = { height: height };\n                    } else {\n                        json.attr.style.height = height;\n                    }\n                    if (json.attr.style.minHeight) {\n                        delete json.attr.style.minHeight;\n                    }\n                }\n\n                parseJson(json.child[i], state, hasVisorTemplate);\n            }\n        }\n        if (json.attr && json.attr.className) {\n            json.attr.class = json.attr.className;\n            delete json.attr.className;\n        }\n        if (json.tag && json.tag === \"plugin\") {\n            if (!state.__pluginContainerIds) {\n                state.__pluginContainerIds = {};\n            }\n            let key = json.attr['plugin-data-key'];\n            if (!key) {\n                console.error(json.tag + \" has not defined plugin-data-key\");\n            } else if (state.__pluginContainerIds[key]) {\n                json.attr['plugin-data-id'] = state.__pluginContainerIds[key].id;\n            }\n        }\n    };\n\n    let plugin = {\n        create: function(obj) {\n            descendant = obj;\n\n            Object.keys(descendant).map(function(id) {\n                if (id !== 'init' &&\n                    id !== 'getConfig' &&\n                    id !== 'getToolbar' &&\n                    id !== 'getInitialState' &&\n                    id !== 'handleToolbar' &&\n                    id !== 'getConfigTemplate' &&\n                    id !== 'getRenderTemplate') {\n                    plugin[id] = descendant[id];\n                }\n            });\n        },\n        init: function() {\n            if (descendant.init) {\n                descendant.init();\n            }\n        },\n        export: function(state, name, hasChildren, id = \"\") {\n            let pluginObj, template, hasVisorTemplate;\n\n            if (!Dali.Visor.Plugins[name]) {\n                pluginObj = Dali.Plugins[name];\n                hasVisorTemplate = false;\n            } else {\n                pluginObj = Dali.Visor.Plugins[name];\n                hasVisorTemplate = true;\n            }\n            if (!pluginObj.getRenderTemplate) {\n                if (state.__text) {\n                    template = state.__text;\n                } else {\n                    template = \"<div></div>\";\n                    console.error(\"Plugin %s has not defined getRenderTemplate\", name);\n                }\n            } else {\n                template = pluginObj.getRenderTemplate(state);\n            }\n\n            let regexp = new RegExp(/[$]dali[$][.][\\w\\s]+[(]([^)]*)/g);\n            let match = regexp.exec(template);\n            let matches = [];\n\n            while (match !== null) {\n                matches.push(match);\n                match = regexp.exec(template);\n            }\n            matches.map(function(matchNew) {\n                if (matchNew[1].length === 0) {\n                    // no traducir pasar directamente la función pasarle directamenete Dali.Visor.Plugins[match[0]].function(event,props,)\n                    template = template.replace(matchNew[0], matchNew[0] + \"event, \\\"\" + id + \"\\\"\"); // template.replace(match[0], match[0] + \"event, this, __getPlugin(this)\");\n                } else {\n                    template = template.replace(matchNew[0], matchNew[0].replace(matchNew[1], \"event, \\\"\" + id + \"\\\"\")); // template.replace(match[0], match[0].replace(match[1], \"event, this, __getPlugin(this)\"));\n                }\n                template = template.replace(/[$]dali[$][.]/, \"Dali.Visor.Plugins.\" + name + \".\");\n            });\n\n            if (template.indexOf(\"pointer-events\") !== -1) {\n                template = template.replace(/pointer-events:[\\s'\"]+none[\\s'\"]+/g, \"\");\n            }\n\n            /* if (!hasChildren) {\n                return template;\n            }*/\n            let json = html2json(template);\n            parseJson(json, state, hasVisorTemplate);\n            return json;\n        },\n        registerExtraFunction: function(fn, alias) {\n            if (!alias) {\n                Object.keys(descendant).forEach(function(prop) {\n                    if (descendant[prop] === fn) {\n                        alias = prop;\n                    }\n                });\n            }\n            extraFunctions[alias] = fn;\n        },\n        getExtraFunctions: function() {\n            return Object.keys(extraFunctions);\n        },\n        callExtraFunction: function(alias, fnAlias) {\n            let element = $.find(\"[data-alias='\" + alias + \"']\");\n            if (element && extraFunctions && extraFunctions[fnAlias]) {\n                extraFunctions[fnAlias](element[0]);\n            }\n        },\n        triggerMark: function(element, value, stateElement) {\n            if (stateElement === undefined) {\n                stateElement = true;\n            }\n\n            if(!element) {\n                console.error(\"Invalid argument -> need parent with correct id @ triggerMark\");\n                return;\n            }\n            if(value) {\n                Dali.API.markTriggered(element, value, stateElement);\n            }\n        },\n    };\n\n    return plugin;\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/visor/base_plugin.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 575,
    "kind": "variable",
    "name": "html2json",
    "memberof": "DALI_EDITOR/core/visor/base_plugin.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/visor/base_plugin.es6~html2json",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/visor/base_plugin.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 576,
    "kind": "function",
    "name": "base_plugin",
    "memberof": "DALI_EDITOR/core/visor/base_plugin.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/visor/base_plugin.es6~base_plugin",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/visor/base_plugin.es6",
    "importStyle": "base_plugin",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 577,
    "kind": "file",
    "name": "DALI_EDITOR/core/visor/main.es6",
    "content": "import JSZip from 'jszip';\nimport JSZipUtils from 'jszip-utils';\nimport FileSaver from 'file-saver';\n\nimport Dali from './../main';\nimport Plugins from './plugins';\nimport { ID_PREFIX_SECTION } from '../../common/constants';\n\nconst visor_template = require(\"../../dist/lib/visor/index.ejs\");\n\nlet getDistinctName = function(name, namesUsed) {\n    namesUsed[name] = namesUsed[name] + 1;\n    return name + namesUsed[name];\n};\n\nlet titleModifier = function(name) {\n    if(name.indexOf(\"\\:\") !== -1) {\n        name = name.split(\"\\:\")[0];\n    }\n    return name;\n};\n\nlet parseEJS = function(path, page, state, fromScorm) {\n    state.fromScorm = fromScorm;\n    if (page !== 0 && state.navItemsById[page]) {\n        if (Object.keys(state.navItemsById[page].extraFiles).length !== 0) {\n            let extraFileBox = Object.keys(state.navItemsById[state.navItemSelected].extraFiles)[0];\n            let extraFileContainer = state.toolbarsById[extraFileBox];\n            return (visor_template({\n                visor_bundle_path: Dali.Config.visor_bundle,\n                state: state,\n            }));\n        }\n    }\n\n    state.fromScorm = fromScorm;\n    return (visor_template({\n        visor_bundle_path: Dali.Config.visor_bundle,\n        state: state,\n    }));\n};\n\nexport default {\n    Plugins: Plugins(),\n    exports: function(state) {\n        let nav_names_used = {};\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', Dali.Config.visor_bundle, true);\n        xhr.responseType = \"arraybuffer\";\n        xhr.onreadystatechange = function(evt) {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n\n                    JSZipUtils.getBinaryContent(Dali.Config.visor_zip, function(err, data) {\n                        if (err) {\n                            throw err; // or handle err\n                        }\n                        JSZip.loadAsync(data).then(function(zip) {\n                            /* var navs = state.navItemsById;\n\n                                state.navItemsIds.map(function (page) {\n                                    if(navs[page].hidden){\n                                        return;\n                                    }\n                                    if(page.indexOf(ID_PREFIX_SECTION) !== -1){\n                                        return;\n                                    }\n                                    var name = navs[page].name;\n\n                                    if( nav_names_used[name] === undefined ){\n                                        nav_names_used[name] = 0;\n                                    } else {\n                                        name = getDistinctName(name, nav_names_used);\n                                    }\n\n                                    var inner = parseEJS(Dali.Config.visor_ejs, page, state);\n                                    zip.file(\"dist/\" + name + \".html\", inner);\n                                    zip.file(\"js/visor-bundle.js\", xhr.response);\n                                });\n                            */\n                            let page = 0;\n                            if (state.navItemsIds && state.navItemsIds.length > 0) {\n                                if(!Dali.Config.sections_have_content) {\n                                    let i;\n                                    for (i = 0; i < state.navItemsIds.length; i++) {\n                                        if (state.navItemsIds[i].indexOf('se-') === -1) {\n                                            page = state.navItemsIds[i];\n                                            break;\n                                        }\n                                    }\n                                } else {\n                                    page = state.navItemsIds[0];\n                                }\n                            }\n                            state.navItemSelected = page;\n                            let content = parseEJS(Dali.Config.visor_ejs, page, state, false);\n                            zip.file(Dali.Config.dist_index, content);\n                            zip.file(Dali.Config.dist_visor_bundle, xhr.response);\n\n                            return zip;\n                        }).then(function(zip) {\n                            return zip.generateAsync({ type: \"blob\" });\n                        }).then(function(blob) {\n                            FileSaver.saveAs(blob, \"dalivisor.zip\");\n                        });\n                    });\n\n                }\n            }\n        };\n        xhr.send();\n\n    },\n    exportPage: function(state) {\n        if (Object.keys(state.navItemsById[state.navItemSelected].extraFiles).length !== 0) {\n            let extraFileBox = Object.keys(state.navItemsById[state.navItemSelected].extraFiles)[0];\n            let extraFileContainer = state.toolbarsById[extraFileBox];\n            state.fromScorm = false;\n            return (visor_template({\n                visor_bundle_path: Dali.Config.visor_bundle,\n                state: state,\n            }));\n        }\n        return visor_template({\n            state: state,\n            visor_bundle_path: Dali.Config.visor_bundle,\n            fromScorm: false,\n        });\n    },\n    exportScorm: function(state) {\n        let zip_title;\n        let xhr = new XMLHttpRequest();\n        xhr.open('GET', Dali.Config.visor_bundle, true);\n        xhr.responseType = \"arraybuffer\";\n        xhr.onreadystatechange = function(evt) {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n\n                    JSZipUtils.getBinaryContent(Dali.Config.scorm_zip, function(err, data) {\n                        if (err) {\n                            throw err; // or handle err\n                        }\n                        JSZip.loadAsync(data).then(function(zip) {\n                            let navs = state.navItemsById;\n                            let navsIds = state.navItemsIds;\n                            // var sections = [];\n                            /* state.navItemsIds.map(function (page) {\n                                if(navs[page].hidden){\n                                    return;\n                                }\n\n                                if ( !Dali.Config.sections_have_content && (page.indexOf(ID_PREFIX_SECTION) !== -1)){\n                                    return;\n                                }\n\n                                var nombre = navs[page].id.replace(/\\-/g,\"\\_\");\n                                var unit;\n                                if(typeof navs[page].unitNumber === \"undefined\"){\n                                    unit = \"blank\";\n                                } else {\n                                    unit = navs[page].unitNumber;\n                                }\n                                var path = \"unit\" + unit + \"/\";\n\n                                //sections.push(path + nombre);\n                                if(Object.keys(navs[page].extraFiles).length !== 0){\n                                    for(var boxKey in navs[page].extraFiles){\n                                        $.ajax({\n                                            url: navs[page].extraFiles[boxKey],\n                                            async: false,\n                                            success: function (response, status, aj) {\n                                                zip.file(path + nombre + \"_ejer.xml\", aj.responseText);\n                                                state.toolbarsById[boxKey].state.__xml_path = nombre + \"_ejer.xml\";\n                                                state.toolbarsById[boxKey].state.isScorm = true;\n                                            },\n                                            error: function (aj, status) {\n                                                console.error(\"Error while downloading XML file\");\n                                            }\n                                        });\n                                    }\n                                }\n                                var inner = parseEJS(Dali.Config.visor_ejs, page, state, true);\n                                //zip.file(path + nombre + \".html\", inner);\n                            });*/\n                            // zip.file(\"index.html\", Dali.Scorm.getIndex(navs));\n                            zip.file(\"imsmanifest.xml\", Dali.Scorm.createSPAimsManifest(navsIds, navs, state.globalConfig));\n                            let page = 0;\n                            if (state.navItemsIds && state.navItemsIds.length > 0) {\n                                if(!Dali.Config.sections_have_content) {\n                                    let i;\n                                    for (i = 0; i < state.navItemsIds.length; i++) {\n                                        if (state.navItemsIds[i].indexOf('se-') === -1) {\n                                            page = state.navItemsIds[i];\n                                            break;\n                                        }\n                                    }\n                                } else {\n                                    page = state.navItemsIds[0];\n                                }\n                            }\n                            state.fromScorm = true;\n                            state.navItemSelected = page;\n                            let content = parseEJS(Dali.Config.visor_ejs, page, state, true);\n                            zip.file(Dali.Config.dist_index, content);\n                            zip.file(Dali.Config.dist_visor_bundle, xhr.response);\n                            zip_title = state.globalConfig.title;\n\n                            return zip;\n                        }).then(function(zip) {\n                            return zip.generateAsync({ type: \"blob\" });\n                        }).then(function(blob) {\n                            FileSaver.saveAs(blob, zip_title.toLowerCase().replace(/\\s/g, '') + Math.round(+new Date() / 1000) + \".zip\");\n                        });\n                    });\n                }\n            }\n        };\n        xhr.send();\n    },\n    exportSeparateScorm: function(state) {\n        let zip_title;\n        JSZipUtils.getBinaryContent(Dali.Config.scorm_zip, function(err, data) {\n            if (err) {\n                throw err; // or handle err\n            }\n            JSZip.loadAsync(data).then(function(zip) {\n                let navs = state.navItemsById;\n                // var sections = [];\n                state.navItemsIds.map(function(page) {\n                    if(navs[page].hidden) {\n                        return;\n                    }\n\n                    if (!Dali.Config.sections_have_content && (page.indexOf(ID_PREFIX_SECTION) !== -1)) {\n                        return;\n                    }\n\n                    let nombre = navs[page].id.replace(/\\-/g, \"\\_\");\n                    let unit;\n                    if(typeof navs[page].unitNumber === \"undefined\") {\n                        unit = \"blank\";\n                    } else {\n                        unit = navs[page].unitNumber;\n                    }\n                    let path = \"unit\" + unit + \"/\";\n\n                    // sections.push(path + nombre);\n                    if(Object.keys(navs[page].extraFiles).length !== 0) {\n                        for(let boxKey in navs[page].extraFiles) {\n                            $.ajax({\n                                url: navs[page].extraFiles[boxKey],\n                                async: false,\n                                success: function(response, status, xhr) {\n                                    zip.file(path + nombre + \"_ejer.xml\", xhr.responseText);\n                                    state.toolbarsById[boxKey].state.__xml_path = nombre + \"_ejer.xml\";\n                                    state.toolbarsById[boxKey].state.isScorm = true;\n                                },\n                                error: function(xhr, status) {\n                                    console.error(\"Error while downloading XML file\");\n                                },\n                            });\n                        }\n                    }\n                    let inner = parseEJS(Dali.Config.visor_ejs, page, state, true);\n                    zip.file(path + nombre + \".html\", inner);\n                });\n                zip.file(\"index.html\", Dali.Scorm.getIndex(navs));\n                zip.file(\"imsmanifest.xml\", Dali.Scorm.createOldimsManifest(state.globalConfig.title, navs));\n                zip_title = state.globalConfig.title;\n\n                return zip;\n            }).then(function(zip) {\n                return zip.generateAsync({ type: \"blob\" });\n            }).then(function(blob) {\n                FileSaver.saveAs(blob, zip_title.toLowerCase().replace(/\\s/g, '') + Math.round(+new Date() / 1000) + \".zip\");\n            });\n        });\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/visor/main.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 578,
    "kind": "variable",
    "name": "visor_template",
    "memberof": "DALI_EDITOR/core/visor/main.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/visor/main.es6~visor_template",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/visor/main.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 579,
    "kind": "function",
    "name": "getDistinctName",
    "memberof": "DALI_EDITOR/core/visor/main.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/visor/main.es6~getDistinctName",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/visor/main.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "namesUsed",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "function",
    "name": "titleModifier",
    "memberof": "DALI_EDITOR/core/visor/main.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/visor/main.es6~titleModifier",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/visor/main.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 581,
    "kind": "function",
    "name": "parseEJS",
    "memberof": "DALI_EDITOR/core/visor/main.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/visor/main.es6~parseEJS",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/visor/main.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "page",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "fromScorm",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 582,
    "kind": "file",
    "name": "DALI_EDITOR/core/visor/plugins.es6",
    "content": "import Dali from './../main';\nimport BasePlugin from './base_plugin';\n\nexport default function() {\n    let pluginInstancesList = {};\n    return {\n        get: function(name) {\n            return pluginInstancesList[name];\n        },\n        getAll: function() {\n            return pluginInstancesList;\n        },\n        add: function(name) {\n            let basePlugin = new BasePlugin();\n            Dali.Visor.Plugins[name] = require('./../../plugins/' + name + '/' + name)[name](basePlugin);\n            try {\n                Dali.Visor.Plugins[name] = require('./../../plugins/' + name + '/visor/' + name)[name](basePlugin);\n            } catch (e) {\n            }\n\n            basePlugin.create(Dali.Visor.Plugins[name]);\n            basePlugin.init();\n            pluginInstancesList[name] = basePlugin;\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/visor/plugins.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 583,
    "kind": "function",
    "name": "plugins",
    "memberof": "DALI_EDITOR/core/visor/plugins.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/core/visor/plugins.es6~plugins",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/core/visor/plugins.es6",
    "importStyle": "plugins",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"get\": *, \"getAll\": *, \"add\": *}"
      ]
    }
  },
  {
    "__docId__": 584,
    "kind": "file",
    "name": "DALI_EDITOR/core/visor_entrypoint.es6",
    "content": "import { api, api_private } from './api';\nimport Visor from './visor/main';\nimport Scorm from './scorm/main';\nimport Config from './config';\n\nrequire('../sass/style.scss');\n\n// This requires dynamically all scss' kept in component's folders\nlet scss_context = require.context('../_editor', true, /\\.scss$/);\nscss_context.keys().map(scss_context);\nlet scss_visor_context = require.context('../_visor', true, /\\.scss$/);\nscss_visor_context.keys().map(scss_visor_context);\n\nwindow.ReactDOM = require('react-dom');\n\nwindow.Dali = {\n    API: api(),\n    API_Private: api_private(),\n    Visor: Visor,\n    Scorm: Scorm,\n};\n\nif (window.State) {\n    window.Dali.State = window.State;\n    window.State = undefined;\n}\n\nConfig.pluginList.map(id => {\n    try {\n        window.Dali.Visor.Plugins.add(id);\n    } catch (e) {\n    }\n});\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/core/visor_entrypoint.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 585,
    "kind": "variable",
    "name": "scss_context",
    "memberof": "DALI_EDITOR/core/visor_entrypoint.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/visor_entrypoint.es6~scss_context",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/visor_entrypoint.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 586,
    "kind": "variable",
    "name": "scss_visor_context",
    "memberof": "DALI_EDITOR/core/visor_entrypoint.es6",
    "static": true,
    "longname": "DALI_EDITOR/core/visor_entrypoint.es6~scss_visor_context",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/core/visor_entrypoint.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 587,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicImage/BasicImage.js",
    "content": "import React from 'react';\nexport function BasicImage(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'BasicImage',\n                displayName: Dali.i18n.t('BasicImage.PluginName'),\n                category: 'image',\n                flavor: 'react',\n                needsConfigModal: false,\n                needsTextEdition: false,\n                initialWidth: '25%',\n                aspectRatioButtonConfig: {\n                    location: [\"main\", \"__sortable\"],\n                    defaultValue: true,\n                },\n                icon: 'image',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n\n                        style: {\n                            __name: Dali.i18n.t('BasicImage.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: Dali.i18n.t('BasicImage.padding'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                backgroundColor: {\n                                    __name: Dali.i18n.t('BasicImage.background_color'),\n                                    type: 'color',\n                                    value: '#ffffff',\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('BasicImage.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('BasicImage.border_style'),\n                                    type: 'radio',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('BasicImage.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('BasicImage.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('BasicImage.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.01,\n                                },\n                            },\n                        },\n                        basic: {\n                            __name: Dali.i18n.t('BasicImage.source'),\n                            icon: 'link',\n                            buttons: {\n                                url: {\n                                    __name: 'URL',\n                                    type: 'vish_provider',\n                                    value: base.getState().url,\n                                    autoManaged: false,\n                                },\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getInitialState: function() {\n            return {\n                // url: 'http://nemanjakovacevic.net/wp-content/uploads/2013/07/placeholder.png'\n                // url: 'http://www.amicus.nieruchomosci.pl/grafika/no-image.png'\n                // url: 'https://bytesizemoments.com/wp-content/uploads/2014/04/placeholder.png',\n                url: '/images/placeholder.png',\n            };\n        },\n        getRenderTemplate: function(state) {\n            return (<div style={{ width: '100%', margin: '0px', height: '100%' }} ><img onClick={()=>{$dali$.showPreview();}} className=\"basicImageClass\" style={{ width: '100%', height: '100%' }} src={state.url} /></div>);\n\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n        imageClick: function() {\n            /* alert(\"Miaua!\");*/\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicImage/BasicImage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 588,
    "kind": "function",
    "name": "BasicImage",
    "memberof": "DALI_EDITOR/plugins/BasicImage/BasicImage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicImage/BasicImage.js~BasicImage",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicImage/BasicImage.js",
    "importStyle": "{BasicImage}",
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *, \"imageClick\": *}"
      ]
    }
  },
  {
    "__docId__": 589,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicImage/locales/en.js",
    "content": "module.exports = {\n    \"BasicImage\": {\n        \"background_color\": \"Background color\",\n        \"border_color\": \"Border color\",\n        \"border_size\": \"Border Size\",\n        \"border_style\": \"Border Style\",\n        \"box_style\": \"Box style\",\n        \"opacity\": \"Opacity\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Basic Image\",\n        \"radius\": \"Radius\",\n        \"source\": \"Source\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicImage/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 590,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicImage/locales/es.js",
    "content": "module.exports = {\n    \"BasicImage\": {\n        \"background_color\": \"Color de fondo\",\n        \"PluginName\": \"Imagen Básica\",\n        \"border_color\": \"Color de borde\",\n        \"border_size\": \"Grosor de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"box_style\": \"Estilo caja\",\n        \"opacity\": \"Opacidad\",\n        \"padding\": \"Padding\",\n        \"radius\": \"Radio\",\n        \"source\": \"Fuente\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicImage/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 591,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicImage/visor/BasicImage.js",
    "content": "import React from 'react';\n\nexport function BasicImage(base) {\n    return {\n        init: function() {\n            base.registerExtraFunction(this.imageClick, \"click\");\n        },\n        getRenderTemplate: function(state) {\n\n            let ImageComponent = () => {\n                return <div style={{ width: '100%', height: '100%' }}>\n                    <img style={{ width: '100%', height: '100%', left: '0px', top: '0px' }}\n                        src={state.url}\n                        onClick={()=>{ this.imageClick();}} />\n                </div>;\n            };\n            return <ImageComponent/>;\n\n        },\n        imageClick: function(e) {\n            alert('Im a magnificent log alert');\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicImage/visor/BasicImage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 592,
    "kind": "function",
    "name": "BasicImage",
    "memberof": "DALI_EDITOR/plugins/BasicImage/visor/BasicImage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicImage/visor/BasicImage.js~BasicImage",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicImage/visor/BasicImage.js",
    "importStyle": "{BasicImage}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"init\": *, \"getRenderTemplate\": *, \"imageClick\": *}"
      ]
    }
  },
  {
    "__docId__": 593,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicPlayer/BasicPlayer.js",
    "content": "import React from \"react\";\r\nimport PlayerPlugin from './components/PlayerPluginEditor.js';\r\nrequire('./BasicPlayer.scss');\r\n\r\nexport function BasicPlayer(base) {\r\n    return {\r\n        getConfig: function() {\r\n            return {\r\n                name: \"BasicPlayer\",\r\n                flavor: \"react\",\r\n                displayName: Dali.i18n.t(\"BasicPlayer.PluginName\"),\r\n                category: \"multimedia\",\r\n                icon: \"play_arrow\",\r\n            };\r\n        },\r\n        getToolbar: function() {\r\n            return {\r\n                main: {\r\n                    __name: \"Main\",\r\n                    accordions: {\r\n                        basic: {\r\n                            __name: Dali.i18n.t('BasicPlayer.Video'),\r\n                            icon: 'link',\r\n                            buttons: {\r\n                                url: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.URL'),\r\n                                    type: 'text',\r\n                                    value: base.getState().url,\r\n                                    autoManaged: false,\r\n                                },\r\n                                controls: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.Show_controls'),\r\n                                    type: 'checkbox',\r\n                                    checked: base.getState().controls,\r\n                                    autoManaged: false,\r\n                                },\r\n                            },\r\n                        },\r\n                        style: {\r\n                            __name: Dali.i18n.t('BasicPlayer.box_style'),\r\n                            icon: 'palette',\r\n                            buttons: {\r\n                                padding: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.padding'),\r\n                                    type: 'number',\r\n                                    value: 0,\r\n                                    min: 0,\r\n                                    max: 100,\r\n                                },\r\n                                borderWidth: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.border_size'),\r\n                                    type: 'number',\r\n                                    value: 0,\r\n                                    min: 0,\r\n                                    max: 10,\r\n                                },\r\n                                borderStyle: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.border_style'),\r\n                                    type: 'select',\r\n                                    value: 'solid',\r\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\r\n                                },\r\n                                borderColor: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.border_color'),\r\n                                    type: 'color',\r\n                                    value: '#000000',\r\n                                },\r\n                                borderRadius: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.radius'),\r\n                                    type: 'number',\r\n                                    value: 0,\r\n                                    min: 0,\r\n                                    max: 50,\r\n                                },\r\n                                opacity: {\r\n                                    __name: Dali.i18n.t('BasicPlayer.opacity'),\r\n                                    type: 'range',\r\n                                    value: 1,\r\n                                    min: 0,\r\n                                    max: 1,\r\n                                    step: 0.05,\r\n                                },\r\n\r\n                            },\r\n                        },\r\n                    },\r\n                },\r\n            };\r\n        },\r\n        getInitialState: function() {\r\n            return {\r\n                url: \"https://www.youtube.com/watch?time_continue=156&v=yqCwDurUrw0\",\r\n                controls: true,\r\n            };\r\n        },\r\n        getRenderTemplate: function(state) {\r\n            return (\r\n                /* jshint ignore:start */\r\n                <div style={{ width: \"100%\", height: \"100%\" }}>\r\n                    <PlayerPlugin style={{ width: \"100%\", height: \"100%\" }} state={state} />\r\n                </div>\r\n                /* jshint ignore:end */\r\n            );\r\n        },\r\n        handleToolbar: function(name, value) {\r\n            base.setState(name, value);\r\n        },\r\n\r\n    };\r\n}\r\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicPlayer/BasicPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 594,
    "kind": "function",
    "name": "BasicPlayer",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/BasicPlayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/BasicPlayer.js~BasicPlayer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicPlayer/BasicPlayer.js",
    "importStyle": "{BasicPlayer}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 595,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js",
    "content": "import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ReactPlayer from 'react-player';\nimport screenfull from 'screenfull';\n\nexport default class PlayerPlugin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            volume: 0.8,\n            duration: 0,\n            played: 0,\n            seeking: false,\n            fullscreen: false,\n            controls: true,\n        };\n    }\n\n    playPause() {\n        this.setState({ playing: !this.state.playing });\n    }\n\n    onClickFullscreen() {\n        if(!this.state.fullscreen) {\n            screenfull.request(findDOMNode(this.player_wrapper));\n        } else {\n            screenfull.exit();\n        }\n        this.setState({ fullscreen: !this.state.fullscreen });\n    }\n\n    setVolume(e) {\n        this.setState({ volume: parseFloat(e.target.value) });\n    }\n\n    setPlaybackRate(e) {\n        console.log(parseFloat(e.target.value));\n        this.setState({ playbackRate: parseFloat(e.target.value) });\n    }\n\n    onSeekMouseDown() {\n        this.setState({ seeking: true });\n    }\n\n    onSeekChange(e) {\n        this.setState({ played: parseFloat(e.target.value) });\n    }\n\n    onSeekMouseUp(e) {\n        this.setState({ seeking: false });\n        this.player.seekTo(parseFloat(e.target.value));\n    }\n\n    onProgress(state) {\n        // We only want to update time slider if we are not currently seeking\n        if (!this.state.seeking) {\n            this.setState(state);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.state.controls === true && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: true });\n        } else if (nextProps.state.controls === false && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: false });\n        }\n    }\n\n    render() {\n        /* jshint ignore:start */\n        return (\n            <div ref={player_wrapper => {this.player_wrapper = player_wrapper;}} style={{ width: \"100%\", height: \"100%\" }} className=\"player-wrapper\">\n                <ReactPlayer\n                    ref={player => { this.player = player; }}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    height=\"100%\"\n                    width=\"100%\"\n                    url={this.props.state.url}\n                    playing={this.state.playing}\n                    volume={this.state.volume}\n                    onPlay={() => this.setState({ playing: true })}\n                    onPause={() => this.setState({ playing: false })}\n                    onEnded={() => this.setState({ playing: false })}\n                    onProgress={this.onProgress.bind(this)}\n                    onDuration={duration => this.setState({ duration })}\n                />\n                {(this.state.controls) && (\n                    <div className=\"player-media-controls\">\n                        <button className=\"play-player-button\" onClick={this.playPause.bind(this)}>{this.state.playing ? <i className=\"material-icons\">pause</i> : <i className=\"material-icons\">play_arrow</i>}</button>\n                        <input className=\"progress-player-input\"\n                            type='range' min={0} max={1} step='any'\n                            value={this.state.played}\n                            onMouseDown={this.onSeekMouseDown.bind(this)}\n                            onChange={this.onSeekChange.bind(this)}\n                            onMouseUp={this.onSeekMouseUp.bind(this)}\n                        />\n                        {/* <progress className=\"progress-player-bar\" max={1} value={this.state.played} />*/}\n                        <input className=\"volume-player-input \" type='range' min={0} max={1} step='any' value={this.state.volume} onChange={this.setVolume.bind(this)} />\n                        <button className=\"fullscreen-player-button\" onClick={this.onClickFullscreen.bind(this)}>{(!this.state.fullscreen) ? <i className=\"material-icons\">fullscreen</i> : <i className=\"material-icons\">fullscreen_exit</i>}</button>\n                    </div>)}\n            </div>\n        );\n        /* jshint ignore:end */\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 596,
    "kind": "class",
    "name": "PlayerPlugin",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js",
    "importStyle": "PlayerPlugin",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 597,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 598,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#state",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"volume\": number, \"duration\": *, \"played\": *, \"seeking\": *, \"fullscreen\": *, \"controls\": boolean}"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "playPause",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#playPause",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "onClickFullscreen",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#onClickFullscreen",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "setVolume",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#setPlaybackRate",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "onSeekMouseDown",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#onSeekMouseDown",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 604,
    "kind": "method",
    "name": "onSeekChange",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#onSeekChange",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "onSeekMouseUp",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#onSeekMouseUp",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 606,
    "kind": "method",
    "name": "onProgress",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#onProgress",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 608,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 609,
    "kind": "member",
    "name": "player_wrapper",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#player_wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 610,
    "kind": "member",
    "name": "player",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPlugin.js~PlayerPlugin#player",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 611,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js",
    "content": "import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ReactPlayer from 'react-player';\nimport screenfull from 'screenfull';\n\nexport default class PlayerPlugin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            volume: 0.8,\n            duration: 0,\n            played: 0,\n            seeking: false,\n            fullscreen: false,\n            controls: true,\n        };\n    }\n\n    playPause() {\n        this.setState({ playing: !this.state.playing });\n    }\n\n    onClickFullscreen() {\n        if(!this.state.fullscreen) {\n            screenfull.request(findDOMNode(this.player_wrapper));\n        } else {\n            screenfull.exit();\n        }\n        this.setState({ fullscreen: !this.state.fullscreen });\n    }\n\n    setVolume(e) {\n        this.setState({ volume: parseFloat(e.target.value) });\n    }\n\n    setPlaybackRate(e) {\n        console.log(parseFloat(e.target.value));\n        this.setState({ playbackRate: parseFloat(e.target.value) });\n    }\n\n    onSeekMouseDown() {\n        this.setState({ seeking: true });\n    }\n\n    onSeekChange(e) {\n        this.setState({ played: parseFloat(e.target.value) });\n    }\n\n    onSeekMouseUp(e) {\n        this.setState({ seeking: false });\n        this.player.seekTo(parseFloat(e.target.value));\n    }\n\n    onProgress(state) {\n        // We only want to update time slider if we are not currently seeking\n        if (!this.state.seeking) {\n            this.setState(state);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.state.controls === true && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: true });\n        } else if (nextProps.state.controls === false && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: false });\n        }\n    }\n\n    render() {\n        /* jshint ignore:start */\n        return (\n            <div ref={player_wrapper => {this.player_wrapper = player_wrapper;}} style={{ width: \"100%\", height: \"100%\", pointerEvents: \"none\" }} className=\"player-wrapper\">\n                <ReactPlayer\n                    ref={player => { this.player = player; }}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    height=\"100%\"\n                    width=\"100%\"\n                    url={this.props.state.url}\n                    playing={this.state.playing}\n                    volume={this.state.volume}\n                    onPlay={() => this.setState({ playing: true })}\n                    onPause={() => this.setState({ playing: false })}\n                    onEnded={() => this.setState({ playing: false })}\n                    onProgress={this.onProgress.bind(this)}\n                    onDuration={duration => this.setState({ duration })}\n                />\n                {(this.state.controls) && (\n                    <div className=\"player-media-controls\">\n                        <button className=\"play-player-button\" onClick={this.playPause.bind(this)}>{this.state.playing ? <i className=\"material-icons\">pause</i> : <i className=\"material-icons\">play_arrow</i>}</button>\n                        <input className=\"progress-player-input\"\n                            type='range' min={0} max={1} step='any'\n                            value={this.state.played}\n                            onMouseDown={this.onSeekMouseDown.bind(this)}\n                            onChange={this.onSeekChange.bind(this)}\n                            onMouseUp={this.onSeekMouseUp.bind(this)}\n                        />\n                        {/* <progress className=\"progress-player-bar\" max={1} value={this.state.played} />*/}\n                        <input className=\"volume-player-input\" type='range' min={0} max={1} step='any' value={this.state.volume} onChange={this.setVolume.bind(this)} />\n                        <button className=\"fullscreen-player-button\" onClick={this.onClickFullscreen.bind(this)}>{(!this.state.fullscreen) ? <i className=\"material-icons\">fullscreen</i> : <i className=\"material-icons\">fullscreen_exit</i>}</button>\n                    </div>)}\n            </div>\n        );\n        /* jshint ignore:end */\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 612,
    "kind": "class",
    "name": "PlayerPlugin",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js",
    "importStyle": "PlayerPlugin",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 613,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#state",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{\"volume\": number, \"duration\": *, \"played\": *, \"seeking\": *, \"fullscreen\": *, \"controls\": boolean}"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "playPause",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#playPause",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 616,
    "kind": "method",
    "name": "onClickFullscreen",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#onClickFullscreen",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "setVolume",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 618,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#setPlaybackRate",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "onSeekMouseDown",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#onSeekMouseDown",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 620,
    "kind": "method",
    "name": "onSeekChange",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#onSeekChange",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "onSeekMouseUp",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#onSeekMouseUp",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 622,
    "kind": "method",
    "name": "onProgress",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#onProgress",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "member",
    "name": "player_wrapper",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#player_wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 626,
    "kind": "member",
    "name": "player",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/components/PlayerPluginEditor.js~PlayerPlugin#player",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 627,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicPlayer/locales/en.js",
    "content": "module.exports = {\r\n    \"BasicPlayer\": {\r\n        \"Allow_fullscreen\": \"Allow fullscreen\",\r\n        \"Show_controls\": \"Show Controls\",\r\n        \"Autoplay\": \"Autoplay\",\r\n        \"URL\": \"URL\",\r\n        \"Video\": \"Video\",\r\n        \"background_color\": \"Background color\",\r\n        \"border_color\": \"Border color\",\r\n        \"border_size\": \"Border Size\",\r\n        \"border_style\": \"Border Style\",\r\n        \"box_style\": \"Box style\",\r\n        \"opacity\": \"Opacity\",\r\n        \"padding\": \"Padding\",\r\n        \"PluginName\": \"Basic Player\",\r\n        \"radius\": \"Radius\",\r\n        \"source\": \"Source\",\r\n    },\r\n};\r\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicPlayer/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 628,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicPlayer/locales/es.js",
    "content": "module.exports = {\r\n    \"BasicPlayer\": {\r\n        \"Allow_fullscreen\": \"Permitir pantalla completa\",\r\n        \"Show_controls\": \"Mostrar controles\",\r\n        \"Autoplay\": \"Reproducción automática\",\r\n        \"URL\": \"URL\",\r\n        \"Video\": \"Vídeo\",\r\n        \"background_color\": \"Color de fondo\",\r\n        \"border_color\": \"Color de borde\",\r\n        \"border_size\": \"Grosor de borde\",\r\n        \"border_style\": \"Estilo de borde\",\r\n        \"box_style\": \"Estilo caja\",\r\n        \"opacity\": \"Opacidad\",\r\n        \"padding\": \"Padding\",\r\n        \"PluginName\": \"Reproductor Básico\",\r\n        \"radius\": \"Radio\",\r\n        \"source\": \"Origen\",\r\n    },\r\n};\r\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicPlayer/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 629,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicPlayer/visor/BasicPlayer.js",
    "content": "import React from 'react';\nimport PlayerPlugin from '../components/PlayerPlugin.js';\nrequire('../BasicPlayer.scss');\n\nexport function BasicPlayer(base) {\n    return {\n        getRenderTemplate: function(state, id) {\n            return (\n                /* jshint ignore:start */\n                <div style={{ width: \"100%\", height: \"100%\" }}>\n                    <PlayerPlugin style={{ width: \"100%\", height: \"100%\" }} state={state} />\n                </div>\n                /* jshint ignore:end */\n            );\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicPlayer/visor/BasicPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 630,
    "kind": "function",
    "name": "BasicPlayer",
    "memberof": "DALI_EDITOR/plugins/BasicPlayer/visor/BasicPlayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicPlayer/visor/BasicPlayer.js~BasicPlayer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicPlayer/visor/BasicPlayer.js",
    "importStyle": "{BasicPlayer}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getRenderTemplate\": *}"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicText/BasicText.js",
    "content": "export function BasicText(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'BasicText',\n                displayName: Dali.i18n.t('BasicText.PluginName'),\n                category: 'text',\n                needsConfigModal: false,\n                needsTextEdition: true,\n                /* initialWidth: '300px',\n                initialHeight: '100px',*/\n                icon: 'short_text',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        style: {\n                            __name: Dali.i18n.t('BasicText.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: Dali.i18n.t('BasicText.padding'),\n                                    type: 'number',\n                                    value: 10,\n                                    min: 0,\n                                    max: 100,\n                                },\n\n                                backgroundColor: {\n                                    __name: Dali.i18n.t('BasicImage.background_color'),\n                                    type: 'color',\n                                    value: 'rgba(255,255,255,0)',\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('BasicImage.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('BasicImage.border_style'),\n                                    type: 'radio',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('BasicImage.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('BasicImage.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('BasicImage.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.01,\n                                },\n                                /* ,\n                                className: {\n                                    __name: Dali.i18n.t('BasicText.classname'),\n                                    type: 'text',\n                                },*/\n                            },\n                        },\n                    },\n                },\n            };\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicText/BasicText.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 632,
    "kind": "function",
    "name": "BasicText",
    "memberof": "DALI_EDITOR/plugins/BasicText/BasicText.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicText/BasicText.js~BasicText",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicText/BasicText.js",
    "importStyle": "{BasicText}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicText/locales/en.js",
    "content": "module.exports = {\n    \"BasicText\": {\n        \"box_style\": \"Box style\",\n        \"classname\": \"Class names\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"BasicText\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicText/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 634,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicText/locales/es.js",
    "content": "module.exports = {\n    \"BasicText\": {\n        \"box_style\": \"Estilo caja\",\n        \"classname\": \"Nombres de clases\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Texto básico\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicText/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 635,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicVideo/BasicVideo.js",
    "content": "export function BasicVideo(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'BasicVideo',\n                displayName: Dali.i18n.t('BasicVideo.PluginName'),\n                category: 'multimedia',\n                aspectRatioButtonConfig: {\n                    location: [\"main\", \"__sortable\"],\n                    defaultValue: true,\n                },\n                icon: 'play_arrow',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        basic: {\n                            __name: Dali.i18n.t('BasicVideo.Video'),\n                            icon: 'link',\n                            buttons: {\n                                url: {\n                                    __name: Dali.i18n.t('BasicVideo.URL'),\n                                    type: 'text',\n                                    value: base.getState().url,\n                                    autoManaged: false,\n                                },\n                                controls: {\n                                    __name: Dali.i18n.t('BasicVideo.Show_controls'),\n                                    type: 'checkbox',\n                                    checked: base.getState().controls,\n                                    autoManaged: false,\n                                },\n                                autoplay: {\n                                    __name: Dali.i18n.t('BasicVideo.Autoplay'),\n                                    type: 'checkbox',\n                                    checked: base.getState().autoplay,\n                                    autoManaged: false,\n                                },\n                            },\n                        },\n                        style: {\n                            __name: Dali.i18n.t('BasicVideo.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: Dali.i18n.t('BasicVideo.padding'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('BasicVideo.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('BasicVideo.border_style'),\n                                    type: 'select',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('BasicVideo.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('BasicVideo.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('BasicVideo.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.05,\n                                },\n\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        // TEST URL http://video.webmfiles.org/big-buck-bunny_trailer.webm\n        // Posibilidad: http://modernizr.com/\n        getInitialState: function() {\n            return {\n                url: 'http://dl1.webmfiles.org/big-buck-bunny_trailer.webm',\n                controls: true,\n                autoplay: false,\n            };\n        },\n        getRenderTemplate: function(state) {\n            return \"<video \" + (state.controls && state.controls !== \"on\" ? \"controls='true' \" : \"\") + (state.autoplay ? \" autoPlay='true' \" : \"\") + \" style=\\\"width: 100%; height: 100%; z-index:0;\\\" src=\\\"\" + state.url + \"\\\"  class=\\\"basicVideoClass\\\"></video>\";\n\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicVideo/BasicVideo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 636,
    "kind": "function",
    "name": "BasicVideo",
    "memberof": "DALI_EDITOR/plugins/BasicVideo/BasicVideo.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/BasicVideo/BasicVideo.js~BasicVideo",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/BasicVideo/BasicVideo.js",
    "importStyle": "{BasicVideo}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 637,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicVideo/locales/en.js",
    "content": "module.exports = {\n    \"BasicVideo\": {\n        \"Allow_fullscreen\": \"Allow fullscreen\",\n        \"Show_controls\": \"Show Controls\",\n        \"Autoplay\": \"Autoplay\",\n        \"URL\": \"URL\",\n        \"Video\": \"Video\",\n        \"background_color\": \"Background color\",\n        \"border_color\": \"Border color\",\n        \"border_size\": \"Border Size\",\n        \"border_style\": \"Border Style\",\n        \"box_style\": \"Box style\",\n        \"opacity\": \"Opacity\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Basic Video\",\n        \"radius\": \"Radius\",\n        \"source\": \"Source\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicVideo/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 638,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/BasicVideo/locales/es.js",
    "content": "module.exports = {\n    \"BasicVideo\": {\n        \"Allow_fullscreen\": \"Permitir pantalla completa\",\n        \"Show_controls\": \"Mostrar controles\",\n        \"Autoplay\": \"Reproducción automática\",\n        \"URL\": \"URL\",\n        \"Video\": \"Vídeo\",\n        \"background_color\": \"Color de fondo\",\n        \"border_color\": \"Color de borde\",\n        \"border_size\": \"Grosor de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"box_style\": \"Estilo caja\",\n        \"opacity\": \"Opacidad\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Video Básico\",\n        \"radius\": \"Radio\",\n        \"source\": \"Origen\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/BasicVideo/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 639,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Container/Container.js",
    "content": "export function Container(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'Container',\n                displayName: Dali.i18n.t('Container.PluginName'),\n                category: 'multimedia',\n                icon: 'view_agenda',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        _general: {\n                            __name: \"General\",\n                            icon: 'web',\n                            buttons: {\n                                boxes: {\n                                    __name: \"Número de cajas\",\n                                    type: 'number',\n                                    value: base.getState().boxes,\n                                    min: 1,\n                                    autoManaged: false,\n                                },\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getInitialState: function() {\n            return { boxes: 1 };\n        },\n        getRenderTemplate: function(state) {\n            let template = \"<div>\";\n            for (let i = 0; i < state.boxes; i++) {\n                template += \"<div><plugin plugin-data-key='\" + i + \"' /></div>\";\n            }\n            template += \"</div>\";\n\n            return template;\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Container/Container.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 640,
    "kind": "function",
    "name": "Container",
    "memberof": "DALI_EDITOR/plugins/Container/Container.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/Container/Container.js~Container",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/Container/Container.js",
    "importStyle": "{Container}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Container/locales/en.js",
    "content": "module.exports = {\n    \"Container\": {\n        \"PluginName\": \"Container\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Container/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 642,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Container/locales/es.js",
    "content": "module.exports = {\n    \"Container\": {\n        \"PluginName\": \"Contenedor\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Container/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 643,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/.data.example.json",
    "content": "[\n  {\n    \"name\": \"Darron Weissnat IV\",\n    \"BMI\": 20.72,\n    \"age\": 39,\n    \"birthday\": \"2005-01-03T00:00:00.000Z\",\n    \"city\": \"East Russel\",\n    \"married\": false,\n    \"index\": 0\n  },\n  {\n    \"name\": \"Pablo Ondricka\",\n    \"BMI\": 19.32,\n    \"age\": 38,\n    \"birthday\": \"1974-05-13T00:00:00.000Z\",\n    \"city\": \"Lake Edytheville\",\n    \"married\": false,\n    \"index\": 1\n  },\n  {\n    \"name\": \"Mr. Stella Kiehn Jr.\",\n    \"BMI\": 16.8,\n    \"age\": 34,\n    \"birthday\": \"2003-07-25T00:00:00.000Z\",\n    \"city\": \"Lake Veronicaburgh\",\n    \"married\": false,\n    \"index\": 2\n  },\n  {\n    \"name\": \"Lavon Hilll I\",\n    \"BMI\": 20.57,\n    \"age\": 12,\n    \"birthday\": \"1994-10-26T00:00:00.000Z\",\n    \"city\": \"Annatown\",\n    \"married\": true,\n    \"index\": 3\n  },\n  {\n    \"name\": \"Clovis Pagac\",\n    \"BMI\": 24.28,\n    \"age\": 26,\n    \"birthday\": \"1995-11-10T00:00:00.000Z\",\n    \"city\": \"South Eldredtown\",\n    \"married\": false,\n    \"index\": 4\n  },\n  {\n    \"name\": \"Gaylord Paucek\",\n    \"BMI\": 24.41,\n    \"age\": 30,\n    \"birthday\": \"1975-06-12T00:00:00.000Z\",\n    \"city\": \"Koeppchester\",\n    \"married\": true,\n    \"index\": 5\n  },\n  {\n    \"name\": \"Ashlynn Kuhn MD\",\n    \"BMI\": 23.77,\n    \"age\": 32,\n    \"birthday\": \"1985-08-09T00:00:00.000Z\",\n    \"city\": \"West Josiemouth\",\n    \"married\": false,\n    \"index\": 6\n  },\n  {\n    \"name\": \"Fern Schmeler IV\",\n    \"BMI\": 27.33,\n    \"age\": 26,\n    \"birthday\": \"2005-02-10T00:00:00.000Z\",\n    \"city\": \"West Abigaleside\",\n    \"married\": true,\n    \"index\": 7\n  },\n  {\n    \"name\": \"Enid Weber\",\n    \"BMI\": 18.72,\n    \"age\": 17,\n    \"birthday\": \"1998-11-30T00:00:00.000Z\",\n    \"city\": \"Zackton\",\n    \"married\": true,\n    \"index\": 8\n  },\n  {\n    \"name\": \"Leatha O'Hara\",\n    \"BMI\": 17.68,\n    \"age\": 42,\n    \"birthday\": \"2010-10-17T00:00:00.000Z\",\n    \"city\": \"Lake Matilda\",\n    \"married\": false,\n    \"index\": 9\n  },\n  {\n    \"name\": \"Korbin Steuber\",\n    \"BMI\": 16.35,\n    \"age\": 39,\n    \"birthday\": \"1975-06-30T00:00:00.000Z\",\n    \"city\": \"East Armandofort\",\n    \"married\": true,\n    \"index\": 10\n  },\n  {\n    \"name\": \"Brennon Torphy\",\n    \"BMI\": 27.37,\n    \"age\": 24,\n    \"birthday\": \"2003-10-21T00:00:00.000Z\",\n    \"city\": \"Croninfort\",\n    \"married\": true,\n    \"index\": 11\n  },\n  {\n    \"name\": \"Ms. Genoveva Bradtke\",\n    \"BMI\": 28.63,\n    \"age\": 19,\n    \"birthday\": \"1983-01-10T00:00:00.000Z\",\n    \"city\": \"Port Emanuel\",\n    \"married\": true,\n    \"index\": 12\n  },\n  {\n    \"name\": \"Gregg Halvorson\",\n    \"BMI\": 15.45,\n    \"age\": 15,\n    \"birthday\": \"2004-06-15T00:00:00.000Z\",\n    \"city\": \"Lake Angelinastad\",\n    \"married\": false,\n    \"index\": 13\n  },\n  {\n    \"name\": \"Mr. Sabina Schroeder III\",\n    \"BMI\": 24.27,\n    \"age\": 26,\n    \"birthday\": \"1980-11-22T00:00:00.000Z\",\n    \"city\": \"Toyview\",\n    \"married\": true,\n    \"index\": 14\n  },\n  {\n    \"name\": \"Alanna Mitchell\",\n    \"BMI\": 29.25,\n    \"age\": 37,\n    \"birthday\": \"1971-08-04T00:00:00.000Z\",\n    \"city\": \"Lake Monserratmouth\",\n    \"married\": false,\n    \"index\": 15\n  },\n  {\n    \"name\": \"Ronny Sanford\",\n    \"BMI\": 29.16,\n    \"age\": 24,\n    \"birthday\": \"1994-11-24T00:00:00.000Z\",\n    \"city\": \"New Claudhaven\",\n    \"married\": false,\n    \"index\": 16\n  },\n  {\n    \"name\": \"Emmitt Pouros\",\n    \"BMI\": 27.95,\n    \"age\": 14,\n    \"birthday\": \"1989-04-04T00:00:00.000Z\",\n    \"city\": \"Moorefurt\",\n    \"married\": true,\n    \"index\": 17\n  },\n  {\n    \"name\": \"Earl Purdy\",\n    \"BMI\": 18.34,\n    \"age\": 38,\n    \"birthday\": \"2013-04-03T00:00:00.000Z\",\n    \"city\": \"Lake Rowanberg\",\n    \"married\": true,\n    \"index\": 18\n  },\n  {\n    \"name\": \"Cordelia Klocko\",\n    \"BMI\": 25.85,\n    \"age\": 36,\n    \"birthday\": \"2011-01-17T00:00:00.000Z\",\n    \"city\": \"Lakinchester\",\n    \"married\": true,\n    \"index\": 19\n  },\n  {\n    \"name\": \"Guido Conroy\",\n    \"BMI\": 25.17,\n    \"age\": 39,\n    \"birthday\": \"1977-04-20T00:00:00.000Z\",\n    \"city\": \"Scarlettland\",\n    \"married\": true,\n    \"index\": 20\n  },\n  {\n    \"name\": \"Miss Demond Weissnat V\",\n    \"BMI\": 21.44,\n    \"age\": 19,\n    \"birthday\": \"2007-06-09T00:00:00.000Z\",\n    \"city\": \"Savionberg\",\n    \"married\": false,\n    \"index\": 21\n  },\n  {\n    \"name\": \"Easton Mante\",\n    \"BMI\": 20.61,\n    \"age\": 43,\n    \"birthday\": \"2007-01-29T00:00:00.000Z\",\n    \"city\": \"Kutchberg\",\n    \"married\": false,\n    \"index\": 22\n  },\n  {\n    \"name\": \"Dayton Ebert\",\n    \"BMI\": 29.88,\n    \"age\": 20,\n    \"birthday\": \"1978-04-27T00:00:00.000Z\",\n    \"city\": \"West Wiley\",\n    \"married\": true,\n    \"index\": 23\n  }\n]",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/.data.example.json",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 644,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/DataTable.js",
    "content": "import React from \"react\";\nimport TableComponent from './components/table-component';\nimport i18n from 'i18next';\nimport Config from './components/config-component';\nrequire('./_datatable.scss');\n\nexport function DataTable(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: \"DataTable\",\n                flavor: \"react\",\n                displayName: i18n.t(\"DataTable.PluginName\"),\n                category: \"text\",\n                needsConfigModal: true,\n                needsConfirmation: true,\n                needsTextEdition: false,\n                icon: \"view_stream\",\n                initialWidth: '100%',\n                initialHeight: \"auto\",\n                initialWidthSlide: '100%',\n                initialHeightSlide: '100%',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        style: {\n                            __name: i18n.t(\"DataTable.style\"),\n                            icon: \"palette\",\n                            order: [\n                                \"margins\",\n                                \"paddings\",\n                                \"borderWidth\",\n                                \"borderStyle\",\n                                \"borderColor\",\n                                \"borderRadius\",\n                                \"opacity\",\n                            ],\n                            accordions: {\n                                margins: {\n                                    __name: i18n.t(\"DataTable.margin\"),\n                                    buttons: {\n                                        left: {\n                                            __name: i18n.t(\"DataTable.left\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        right: {\n                                            __name: i18n.t(\"DataTable.right\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        top: {\n                                            __name: i18n.t(\"DataTable.top\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        bottom: {\n                                            __name: i18n.t(\"DataTable.bottom\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                    },\n                                },\n                                paddings: {\n                                    __name: i18n.t(\"DataTable.padding\"),\n                                    buttons: {\n                                        left: {\n                                            __name: i18n.t(\"DataTable.left\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        right: {\n                                            __name: i18n.t(\"DataTable.right\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        top: {\n                                            __name: i18n.t(\"DataTable.top\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        bottom: {\n                                            __name: i18n.t(\"DataTable.bottom\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                    },\n                                },\n                            },\n                            buttons: {\n                                borderWidth: {\n                                    __name: i18n.t(\"DataTable.border_width\"),\n                                    type: \"number\",\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                    units: \"px\",\n                                },\n                                borderStyle: {\n                                    __name: i18n.t(\"DataTable.border_style\"),\n                                    type: \"select\",\n                                    value: \"solid\",\n                                    options: [\"none\", \"hidden\", \"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"initial\", \"inherit\"],\n                                },\n                                borderColor: {\n                                    __name: i18n.t(\"DataTable.border_color\"),\n                                    type: \"color\",\n                                    value: \"#000000\",\n                                },\n                                borderRadius: {\n                                    __name: i18n.t(\"DataTable.border_radius\"),\n                                    type: \"number\",\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                    step: 5,\n                                    units: \"%\",\n                                },\n                                opacity: {\n                                    __name: i18n.t(\"DataTable.opacity\"),\n                                    type: \"range\",\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.01,\n                                },\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getInitialState: function() {\n            let data = [];\n            let keys = [];\n            let row = {};\n            for (let i = 0; i < 1; i++) {\n                keys.push(i);\n                row[i] = \"\";\n            }\n            for (let i = 0; i < 2; i++) {\n                data.push(row);\n            }\n\n            return {\n                data: data,\n                keys: keys,\n                editing: true,\n                options: {\n                    disableFilter: false,\n                    disableRowChoice: false,\n                    disablePagination: false,\n                    pageSizeLabel: i18n.t('DataTable.options.pageSizeLabel_txt'),\n                    searchLabel: i18n.t('DataTable.options.searchLabel_txt'),\n                    searchPlaceholder: '',\n                    noDataLabel: i18n.t(\"DataTable.options.noDataLabel_txt\"),\n                    initialPageLength: 5,\n                    initialSort: 0,\n                    initialOrder: 'descending',\n                },\n            };\n        },\n        getRenderTemplate: function(state) {\n            return (\n                <TableComponent data={state.data} options={state.options} />\n            );\n\n        },\n        getConfigTemplate: function(extState) {\n            return (\n                <Config state={extState} base={base} />\n            );\n        },\n        fileChanged: function(event) {\n\n            let files = event.target.files;\n            let file = files[0];\n            let reader = new FileReader();\n            reader.onload = function() {\n                base.setState(\"chartData\", JSON.parse(this.result));\n            };\n            reader.readAsText(file);\n        },\n        chartTypeChange: function(elements) {\n            base.setState(\"chartType\", elements[0].id);\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/DataTable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 645,
    "kind": "function",
    "name": "DataTable",
    "memberof": "DALI_EDITOR/plugins/DataTable/DataTable.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/DataTable/DataTable.js~DataTable",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/DataTable/DataTable.js",
    "importStyle": "{DataTable}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"getConfigTemplate\": *, \"fileChanged\": *, \"chartTypeChange\": *, \"handleToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/components/chart-options.js",
    "content": "import React from \"react\";\nimport { Form, FormGroup, FormControl, Col, Checkbox, Radio } from \"react-bootstrap\";\n\nimport i18n from 'i18next';\n\nexport default class ChartOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        let options = this.props.options;\n        options.keys = this.props.keys;\n        this.state = options;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if(prevState !== this.state) {\n            if (typeof this.props.optionsChanged === 'function') {\n                // console.log(this.state);\n                this.props.optionsChanged({\n                    disableFilter: this.state.disableFilter,\n                    disableRowChoice: this.state.disableRowChoice,\n                    disablePagination: this.state.disablePagination,\n                    pageSizeLabel: this.state.pageSizeLabel,\n                    searchLabel: this.state.searchLabel,\n                    searchPlaceholder: this.state.searchPlaceholder,\n                    initialPageLength: this.state.initialPageLength,\n                    noDataLabel: this.state.noDataLabel,\n                    initialSort: this.state.initialSort,\n                    initialOrder: this.state.initialOrder,\n                });\n            }\n        }\n    }\n    render() {\n        return (\n            <div>\n                <h4>{i18n.t(\"DataTable.header.options\")}</h4>\n                <div className=\"content-block\">\n                    <Form horizontal>\n                        <FormGroup>\n                            <Col xs={12}>\n                                <FormControl.Static>\n                                    {i18n.t(\"DataTable.show\")}\n                                </FormControl.Static>\n                                <Col xs={12} >\n                                    <Checkbox className=\"mycb\" checked={!this.state.disableFilter}\n                                        onChange={()=>{this.setState({ disableFilter: !this.state.disableFilter });}} />\n                                    {i18n.t('DataTable.options.disableFilter')}</Col>\n                                <Col xs={12} >\n                                    <Checkbox className=\"mycb\" checked={!this.state.disablePagination}\n                                        onChange={()=>{this.setState({ disablePagination: !this.state.disablePagination });}} />\n                                    {i18n.t('DataTable.options.disablePagination')}</Col>\n                                <Col xs={12} >\n                                    <Checkbox className=\"mycb\" checked={!this.state.disableRowChoice}\n                                        onChange={()=>{this.setState({ disableRowChoice: !this.state.disableRowChoice });}} />\n                                    {i18n.t('DataTable.options.disableRowChoice')}</Col><br/><br/><br/>\n\n                                <label htmlFor=\"\">{i18n.t(\"DataTable.options.initialPageLength\")}</label>\n                                <FormControl type=\"number\" value={this.state.initialPageLength}\n                                    onChange={(e)=>{if (!isNaN(parseInt(e.target.value, 10))) { this.setState({ initialPageLength: parseInt(e.target.value, 10) });}}}/>\n                                <label htmlFor=\"\">{i18n.t(\"DataTable.options.initialSortProp\")}</label>\n                                <FormControl componentClass=\"select\" placeholder=\"line\"\n                                    value={this.state.initialSort}\n                                    onChange={(e)=>{this.setState({ initialSort: e.target.value });}}>\n                                    <option key={\"DEFAULT_0\"} value={0}>{\" \"}</option>\n                                    {this.state.keys.map(key=>{\n                                        return(<option key={key} value={key}>{key}</option>);\n                                    })}\n\n                                </FormControl>\n                                <label htmlFor=\"\">{i18n.t(\"DataTable.options.initialOrderProp\")}</label>\n                                <FormGroup>\n                                    <Radio name=\"radioGroup\" inline style={{ marginLeft: '15px' }}\n                                        onChange={e=>{this.setState({ initialOrder: 'ascending' });}}\n                                        checked={this.state.initialOrder === 'ascending'}>\n                                        {i18n.t(\"DataTable.options.ascending\")}\n                                    </Radio>\n\n                                    <Radio name=\"radioGroup\" inline style={{ marginLeft: '15px' }}\n                                        onChange={e=>{this.setState({ initialOrder: 'descending' });}}\n                                        checked={this.state.initialOrder === 'descending'}>\n                                        {i18n.t(\"DataTable.options.descending\")}\n                                    </Radio>\n                                </FormGroup>\n\n                            </Col>\n                            <Col xs={12}>\n                                <div style={{ display: this.state.disableRowChoice ? 'none' : 'block' }}>\n                                    <label htmlFor=\"\">{i18n.t(\"DataTable.options.pageSizeLabel\")}</label>\n                                    <FormControl type=\"text\" value={this.state.pageSizeLabel}\n                                        onChange={(e)=>{this.setState({ pageSizeLabel: e.target.value });}}/>\n                                </div>\n                                <div style={{ display: this.state.disableFilter ? 'none' : 'block' }}>\n                                    <label htmlFor=\"\">{i18n.t(\"DataTable.options.searchLabel\")}</label>\n                                    <FormControl type=\"text\" value={this.state.searchLabel}\n                                        onChange={(e)=>{this.setState({ searchLabel: e.target.value });}}/>\n                                </div>\n                                <div style={{ display: this.state.disableFilter ? 'none' : 'block' }}>\n                                    <label htmlFor=\"\">{i18n.t(\"DataTable.options.searchPlaceholder\")}</label>\n                                    <FormControl type=\"text\" value={this.state.searchPlaceholder}\n                                        onChange={(e)=>{this.setState({ searchPlaceholder: e.target.value });}}/>\n                                </div>\n                                <div>\n                                    <label htmlFor=\"\">{i18n.t(\"DataTable.options.noDataLabel\")}</label>\n                                    <FormControl type=\"text\" value={this.state.noDataLabel}\n                                        onChange={(e)=>{this.setState({ noDataLabel: e.target.value });}}/>\n                                </div>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup />\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/components/chart-options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 647,
    "kind": "class",
    "name": "ChartOptions",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/chart-options.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/DataTable/components/chart-options.js",
    "importStyle": "ChartOptions",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 648,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 649,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions",
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions#state",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/chart-options.js~ChartOptions#render",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/components/config-component.js",
    "content": "import React from \"react\";\nimport { Button, Col, Grid, Row } from \"react-bootstrap\";\nimport i18n from 'i18next';\nimport TableComponent from './table-component';\nimport DataProvider from './data-provider';\nimport ChartOptions from './chart-options';\n\nexport default class Config extends React.Component {\n    render() {\n\n        this.modifyState();\n        return (\n            <Grid>\n                <Row>\n\n                    <Col lg={this.state.editing ? 12 : 3} xs={12}>\n                        <h4> {i18n.t(\"DataTable.header.origin\")} </h4>\n                        {!this.state.editing &&\n                        <Button onClick={this.editButtonClicked} style={{ marginTop: '0px' }} className=\"btn-primary\">{i18n.t(\"DataTable.edit\")} </Button>\n                        }\n                        {this.state.editing &&\n                        <DataProvider data={this.state.data} dataChanged={this.dataChanged} keys={this.state.keys} />\n                        }\n                        {!this.state.editing &&\n                        <ChartOptions options={this.state.options} optionsChanged={this.optionsChanged} keys={this.state.keys} />\n                        }\n                    </Col>\n                    <Col lg={9} xs={12}>\n                        {!this.state.editing && <div>\n                            <h4>{i18n.t(\"DataTable.header.preview\")}</h4><br/>\n                            <div style={{ marginRight: '-10px', marginLeft: '0px' }} ref=\"chartContainer\" id=\"chartContainer\">\n                                <TableComponent data={this.state.data} options={this.state.options} key={this.state.key} />\n                            </div>\n                        </div>}\n                    </Col>\n\n                </Row>\n\n            </Grid>\n\n        );\n    }\n    constructor(props) {\n        super(props);\n        let state = this.props.state;\n        // state.base = this.props.base;\n        this.modifyState = this.modifyState.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n        this.setOptions = this.setOptions.bind(this);\n        this.optionsChanged = this.optionsChanged.bind(this);\n        this.editButtonClicked = this.editButtonClicked.bind(this);\n        this.updateChart = this.updateChart.bind(this);\n        this.state = state;\n    }\n\n    componentDidUpdate(nextProps, nextState) {\n        if(nextProps.state.editing === false) {\n            this.props.base.configModalNeedsUpdate();\n        }\n    }\n\n    modifyState() {\n        this.props.base.setState(\"options\", this.state.options);\n        this.props.base.setState(\"data\", this.state.data);\n        this.props.base.setState(\"keys\", this.state.keys);\n        this.props.base.setState(\"editing\", this.state.editing);\n    }\n\n    dataChanged(values) {\n\n        this.setState({ editing: false });\n        this.props.base.setState(\"data\", values.data);\n        this.setOptions(values.data, values.keys);\n        this.updateChart();\n\n    }\n\n    setOptions(data, keys) {\n        let nKeys = [];\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n            nKeys[i] = {};\n            nKeys[i].value = value;\n            nKeys[i].notNumber = true;\n        }\n\n        for (let o = 0; o < data.length; o++) {\n            let row = data[o];\n            for (let i = 0; i < keys.length; i++) {\n                let key = nKeys[i];\n                data[o][keys[i]] = isNaN(data[o][keys[i]]) || typeof(data[o][keys[i]]) === \"boolean\" || data[o][keys[i]] === \"\" || data[o][keys[i]] === null ? data[o][keys[i]] : parseFloat(data[o][keys[i]]);\n                if(key.notNumber) {\n                    nKeys[i].notNumber = isNaN(row[key.value]) || typeof(row[key.value]) === \"boolean\" || row[key.value] === \"\";\n                }\n            }\n        }\n\n        let options = this.state.options;\n        this.setState({ data: data, keys: keys, options: options });\n    }\n\n    optionsChanged(options) {\n        // console.log(\"optionshanged\");\n        // console.log(options);\n        this.setState({ options: options });\n        this.props.base.setState(\"options\", options);\n        this.updateChart();\n    }\n\n    editButtonClicked() {\n        // console.log(\"editButton\");\n        // console.log(this.state);\n        this.setState({ editing: true });\n    }\n\n    updateChart() {\n        // this.forceUpdate();\n        this.setState({ key: Math.random() });\n    }\n\n}\n\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/components/config-component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 653,
    "kind": "class",
    "name": "Config",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/DataTable/components/config-component.js",
    "importStyle": "Config",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 654,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#render",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 655,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true
  },
  {
    "__docId__": 662,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#state",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 664,
    "kind": "method",
    "name": "modifyState",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#modifyState",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "dataChanged",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#dataChanged",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "setOptions",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#setOptions",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "optionsChanged",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#optionsChanged",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 668,
    "kind": "method",
    "name": "editButtonClicked",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#editButtonClicked",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "updateChart",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/config-component.js~Config#updateChart",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 670,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/components/data-provider.js",
    "content": "import React from \"react\";\nimport { Form, Button, FormGroup, FormControl, ControlLabel, Col } from \"react-bootstrap\";\nimport FileInput from '../../../_editor/components/common/file-input/FileInput';\nimport Alert from '../../../_editor/components/common/alert/Alert';\nimport i18n from 'i18next';\n\nexport default class DataProvider extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let rows = this.props.data.length;\n        let cols = this.props.data.length === 0 ? 2 : Object.keys(this.props.data[0]).length;\n        this.confirmButton = this.confirmButton.bind(this);\n        this.colLeft = this.colLeft.bind(this);\n        this.colLeft = this.colLeft.bind(this);\n        this.colRight = this.colRight.bind(this);\n        this.deleteCols = this.deleteCols.bind(this);\n        this.colsChanged = this.colsChanged.bind(this);\n        this.deleteRows = this.deleteRows.bind(this);\n        this.rowsChanged = this.rowsChanged.bind(this);\n        this.keyChanged = this.keyChanged.bind(this);\n        this.validateJson = this.validateJson.bind(this);\n        this.fileChanged = this.fileChanged.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n\n        this.state = {\n            cols: cols,\n            rows: rows,\n            data: this.props.data,\n            keys: this.props.keys,\n            error: false,\n        };\n    }\n\n    confirmButton() {\n        let empty = false;\n        outerloop:\n        for (let i = 0; i < this.state.data.length; i++) {\n            for (let o = 0; o < this.state.data.length; o++) {\n                if(this.state.data[i][o] === \"\") {\n                    let alertComp = (<Alert className=\"pageModal\" show hasHeader closeButton onClose={()=>{this.setState({ alert: null });}}>\n                        <span> {i18n.t(\"DataTable.alert_msg\")} </span>\n                    </Alert>);\n                    this.setState({ alert: alertComp });\n                    empty = true;\n                    break outerloop;\n                }\n            }\n        }\n        if (typeof this.props.dataChanged === 'function' && !empty) {\n            this.props.dataChanged({ data: this.state.data, keys: this.state.keys });\n        }\n    }\n    colLeft(col) {\n        let pre = this.state.cols;\n        let keys = this.state.keys;\n        let left = keys[col - 1];\n        let current = keys[col];\n        keys[col - 1] = current;\n        keys[col] = left;\n        console.log(keys);\n\n        this.setState({ keys: keys });\n    }\n    colRight(col) {\n        let pre = this.state.cols;\n        let keys = this.state.keys;\n        let right = keys[col + 1];\n        let current = keys[col];\n        keys[col + 1] = current;\n        keys[col] = right;\n        this.setState({ keys: keys });\n    }\n    deleteCols(col) {\n        let pre = this.state.cols - 1;\n        let keys = this.state.keys;\n        let data = this.state.data;\n\n        for (let i = 0; i < data.length; i++) {\n            delete data[i][keys[col]];\n        }\n        keys.splice(col, 1);\n\n        this.setState({ cols: pre, data: data, keys: keys });\n    }\n    colsChanged(event) {\n        let pre = this.state.cols;\n        let value = parseInt(event.target.value, 10);\n        let keys = this.state.keys;\n        let data = this.state.data;\n\n        if (value > pre) {\n            for (let o = pre; o < value; o++) {\n                keys.push(o);\n            }\n            for (let i = 0; i < data.length; i++) {\n                for (let o = pre; o < value; o++) {\n                    data[i][o] = \"\";\n                }\n            }\n\n        } else if (value < pre) {\n\n            for (let i = 0; i < data.length; i++) {\n                for (let o = value; o < pre; o++) {\n                    delete data[i][keys[o]];\n                }\n            }\n            keys = keys.slice(0, value);\n        }\n        this.setState({ cols: parseInt(value, 10), data: data, keys: keys });\n    }\n    deleteRows(row) {\n        let pre = this.state.rows - 1;\n        let data = this.state.data;\n        data.splice(row, 1);\n\n        this.setState({ rows: pre, data: data });\n    }\n    rowsChanged(event) {\n        let pre = this.state.rows;\n        let value = parseInt(event.target.value, 10);\n\n        let keys = this.state.keys;\n        let data = this.state.data;\n\n        if (value > pre) {\n            let row = {};\n            for (let i = 0; i < keys.length; i++) {\n                row[keys[i]] = \"\";\n            }\n            for (let i = pre; i < value; i++) {\n                data.push(row);\n            }\n        } else if (value < pre) {\n            data = data.slice(0, value);\n        }\n        this.setState({ rows: parseInt(value, 10), data: data });\n    }\n    keyChanged(event) {\n        let keys = this.state.keys;\n        let pre = keys[event.target.name];\n        let data = this.state.data;\n        keys[event.target.name] = event.target.value;\n        for (let i = 0; i < data.length; i++) {\n            let val = data[i][pre];\n            data[i][event.target.value] = val;\n            delete data[i][pre];\n        }\n        this.setState({ keys: keys, data: data });\n\n    }\n    csvToJSON(csv) {\n\n        let lines = csv.split(\"\\n\");\n\n        let result = [];\n\n        let headers = lines[0].split(\",\");\n\n        for(let i = 1; i < lines.length; i++) {\n\n            let obj = {};\n            let currentline = lines[i].split(\",\");\n\n            for (let j = 0; j < headers.length; j++) {\n                obj[headers[j]] = currentline[j];\n            }\n            result.push(obj);\n        }\n\n        return result;\n    }\n    validateJson(json) {\n\n        let data = {};\n        if(json.length === 0) {\n            this.setState({ error: true });\n            return false;\n        }\n        let cols = Object.keys(json[0]);\n        if(cols.length === 0) {\n            this.setState({ error: true, file: false });\n            return false;\n        }\n        for(let row of json) {\n\n            if(!this.compareKeys(cols, Object.keys(row))) {\n                this.setState({ error: true, file: false });\n                return false;\n            }\n            cols = Object.keys(row);\n        }\n        this.setState({ cols: cols.length, rows: json.length, data: json, keys: cols, x: cols[0] });\n\n        this.setState({ error: false });\n        return true;\n    }\n    compareKeys(a, b) {\n        a = a.sort().toString();\n        b = b.sort().toString();\n        return a === b;\n    }\n    fileChanged(event) {\n        let files = event.target.files;\n        let file = files[0];\n\n        let reader = new FileReader();\n        reader.onload = () => {\n            let data = reader.result;\n            if(file.name.split('.').pop() === \"csv\") {\n                data = this.csvToJSON(data);\n            } else if(file.name.split('.').pop() === \"json\") {\n                data = JSON.parse(data);\n            }\n            this.setState({ name: file.name });\n            this.validateJson(data);\n        };\n        reader.readAsText(file);\n    }\n    dataChanged(event) {\n        let pos = event.target.name.split(\" \");\n        let row = pos[0];\n        let col = pos[1];\n        let data = this.state.data;\n        let newvalue = isNaN(event.target.value) || (isNaN(parseFloat(event.target.value))) || event.target.value === \"\" || event.target.value === null ? event.target.value : parseFloat(event.target.value);\n        if(typeof(newvalue) === \"boolean\") {\n            newvalue = \"\" + newvalue;\n        }\n        let newRow = {};\n        newRow[col] = newvalue;\n        data[row] = Object.assign({}, data[row], newRow);\n        this.setState({ data: data });\n    }\n\n    render() {\n        return (\n            <div id=\"datatable_config_modal\">\n                { this.state.alert }\n                <Form horizontal style={{ padding: \"16px\" }}>\n                    <FormGroup>\n                        <FileInput onChange={this.fileChanged} className=\"fileInput\">\n                            {/* <Button className=\"btn btn-primary\" style={{ marginTop: '0px' }}>{ Dali.i18n.t('FileDialog') }</Button>*/}\n                            {/* <span style={{ marginLeft: '10px' }}>*/}\n                            {/* <label className=\"control-label\">{ Dali.i18n.t('FileDialog') + ':   ' } </label> { this.state.name || '' }</span>*/}\n                            <div className=\"fileDrag\">\n                                <span style={{ display: this.state.name ? 'none' : 'block' }}><i className=\"material-icons\">ic_file_upload</i><b>{ i18n.t('FileInput.Drag') }</b>{ i18n.t('FileInput.Drag_2') }<b>{ i18n.t('FileInput.Click') }</b>{ i18n.t('FileInput.Click_2') }</span>\n                                <span className=\"fileUploaded\" style={{ display: this.state.name ? 'block' : 'none' }}><i className=\"material-icons\">insert_drive_file</i>{ this.state.name || '' }</span>\n                            </div>\n                        </FileInput>\n                    </FormGroup>\n                    <FormGroup>\n                        <Col componentClass={ControlLabel} xs={4}>\n                            <FormControl.Static>\n                                {i18n.t(\"DataTable.fill_in\")}\n                            </FormControl.Static>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup>\n                        <Col componentClass={ControlLabel} xs={2}>\n                            {i18n.t(\"DataTable.data_cols\")}\n                        </Col>\n                        <Col xs={3}>\n                            <FormControl type=\"number\" name=\"cols\" value={this.state.cols} onChange={this.colsChanged}/>\n                        </Col>\n\n                        <Col componentClass={ControlLabel} xs={1}>\n                            {i18n.t(\"DataTable.data_rows\")}\n                        </Col>\n                        <Col xs={3}>\n                            <FormControl type=\"number\" name=\"rows\" value={this.state.rows} onChange={this.rowsChanged}/>\n                        </Col>\n                        <Col xs={3}>\n                            <Button className=\"btn btn-primary\" onClick={this.confirmButton} style={{ marginTop: '0px' }}>{i18n.t(\"DataTable.confirm\")}</Button>\n                        </Col>\n                    </FormGroup>\n                    <div style={{ marginTop: '10px', overflowX: 'auto' }}>\n                        <div style={{ display: 'table', tableLayout: 'fixed', width: '100%' }}>\n                            {Array.apply(0, Array(this.state.cols)).map((x, i) => {\n                                return(\n                                    <FormControl.Static key={i + 1} style={{ display: 'table-cell', padding: '8px', textAlign: 'center' }} />\n                                );\n                            })}\n                        </div>\n                        <table className=\"table bordered hover\" >\n                            <thead>\n                                <tr>\n                                    {Array.apply(0, Array(this.state.cols)).map((x, i) => {\n                                        return(\n                                            <th key={i + 1}>\n                                                {/* {i !== 0 ? <i className=\"material-icons clearCol\" onClick={(e)=>{this.colLeft(i);}}>chevron_left</i> : null }*/}\n                                                <i className=\"material-icons clearCol\" onClick={(e)=>{this.deleteCols(i);}}>clear</i>\n                                                {/* {i !== (this.state.keys.length - 1) ? <i className=\"material-icons clearCol\" onClick={(e)=>{this.colRight(i);}}>chevron_right</i> : null }                                                <FormControl type=\"text\" name={i} value={this.state.keys[i]} style={{ margin: '0px' }} onChange={this.keyChanged}/>*/}\n                                                <FormControl type=\"text\" name={i} value={this.state.keys[i]} style={{ margin: '0px' }} onChange={this.keyChanged}/>\n                                            </th>\n                                        );\n                                    })}\n                                </tr>\n                            </thead>\n                            <tbody style={{ backgroundColor: '#f2f2f2' }}>\n\n                                {Array.apply(0, Array(this.state.rows)).map((x, i) => {\n\n                                    return(\n                                        <tr key={i + 1}>\n\n                                            {Array.apply(0, Array(this.state.cols)).map((q, o) => {\n                                                return(\n                                                    <td key={o + 1}>\n                                                        {o === 0 ? (<i className=\"material-icons clearRow\" onClick={()=>{this.deleteRows(i);}}>clear</i>) : null}\n\n                                                        <FormControl type=\"text\" name={i + \" \" + this.state.keys[o]} value={this.state.data[i][this.state.keys[o]]} onChange={this.dataChanged}/>\n\n                                                    </td>\n                                                );\n                                            })}\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </table>\n                    </div>\n                </Form>\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/components/data-provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 671,
    "kind": "class",
    "name": "DataProvider",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/DataTable/components/data-provider.js",
    "importStyle": "DataProvider",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 672,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 685,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"cols\": *, \"rows\": *, \"data\": *, \"keys\": *, \"error\": *}"
      ]
    }
  },
  {
    "__docId__": 686,
    "kind": "method",
    "name": "confirmButton",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#confirmButton",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 687,
    "kind": "method",
    "name": "colLeft",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#colLeft",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "col",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 688,
    "kind": "method",
    "name": "colRight",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#colRight",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "col",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 689,
    "kind": "method",
    "name": "deleteCols",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#deleteCols",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "col",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 690,
    "kind": "method",
    "name": "colsChanged",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#colsChanged",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 691,
    "kind": "method",
    "name": "deleteRows",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#deleteRows",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "params": [
      {
        "name": "row",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "rowsChanged",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#rowsChanged",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 693,
    "kind": "method",
    "name": "keyChanged",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#keyChanged",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 694,
    "kind": "method",
    "name": "csvToJSON",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#csvToJSON",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "params": [
      {
        "name": "csv",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "method",
    "name": "validateJson",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#validateJson",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 696,
    "kind": "method",
    "name": "compareKeys",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#compareKeys",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "method",
    "name": "fileChanged",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#fileChanged",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 698,
    "kind": "method",
    "name": "dataChanged",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#dataChanged",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/data-provider.js~DataProvider#render",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 700,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/components/table-component.js",
    "content": "import React from \"react\";\nimport { DataTable } from 'react-datatable-bs';\nrequire('react-datatable-bs/css/table-twbs.css');\n\nexport default class TableComponent extends React.Component {\n    render() {\n        let data = this.props.data;\n        let options = this.props.options;\n        let keys = Object.keys(this.props.data[0]);\n        let cols = [];\n        keys.map(key =>{\n            cols.push({ title: key, prop: key });\n        });\n        options.pageLengthOptions = [5, 10, 100];\n        options.pageLengthOptions = options.pageLengthOptions.filter(a => a <= data.length);\n        if (!isNaN(options.initialPageLength) && options.pageLengthOptions.indexOf(options.initialPageLength) === -1) {\n            options.pageLengthOptions = this.insert(options.initialPageLength, options.pageLengthOptions);\n        }\n        return (\n            <div className=\"tableContainer\">\n                <DataTable\n                    keys=\"name\"\n                    columns={cols}\n                    initialData={data}\n                    initialPageLength={options.initialPageLength || 5}\n                    disablePagination={options.disablePagination}\n                    disableFilter={options.disableFilter}\n                    disableRowChoice={options.disableRowChoice}\n                    pageSizeLabel={options.pageSizeLabel}\n                    noDataLabel={options.noDataLabel}\n                    searchLabel={options.searchLabel}\n                    searchPlaceholder={options.searchPlaceholder}\n                    pageLengthOptions={options.pageLengthOptions}\n                    initialSortBy={{ prop: options.initialSort, order: options.initialOrder } /* { prop: cols[0].title, order: 'descending' }*/}\n                />\n            </div>\n\n        );\n\n    }\n    insert(element, array) {\n        array.splice(this.locationOf(element, array) + 1, 0, element);\n        return array;\n    }\n\n    locationOf(element, array, start, end) {\n        start = start || 0;\n        end = end || array.length;\n        let pivot = parseInt(start + (end - start) / 2, 10);\n        if (end - start <= 1 || array[pivot] === element) {return pivot;}\n        if (array[pivot] < element) {\n            return this.locationOf(element, array, pivot, end);\n        }\n        return this.locationOf(element, array, start, pivot);\n\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/components/table-component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 701,
    "kind": "class",
    "name": "TableComponent",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/table-component.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/DataTable/components/table-component.js~TableComponent",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/DataTable/components/table-component.js",
    "importStyle": "TableComponent",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/table-component.js~TableComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/table-component.js~TableComponent#render",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "insert",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/table-component.js~TableComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/table-component.js~TableComponent#insert",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "locationOf",
    "memberof": "DALI_EDITOR/plugins/DataTable/components/table-component.js~TableComponent",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/DataTable/components/table-component.js~TableComponent#locationOf",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "end",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 705,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/locales/en.js",
    "content": "module.exports = {\n    \"DataTable\": {\n        \"PluginName\": \"DataTable\",\n        \"style\": \"Style\",\n        \"margin\": \"Margin\",\n        \"left\": \"Left\",\n        \"right\": \"Right\",\n        \"top\": \"Top\",\n        \"bottom\": \"Bottom\",\n        \"padding\": \"Padding\",\n        \"border_width\": \"Border Width\",\n        \"border_style\": \"Border Style\",\n        \"border_color\": \"Border Color\",\n        \"border_radius\": \"Border Radius\",\n        \"opacity\": \"Opacity\",\n        \"title\": \"Title\",\n        \"grid\": \"Grid\",\n        \"x_grid\": \"X axis grid\",\n        \"y_grid\": \"Y axis grid\",\n        \"line_color\": \"Line color\",\n        \"file\": \"Choose File\",\n        \"edit\": \"Edit\",\n        \"options\": {\n            \"ascending\": \"Ascending\",\n            \"descending\": \"Descending\",\n            \"disableFilter\": \"Search\",\n            \"disableRowChoice\": \"Page size\",\n            \"disablePagination\": \"Pagination\",\n            \"initialPageLength\": \"Initial page size\",\n            \"initialSortProp\": \"Initial order\",\n            \"initialOrder\": \"Sort type\",\n            \"noDataLabel\": \"Empty table message\",\n            \"noDataLabel_txt\": \"No data\",\n            \"pageSizeLabel\": 'Page size label',\n            \"pageSizeLabel_txt\": 'Page size',\n            \"searchLabel\": 'Search label',\n            \"searchLabel_txt\": 'Search',\n            \"searchPlaceholder\": 'Search placeholder',\n            \"searchPlaceholder_txt\": '',\n        },\n        \"or\": \"Or\",\n        \"x_axis\": \"X Axis\",\n        \"y_axis\": \"Y Axis\",\n        \"chart_type\": \"Chart Type\",\n        \"order_by\": \"Order By\",\n        \"data_rows\": \"Rows\",\n        \"data_cols\": \"Columns\",\n        \"key\": \"Key\",\n        \"alert_msg\": \"Fill in all the fields in the table\",\n        \"confirm\": \"Confirm\",\n        \"fill_in\": \"Or fill in a table\",\n        \"show\": \"Show\",\n        \"header\": {\n            \"options\": \"Table options\",\n            \"origin\": \"Data origin\",\n            \"preview\": \"Preview\",\n        },\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 706,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/DataTable/locales/es.js",
    "content": "module.exports = {\n    \"DataTable\": {\n        \"PluginName\": \"Tabla\",\n        \"style\": \"Estilo\",\n        \"margin\": \"Margin\",\n        \"left\": \"Izquierda\",\n        \"right\": \"Derecha\",\n        \"top\": \"Superior\",\n        \"bottom\": \"Inferior\",\n        \"padding\": \"Padding\",\n        \"border_width\": \"Ancho de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"border_color\": \"Color de borde\",\n        \"border_radius\": \"Radio de borde\",\n        \"opacity\": \"Opacidad\",\n        \"title\": \"Título\",\n        \"grid\": \"Rejilla\",\n        \"x_grid\": \"Rejilla eje x\",\n        \"y_grid\": \"Rejilla eje y\",\n        \"line_color\": \"Color de línea\",\n        \"file\": \"Elegir Archivo\",\n        \"edit\": \"Editar\",\n        \"or\": \"O rellenar la tabla\",\n        \"x_axis\": \"Eje X\",\n        \"y_axis\": \"Eje Y\",\n        \"chart_type\": \"Tipo de Grafico\",\n        \"options\": {\n            \"ascending\": \"Ascendente\",\n            \"descending\": \"Descendente\",\n            \"disableFilter\": \"Búsqueda\",\n            \"disableRowChoice\": \"Tamaño página\",\n            \"disablePagination\": \"Paginación\",\n            \"initialPageLength\": \"Tamaño de página inicial\",\n            \"initialSortProp\": \"Orden inicial\",\n            \"initialOrderProp\": \"Ordenar de forma\",\n            \"noDataLabel\": \"Texto tabla vacía\",\n            \"noDataLabel_txt\": \"No hay datos\",\n            \"pageSizeLabel\": 'Etiqueta Filas/pág',\n            \"pageSizeLabel_txt\": 'Filas/pág',\n            \"searchLabel\": 'Etiqueta búsqueda',\n            \"searchLabel_txt\": 'Buscar',\n            \"searchPlaceholder\": 'Placeholder búsqueda',\n            \"searchPlaceholder_txt\": '',\n        },\n        \"order_by\": \"Ordenar Por\",\n        \"data_rows\": \"Filas\",\n        \"data_cols\": \"Columnas\",\n        \"key\": \"Key\",\n        \"alert_msg\": \"Rellena todos los campos de la tabla\",\n        \"confirm\": \"Confirmar\",\n        \"fill_in\": \"O rellena una tabla\",\n        \"show\": \"Mostrar\",\n        \"header\": {\n            \"options\": \"Opciones de la tabla\",\n            \"origin\": \"Orígen de los datos\",\n            \"preview\": \"Previsualización\",\n        },\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/DataTable/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 707,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/EnrichedPlayer/EnrichedPlayer.js",
    "content": "import React from \"react\";\nimport EnrichedPlayerPlugin from './components/EnrichedPlayerPluginEditor.js';\nimport i18n from 'i18next';\nrequire('./EnrichedPlayer.scss');\n\nexport function EnrichedPlayer(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: \"EnrichedPlayer\",\n                flavor: \"react\",\n                isRich: true,\n                displayName: Dali.i18n.t(\"EnrichedPlayer.PluginName\"),\n                category: \"multimedia\",\n                initialWidth: '30%',\n                icon: \"play_arrow\",\n                marksType: [{ name: i18n.t(\"EnrichedPlayer.pos\"), key: 'value', format: '[x%]', default: '50%', defaultColor: \"#1fc8db\" }],\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        basic: {\n                            __name: Dali.i18n.t('EnrichedPlayer.Video'),\n                            icon: 'link',\n                            buttons: {\n                                url: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.URL'),\n                                    type: 'text',\n                                    value: base.getState().url,\n                                    autoManaged: false,\n                                },\n                                controls: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.Show_controls'),\n                                    type: 'checkbox',\n                                    checked: base.getState().controls,\n                                    autoManaged: false,\n                                },\n                            },\n                        },\n                        style: {\n                            __name: Dali.i18n.t('EnrichedPlayer.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.padding'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.border_style'),\n                                    type: 'select',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('EnrichedPlayer.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.05,\n                                },\n\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getInitialState: function() {\n            return {\n                url: \"https://www.youtube.com/watch?v=vTIIMJ9tUc8\",\n                controls: true,\n            };\n        },\n        getRenderTemplate: function(state) {\n\n            return (\n                /* jshint ignore:start */\n                <div style={{ width: \"100%\", height: \"100%\" }}>\n                    <EnrichedPlayerPlugin style={{ width: \"100%\", height: \"100%\" }} state={state} base={base} />\n                </div>\n                /* jshint ignore:end */\n            );\n        },\n        parseRichMarkInput: function(...value) {\n            let parsed_value = (value[0] + 10) * 100 / value[2];\n            return parsed_value.toFixed(2) + \"%\";\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n        validateValueInput: function(value) {\n            let regex = /(^\\d+(?:\\.\\d*)?%$)/g;\n            let match = regex.exec(value);\n            if (match && match.length === 2) {\n                let val = Math.round(parseFloat(match[1]) * 100) / 100;\n                if (isNaN(val) || val > 100) {\n                    return { isWrong: true, message: i18n.t(\"EnrichedPlayer.message_mark_percentage\") };\n                }\n                value = val + '%';\n            } else {\n                return { isWrong: true, message: i18n.t(\"EnrichedPlayer.message_mark_percentage\") };\n            }\n            return { isWrong: false, value: value };\n\n        },\n\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/EnrichedPlayer/EnrichedPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 708,
    "kind": "function",
    "name": "EnrichedPlayer",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/EnrichedPlayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/EnrichedPlayer.js~EnrichedPlayer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/EnrichedPlayer/EnrichedPlayer.js",
    "importStyle": "{EnrichedPlayer}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"parseRichMarkInput\": *, \"handleToolbar\": *, \"validateValueInput\": *}"
      ]
    }
  },
  {
    "__docId__": 709,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js",
    "content": "import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ReactPlayer from 'react-player';\nimport screenfull from 'screenfull';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nexport default class EnrichedPlayerPlugin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            volume: 0.8,\n            duration: 0,\n            played: 0,\n            seeking: false,\n            fullscreen: false,\n            controls: true,\n            toBeTriggered: [],\n            triggering: false,\n        };\n    }\n\n    componentWillUpdate(nextProps, nextState) {\n        console.log(nextState);\n        console.log(nextProps);\n        if(nextState.played !== this.state.played) {\n            let sudo = this;\n\n            let marks = this.props.state.__marks;\n            let triggerMark = this.props.triggerMark;\n            let triggerArray = this.state.toBeTriggered;\n            triggerArray.forEach(function(e) {\n                if ((parseFloat(e.value) / 100).toFixed(3) < parseFloat(nextState.played).toFixed(3)) {\n                    let toBeTriggered = triggerArray;\n                    triggerMark(sudo.props.box_id, e.value, true);\n                    toBeTriggered.splice(e, 1);\n                    sudo.setState({ toBeTriggered: toBeTriggered });\n                }\n            });\n\n            Object.keys(marks).forEach(function(key) {\n                let notInArray = true;\n\n                triggerArray.forEach(function(mark) {\n                    if(mark === key) {\n                        notInArray = false;\n                    }\n                });\n\n                if(notInArray && parseFloat(nextState.played).toFixed(3) <= (parseFloat(marks[key].value) / 100).toFixed(3) && parseFloat(parseFloat(nextState.played).toFixed(3)) + 0.1 >= parseFloat((parseFloat(marks[key].value) / 100).toFixed(3))) {\n                    let toBeTriggered = triggerArray;\n                    toBeTriggered.push(marks[key]);\n                    sudo.setState({ toBeTriggered: toBeTriggered });\n                }\n            });\n        }\n    }\n\n    componentWillMount() {\n        if(this.props.state.currentState !== undefined) {\n            this.setState({ initialPoint: parseFloat(this.props.state.currentState) / 100 });\n        }\n    }\n\n    playPause() {\n        this.setState({ playing: !this.state.playing });\n    }\n\n    onClickFullscreen() {\n        if(!this.state.fullscreen) {\n            screenfull.request(findDOMNode(this.player_wrapper));\n        } else {\n            screenfull.exit();\n        }\n        this.setState({ fullscreen: !this.state.fullscreen });\n    }\n\n    setVolume(e) {\n        this.setState({ volume: parseFloat(e.target.value) });\n    }\n\n    setPlaybackRate(e) {\n        console.log(parseFloat(e.target.value));\n        this.setState({ playbackRate: parseFloat(e.target.value) });\n    }\n\n    onSeekMouseDown() {\n        this.setState({ seeking: true });\n    }\n\n    onSeekChange(e) {\n        this.setState({ played: (e.clientX - e.target.getBoundingClientRect().left) / e.target.getBoundingClientRect().width });\n    }\n\n    onSeekMouseUp(e) {\n\n        if(e.target.className.indexOf('progress-player-input') !== -1) {\n            this.setState({ seeking: false });\n        }\n        this.player.seekTo((e.clientX - e.target.getBoundingClientRect().left) / e.target.getBoundingClientRect().width);\n\n    }\n\n    onProgress(state) {\n        // console.log(state);\n        // We only want to update time slider if we are not currently seeking\n        if (!this.state.seeking) {\n            this.setState(state);\n        }\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.state.controls === true && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: true });\n        } else if (nextProps.state.controls === false && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: false });\n        }\n    }\n\n    componentDidMount() {\n        if(this.player !== undefined && this.state.initialPoint !== undefined) {\n            this.player.seekTo(this.state.initialPoint);\n            this.setState({ initialPoint: undefined });\n        }\n    }\n\n    render() {\n\n        /* jshint ignore:start */\n        let marks = this.props.state.__marks;\n\n        let markElements = Object.keys(marks).map((id) =>{\n            let value = marks[id].value;\n            let title = marks[id].title;\n            let color = marks[id].color;\n\n            return(\n                <OverlayTrigger key={id} text={title} placement=\"top\" overlay={<Tooltip id={id}>{title}</Tooltip>}>\n                    <a key={id} style={{ left: value, position: \"absolute\" }} href=\"#\">\n                        <div style={{ width: \"4px\", height: \"8px\", background: color || \"#1fc8db\" }}>\n                            <i className=\"material-icons\" style={{ color: color || \"#1fc8db\", position: \"relative\", top: \"-24px\", left: \"-10px\" }}>room</i>\n                        </div>\n                    </a>\n                </OverlayTrigger>);\n        });\n\n        /* jshint ignore:start */\n        return (\n            <div ref={player_wrapper => {this.player_wrapper = player_wrapper;}} style={{ width: \"100%\", height: \"100%\" }} className=\"enriched-player-wrapper\">\n                <ReactPlayer\n                    ref={player => { this.player = player; }}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    height=\"100%\"\n                    width=\"100%\"\n                    url={this.props.state.url}\n                    playing={this.state.playing}\n                    volume={this.state.volume}\n                    onPlay={() => this.setState({ playing: true })}\n                    onPause={() => this.setState({ playing: false })}\n                    onEnded={() => this.setState({ playing: false })}\n                    onProgress={this.onProgress.bind(this)}\n                    onDuration={duration => this.setState({ duration })}\n                />\n                {(this.state.controls) && (\n                    <div className=\"player-media-controls\" style={{ pointerEvents: 'all' }}>\n                        <button className=\"play-player-button\" onClick={this.playPause.bind(this)}>{this.state.playing ? <i className=\"material-icons\">pause</i> : <i className=\"material-icons\">play_arrow</i>}</button>\n                        <div className=\"progress-player-input dropableRichZone\" style={{ height: \"10px\", position: \"relative\" }}\n                            // value={this.state.played}\n                            onMouseDown={this.onSeekMouseDown.bind(this)}\n                            onChange={this.onSeekChange.bind(this)}\n                            onMouseUp={this.onSeekMouseUp.bind(this)}\n                        >\n                            <div className=\"fakeProgress\" />\n                            <div className=\"mainSlider\" style={{ position: \"absolute\", left: this.state.played * 100 + \"%\" }} />\n                            {markElements}\n                        </div>\n                        <input className=\"volume-player-input \" type='range' min={0} max={1} step='any' value={this.state.volume} onChange={this.setVolume.bind(this)} />\n                        <button className=\"fullscreen-player-button\" onClick={this.onClickFullscreen.bind(this)}>{(!this.state.fullscreen) ? <i className=\"material-icons\">fullscreen</i> : <i className=\"material-icons\">fullscreen_exit</i>}</button>\n                    </div>)}\n            </div>\n        );\n        /* jshint ignore:end */\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 710,
    "kind": "class",
    "name": "EnrichedPlayerPlugin",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js",
    "importStyle": "EnrichedPlayerPlugin",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 711,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 712,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#state",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"volume\": number, \"duration\": *, \"played\": *, \"seeking\": *, \"fullscreen\": *, \"controls\": boolean, \"toBeTriggered\": *, \"triggering\": *}"
      ]
    }
  },
  {
    "__docId__": 713,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#componentWillUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 714,
    "kind": "method",
    "name": "componentWillMount",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#componentWillMount",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "playPause",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#playPause",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "onClickFullscreen",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#onClickFullscreen",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 717,
    "kind": "method",
    "name": "setVolume",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 718,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#setPlaybackRate",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 719,
    "kind": "method",
    "name": "onSeekMouseDown",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#onSeekMouseDown",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "onSeekChange",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#onSeekChange",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "onSeekMouseUp",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#onSeekMouseUp",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "onProgress",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#onProgress",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "member",
    "name": "player_wrapper",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#player_wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "name": "player",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPlugin.js~EnrichedPlayerPlugin#player",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js",
    "content": "import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport ReactPlayer from 'react-player';\nimport screenfull from 'screenfull';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport ClickNHold from '../../../_editor/components/rich_plugins/click_n_hold/ClickNHold';\n\nexport default class EnrichedPlayerPlugin extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            volume: 0.8,\n            duration: 0,\n            played: 0,\n            seeking: false,\n            fullscreen: false,\n            controls: true,\n        };\n    }\n\n    playPause() {\n        this.setState({ playing: !this.state.playing });\n    }\n\n    onClickFullscreen() {\n        if(!this.state.fullscreen) {\n            screenfull.request(findDOMNode(this.player_wrapper));\n        } else {\n            screenfull.exit();\n        }\n        this.setState({ fullscreen: !this.state.fullscreen });\n    }\n\n    setVolume(e) {\n        this.setState({ volume: parseFloat(e.target.value) });\n    }\n\n    setPlaybackRate(e) {\n        console.log(parseFloat(e.target.value));\n        this.setState({ playbackRate: parseFloat(e.target.value) });\n    }\n\n    onSeekMouseDown() {\n        this.setState({ seeking: true });\n    }\n\n    onSeekChange(e) {\n        this.setState({ played: (e.clientX - e.target.getBoundingClientRect().left) / e.target.getBoundingClientRect().width });\n    }\n\n    onSeekMouseUp(e) {\n        if(e.target.className.indexOf('progress-player-input') !== -1) {\n            this.setState({ seeking: false });\n        }\n        this.player.seekTo((e.clientX - e.target.getBoundingClientRect().left) / e.target.getBoundingClientRect().width);\n    }\n\n    onProgress(state) {\n        // We only want to update time slider if we are not currently seeking\n        if (!this.state.seeking) {\n            this.setState(state);\n        }\n    }\n\n    getDuration() {\n        return this.state.duration;\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.state.controls === true && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: true });\n        } else if (nextProps.state.controls === false && this.state.controls !== this.props.state.controls) {\n            this.setState({ controls: false });\n        }\n    }\n\n    render() {\n\n        /* jshint ignore:start */\n        let marks = this.props.state.__marks;\n\n        let markElements = Object.keys(marks).map((id) =>{\n            let value = marks[id].value;\n            let title = marks[id].title;\n            let color = marks[id].color;\n\n            return(\n                <ClickNHold key={id} style={{ left: value, position: \"absolute\" }} time={1.5} mark={id} base={this.props.base}>\n                    <a key={id} href=\"#\">\n                        <div style={{ width: \"4px\", height: \"8px\", background: color || \"#1fc8db\" }}>\n                            <OverlayTrigger key={id} text={title} placement=\"top\" overlay={<Tooltip id={id}>{title}</Tooltip>}>\n                                <i style={{ color: color || \"#1fc8db\", position: \"relative\", top: \"-24px\", left: \"-10px\" }} className=\"material-icons\">room</i>\n                            </OverlayTrigger>\n                        </div>\n                    </a>\n                </ClickNHold>);\n        });\n        /* jshint ignore:start */\n        return (\n            <div ref={player_wrapper => {this.player_wrapper = player_wrapper;}} style={{ width: \"100%\", height: \"100%\", pointerEvents: \"none\" }} className=\"enriched-player-wrapper\">\n                <ReactPlayer\n                    ref={player => { this.player = player; }}\n                    style={{ width: \"100%\", height: \"100%\" }}\n                    height=\"100%\"\n                    width=\"100%\"\n                    url={this.props.state.url}\n                    playing={this.state.playing}\n                    volume={this.state.volume}\n                    onPlay={() => this.setState({ playing: true })}\n                    onPause={() => this.setState({ playing: false })}\n                    onEnded={() => this.setState({ playing: false })}\n                    onProgress={this.onProgress.bind(this)}\n                    onDuration={duration => this.setState({ duration })}\n                />\n                {(this.state.controls) && (\n                    <div className=\"player-media-controls\" style={{ pointerEvents: 'all' }}>\n                        <button className=\"play-player-button\" onClick={this.playPause.bind(this)}>{this.state.playing ? <i className=\"material-icons\">pause</i> : <i className=\"material-icons\">play_arrow</i>}</button>\n                        <div className=\"progress-player-input dropableRichZone\" style={{ height: \"10px\", position: \"relative\" }}\n                            // value={this.state.played}\n                            onMouseDown={this.onSeekMouseDown.bind(this)}\n                            onChange={this.onSeekChange.bind(this)}\n                            onMouseUp={this.onSeekMouseUp.bind(this)}\n                        >\n                            <div className=\"fakeProgress\" />\n                            <div className=\"mainSlider\" style={{ position: \"absolute\", left: this.state.played * 100 + \"%\" }} />\n                            {markElements}\n                        </div>\n                        <input className=\"volume-player-input \" type='range' min={0} max={1} step='any' value={this.state.volume} onChange={this.setVolume.bind(this)} />\n                        <button className=\"fullscreen-player-button\" onClick={this.onClickFullscreen.bind(this)}>{(!this.state.fullscreen) ? <i className=\"material-icons\">fullscreen</i> : <i className=\"material-icons\">fullscreen_exit</i>}</button>\n                    </div>)}\n            </div>\n        );\n        /* jshint ignore:end */\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 729,
    "kind": "class",
    "name": "EnrichedPlayerPlugin",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js",
    "importStyle": "EnrichedPlayerPlugin",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 730,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 731,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#state",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "{\"volume\": number, \"duration\": *, \"played\": *, \"seeking\": *, \"fullscreen\": *, \"controls\": boolean}"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "playPause",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#playPause",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "onClickFullscreen",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#onClickFullscreen",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "setVolume",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#setVolume",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "setPlaybackRate",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#setPlaybackRate",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "onSeekMouseDown",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#onSeekMouseDown",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "onSeekChange",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#onSeekChange",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "onSeekMouseUp",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#onSeekMouseUp",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "onProgress",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#onProgress",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "getDuration",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#getDuration",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "componentWillReceiveProps",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#componentWillReceiveProps",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 742,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#render",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 743,
    "kind": "member",
    "name": "player_wrapper",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#player_wrapper",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "member",
    "name": "player",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin",
    "static": false,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/components/EnrichedPlayerPluginEditor.js~EnrichedPlayerPlugin#player",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/EnrichedPlayer/locales/en.js",
    "content": "module.exports = {\r\n    \"EnrichedPlayer\": {\r\n        \"Allow_fullscreen\": \"Allow fullscreen\",\r\n        \"Show_controls\": \"Show Controls\",\r\n        \"Autoplay\": \"Autoplay\",\r\n        \"URL\": \"URL\",\r\n        \"Video\": \"Video\",\r\n        \"background_color\": \"Background color\",\r\n        \"border_color\": \"Border color\",\r\n        \"border_size\": \"Border Size\",\r\n        \"border_style\": \"Border Style\",\r\n        \"box_style\": \"Box style\",\r\n        \"opacity\": \"Opacity\",\r\n        \"padding\": \"Padding\",\r\n        \"pos\": \"Moment\",\r\n        \"PluginName\": \"Enriched Player\",\r\n        \"radius\": \"Radius\",\r\n        \"source\": \"Source\",\r\n        \"message_mark_percentage\": \"You've chosen an incorrect value. You must introduce a percentage between 0 and 100. E.g.. 45.66%\",\r\n\r\n    },\r\n};\r\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/EnrichedPlayer/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 746,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/EnrichedPlayer/locales/es.js",
    "content": "module.exports = {\r\n    \"EnrichedPlayer\": {\r\n        \"Allow_fullscreen\": \"Permitir pantalla completa\",\r\n        \"Show_controls\": \"Mostrar controles\",\r\n        \"Autoplay\": \"Reproducción automática\",\r\n        \"URL\": \"URL\",\r\n        \"Video\": \"Vídeo\",\r\n        \"background_color\": \"Color de fondo\",\r\n        \"border_color\": \"Color de borde\",\r\n        \"border_size\": \"Grosor de borde\",\r\n        \"border_style\": \"Estilo de borde\",\r\n        \"box_style\": \"Estilo caja\",\r\n        \"opacity\": \"Opacidad\",\r\n        \"padding\": \"Padding\",\r\n        \"PluginName\": \"Reproductor enriquecido\",\r\n        \"pos\": \"Momento\",\r\n        \"radius\": \"Radio\",\r\n        \"source\": \"Origen\",\r\n        \"message_mark_percentage\": \"Ha introducido un valor incorrecto. Debe introducir un porcentaje entre 0 y 100. Ej. 45.66%\",\r\n\r\n    },\r\n};\r\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/EnrichedPlayer/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 747,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/EnrichedPlayer/visor/EnrichedPlayer.js",
    "content": "import React from 'react';\nimport EnrichedPlayerPlugin from '../components/EnrichedPlayerPlugin.js';\nrequire('./../EnrichedPlayer.scss');\n\nexport function EnrichedPlayer(base) {\n    return {\n        getRenderTemplate: function(state, id) {\n            return (\n                /* jshint ignore:start */\n                <div style={{ width: \"100%\", height: \"100%\" }}>\n                    <EnrichedPlayerPlugin style={{ width: \"100%\", height: \"100%\" }} state={state} box_id={id} triggerMark={base.triggerMark} />\n                </div>\n                /* jshint ignore:end */\n            );\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/EnrichedPlayer/visor/EnrichedPlayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 748,
    "kind": "function",
    "name": "EnrichedPlayer",
    "memberof": "DALI_EDITOR/plugins/EnrichedPlayer/visor/EnrichedPlayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/EnrichedPlayer/visor/EnrichedPlayer.js~EnrichedPlayer",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/EnrichedPlayer/visor/EnrichedPlayer.js",
    "importStyle": "{EnrichedPlayer}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getRenderTemplate\": *}"
      ]
    }
  },
  {
    "__docId__": 749,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/.data.example.json",
    "content": "[\n  {\n    \"name\": \"Darron Weissnat IV\",\n    \"BMI\": 20.72,\n    \"age\": 39,\n    \"birthday\": \"2005-01-03T00:00:00.000Z\",\n    \"city\": \"East Russel\",\n    \"married\": false,\n    \"index\": 0\n  },\n  {\n    \"name\": \"Pablo Ondricka\",\n    \"BMI\": 19.32,\n    \"age\": 38,\n    \"birthday\": \"1974-05-13T00:00:00.000Z\",\n    \"city\": \"Lake Edytheville\",\n    \"married\": false,\n    \"index\": 1\n  },\n  {\n    \"name\": \"Mr. Stella Kiehn Jr.\",\n    \"BMI\": 16.8,\n    \"age\": 34,\n    \"birthday\": \"2003-07-25T00:00:00.000Z\",\n    \"city\": \"Lake Veronicaburgh\",\n    \"married\": false,\n    \"index\": 2\n  },\n  {\n    \"name\": \"Lavon Hilll I\",\n    \"BMI\": 20.57,\n    \"age\": 12,\n    \"birthday\": \"1994-10-26T00:00:00.000Z\",\n    \"city\": \"Annatown\",\n    \"married\": true,\n    \"index\": 3\n  },\n  {\n    \"name\": \"Clovis Pagac\",\n    \"BMI\": 24.28,\n    \"age\": 26,\n    \"birthday\": \"1995-11-10T00:00:00.000Z\",\n    \"city\": \"South Eldredtown\",\n    \"married\": false,\n    \"index\": 4\n  },\n  {\n    \"name\": \"Gaylord Paucek\",\n    \"BMI\": 24.41,\n    \"age\": 30,\n    \"birthday\": \"1975-06-12T00:00:00.000Z\",\n    \"city\": \"Koeppchester\",\n    \"married\": true,\n    \"index\": 5\n  },\n  {\n    \"name\": \"Ashlynn Kuhn MD\",\n    \"BMI\": 23.77,\n    \"age\": 32,\n    \"birthday\": \"1985-08-09T00:00:00.000Z\",\n    \"city\": \"West Josiemouth\",\n    \"married\": false,\n    \"index\": 6\n  },\n  {\n    \"name\": \"Fern Schmeler IV\",\n    \"BMI\": 27.33,\n    \"age\": 26,\n    \"birthday\": \"2005-02-10T00:00:00.000Z\",\n    \"city\": \"West Abigaleside\",\n    \"married\": true,\n    \"index\": 7\n  },\n  {\n    \"name\": \"Enid Weber\",\n    \"BMI\": 18.72,\n    \"age\": 17,\n    \"birthday\": \"1998-11-30T00:00:00.000Z\",\n    \"city\": \"Zackton\",\n    \"married\": true,\n    \"index\": 8\n  },\n  {\n    \"name\": \"Leatha O'Hara\",\n    \"BMI\": 17.68,\n    \"age\": 42,\n    \"birthday\": \"2010-10-17T00:00:00.000Z\",\n    \"city\": \"Lake Matilda\",\n    \"married\": false,\n    \"index\": 9\n  },\n  {\n    \"name\": \"Korbin Steuber\",\n    \"BMI\": 16.35,\n    \"age\": 39,\n    \"birthday\": \"1975-06-30T00:00:00.000Z\",\n    \"city\": \"East Armandofort\",\n    \"married\": true,\n    \"index\": 10\n  },\n  {\n    \"name\": \"Brennon Torphy\",\n    \"BMI\": 27.37,\n    \"age\": 24,\n    \"birthday\": \"2003-10-21T00:00:00.000Z\",\n    \"city\": \"Croninfort\",\n    \"married\": true,\n    \"index\": 11\n  },\n  {\n    \"name\": \"Ms. Genoveva Bradtke\",\n    \"BMI\": 28.63,\n    \"age\": 19,\n    \"birthday\": \"1983-01-10T00:00:00.000Z\",\n    \"city\": \"Port Emanuel\",\n    \"married\": true,\n    \"index\": 12\n  },\n  {\n    \"name\": \"Gregg Halvorson\",\n    \"BMI\": 15.45,\n    \"age\": 15,\n    \"birthday\": \"2004-06-15T00:00:00.000Z\",\n    \"city\": \"Lake Angelinastad\",\n    \"married\": false,\n    \"index\": 13\n  },\n  {\n    \"name\": \"Mr. Sabina Schroeder III\",\n    \"BMI\": 24.27,\n    \"age\": 26,\n    \"birthday\": \"1980-11-22T00:00:00.000Z\",\n    \"city\": \"Toyview\",\n    \"married\": true,\n    \"index\": 14\n  },\n  {\n    \"name\": \"Alanna Mitchell\",\n    \"BMI\": 29.25,\n    \"age\": 37,\n    \"birthday\": \"1971-08-04T00:00:00.000Z\",\n    \"city\": \"Lake Monserratmouth\",\n    \"married\": false,\n    \"index\": 15\n  },\n  {\n    \"name\": \"Ronny Sanford\",\n    \"BMI\": 29.16,\n    \"age\": 24,\n    \"birthday\": \"1994-11-24T00:00:00.000Z\",\n    \"city\": \"New Claudhaven\",\n    \"married\": false,\n    \"index\": 16\n  },\n  {\n    \"name\": \"Emmitt Pouros\",\n    \"BMI\": 27.95,\n    \"age\": 14,\n    \"birthday\": \"1989-04-04T00:00:00.000Z\",\n    \"city\": \"Moorefurt\",\n    \"married\": true,\n    \"index\": 17\n  },\n  {\n    \"name\": \"Earl Purdy\",\n    \"BMI\": 18.34,\n    \"age\": 38,\n    \"birthday\": \"2013-04-03T00:00:00.000Z\",\n    \"city\": \"Lake Rowanberg\",\n    \"married\": true,\n    \"index\": 18\n  },\n  {\n    \"name\": \"Cordelia Klocko\",\n    \"BMI\": 25.85,\n    \"age\": 36,\n    \"birthday\": \"2011-01-17T00:00:00.000Z\",\n    \"city\": \"Lakinchester\",\n    \"married\": true,\n    \"index\": 19\n  },\n  {\n    \"name\": \"Guido Conroy\",\n    \"BMI\": 25.17,\n    \"age\": 39,\n    \"birthday\": \"1977-04-20T00:00:00.000Z\",\n    \"city\": \"Scarlettland\",\n    \"married\": true,\n    \"index\": 20\n  },\n  {\n    \"name\": \"Miss Demond Weissnat V\",\n    \"BMI\": 21.44,\n    \"age\": 19,\n    \"birthday\": \"2007-06-09T00:00:00.000Z\",\n    \"city\": \"Savionberg\",\n    \"married\": false,\n    \"index\": 21\n  },\n  {\n    \"name\": \"Easton Mante\",\n    \"BMI\": 20.61,\n    \"age\": 43,\n    \"birthday\": \"2007-01-29T00:00:00.000Z\",\n    \"city\": \"Kutchberg\",\n    \"married\": false,\n    \"index\": 22\n  },\n  {\n    \"name\": \"Dayton Ebert\",\n    \"BMI\": 29.88,\n    \"age\": 20,\n    \"birthday\": \"1978-04-27T00:00:00.000Z\",\n    \"city\": \"West Wiley\",\n    \"married\": true,\n    \"index\": 23\n  }\n]",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/.data.example.json",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 750,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/GraficaD3.js",
    "content": "import React from \"react\";\nimport Chart from './components/chart-component';\nimport Config from './components/config-component';\n\nrequire('./_graficaD3.scss');\n\nexport function GraficaD3(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: \"GraficaD3\",\n                flavor: \"react\",\n                displayName: Dali.i18n.t(\"GraficaD3.PluginName\"),\n                category: \"image\",\n                needsConfigModal: true,\n                needsConfirmation: true,\n                needsTextEdition: false,\n                icon: \"insert_chart\",\n                initialWidth: '700px',\n                initialHeight: \"300px\",\n                initialWidthSlide: '70%',\n                initialHeightSlide: '60%',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        style: {\n                            __name: Dali.i18n.t(\"GraficaD3.style\"),\n                            icon: \"palette\",\n                            order: [\n                                \"margins\",\n                                \"paddings\",\n                                \"borderWidth\",\n                                \"borderStyle\",\n                                \"borderColor\",\n                                \"borderRadius\",\n                                \"opacity\",\n                            ],\n                            accordions: {\n                                margins: {\n                                    __name: Dali.i18n.t(\"GraficaD3.margin\"),\n                                    buttons: {\n                                        left: {\n                                            __name: Dali.i18n.t(\"GraficaD3.left\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        right: {\n                                            __name: Dali.i18n.t(\"GraficaD3.right\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        top: {\n                                            __name: Dali.i18n.t(\"GraficaD3.top\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        bottom: {\n                                            __name: Dali.i18n.t(\"GraficaD3.bottom\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                    },\n                                },\n                                paddings: {\n                                    __name: Dali.i18n.t(\"GraficaD3.padding\"),\n                                    buttons: {\n                                        left: {\n                                            __name: Dali.i18n.t(\"GraficaD3.left\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        right: {\n                                            __name: Dali.i18n.t(\"GraficaD3.right\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        top: {\n                                            __name: Dali.i18n.t(\"GraficaD3.top\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                        bottom: {\n                                            __name: Dali.i18n.t(\"GraficaD3.bottom\"),\n                                            type: \"number\",\n                                            value: 0,\n                                            min: 0,\n                                            max: 500,\n                                            units: \"px\",\n                                        },\n                                    },\n                                },\n                            },\n                            buttons: {\n                                borderWidth: {\n                                    __name: Dali.i18n.t(\"GraficaD3.border_width\"),\n                                    type: \"number\",\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                    units: \"px\",\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t(\"GraficaD3.border_style\"),\n                                    type: \"select\",\n                                    value: \"solid\",\n                                    options: [\"none\", \"hidden\", \"dotted\", \"dashed\", \"solid\", \"double\", \"groove\", \"ridge\", \"inset\", \"outset\", \"initial\", \"inherit\"],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t(\"GraficaD3.border_color\"),\n                                    type: \"color\",\n                                    value: \"#000000\",\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t(\"GraficaD3.border_radius\"),\n                                    type: \"number\",\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                    step: 5,\n                                    units: \"%\",\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t(\"GraficaD3.opacity\"),\n                                    type: \"range\",\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.01,\n                                },\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getInitialState: function() {\n            let data = [];\n            let keys = [];\n            let row = {};\n            for (let i = 0; i < 1; i++) {\n                keys.push(i);\n                row[i] = \"\";\n            }\n            for (let i = 0; i < 2; i++) {\n                data.push(row);\n            }\n\n            return {\n                data: data,\n                keys: keys,\n                valueKeys: keys,\n                editing: true,\n                options: {\n                    type: \"line\",\n                    x: \"\",\n                    y: [{\n                        key: \"\",\n                        color: \"#ff7f0e\",\n                    }],\n                    gridX: true,\n                    gridY: true,\n                    rings: [{\n                        name: \"\",\n                        value: \"\",\n                        color: \"#ff7f0e\",\n                    }],\n                },\n            };\n        },\n        getRenderTemplate: function(state) {\n\n            return (\n            /* jshint ignore:start */\n                <Chart data={state.data} options={state.options} />\n            /* jshint ignore:end */\n            );\n\n        },\n        getConfigTemplate: function(extState) {\n            return (\n            /* jshint ignore:start */\n                <Config state={extState} base={base} />\n            /* jshint ignore:end */\n            );\n        },\n        fileChanged: function(event) {\n\n            let files = event.target.files;\n            let file = files[0];\n            let reader = new FileReader();\n            reader.onload = function() {\n                base.setState(\"chartData\", JSON.parse(this.result));\n            };\n            reader.readAsText(file);\n        },\n        chartTypeChange: function(elements) {\n            base.setState(\"chartType\", elements[0].id);\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/GraficaD3.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 751,
    "kind": "function",
    "name": "GraficaD3",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/GraficaD3.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/GraficaD3/GraficaD3.js~GraficaD3",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/GraficaD3/GraficaD3.js",
    "importStyle": "{GraficaD3}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"getConfigTemplate\": *, \"fileChanged\": *, \"chartTypeChange\": *, \"handleToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 752,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/components/chart-component.js",
    "content": "import React from \"react\";\nimport { ResponsiveContainer, PieChart, AreaChart, BarChart, LineChart, Pie, Area, Bar, Line, XAxis, YAxis, CartesianGrid, Legend, Tooltip } from \"recharts\";\n\nexport default class Chart extends React.Component {\n\n    render() {\n        let data = this.props.data;\n        let options = this.props.options;\n        let width = this.props.width;\n        switch (options.type) {\n        case \"line\":\n            return (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart\n                        data={data}>\n                        <XAxis dataKey={options.x} name={options.x} tickCount={data ? data.length : 5}/>\n                        <YAxis/>\n                        <CartesianGrid horizontal={options.gridX} vertical={options.gridY} />\n                        {options.y.map((y, o) => {\n                            return(\n                                <Line key={o + 1} type=\"monotone\" dataKey={y.key} stroke={y.color}/>\n                            );\n                        })}\n                        <Tooltip active/>\n                        <Legend/>\n                    </LineChart>\n                </ResponsiveContainer>\n            );\n        case \"area\":\n            return (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart\n                        data={data}>\n                        <defs>\n                            {options.y.map((y, o) => {\n                                return(\n\n                                    <linearGradient key={o + 1} id={\"colorUv\" + o} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                                        <stop offset=\"5%\" stopColor={y.color} stopOpacity={0.8}/>\n                                        <stop offset=\"95%\" stopColor={y.color} stopOpacity={0}/>\n                                    </linearGradient>\n                                );\n                            })}\n                        </defs>\n                        <XAxis dataKey={options.x} name={options.x} />\n                        <YAxis/>\n                        <CartesianGrid horizontal={options.gridX} vertical={options.gridY} />\n                        <Tooltip />\n                        {options.y.map((y, o) => {\n                            return(\n                                <Area key={o + 1} type=\"monotone\" dataKey={y.key} stroke={y.color} fillOpacity={1} fill={\"url(#colorUv\" + o + \")\"}/>\n                            );\n                        })}\n                    </AreaChart>\n                </ResponsiveContainer>\n            );\n        case \"bar\":\n            return (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart\n                        data={data}>\n                        <XAxis dataKey={options.x} name={options.x}/>\n                        <YAxis/>\n                        <CartesianGrid horizontal={options.gridX} vertical={options.gridY} />\n                        <Tooltip/>\n                        <Legend />\n                        {options.y.map((y, o) => {\n                            return(\n                                <Bar key={o + 1} dataKey={y.key} fill={y.color} scaleY={1} />\n                            );\n                        })}\n                    </BarChart>\n                </ResponsiveContainer>\n            );\n        case \"pie\":\n            let rings = [];\n            for (let ring of options.rings) {\n                let newRing = {};\n                let newData = [];\n                for (let row of data) {\n                    let value = {};\n                    value.name = row[ring.name];\n                    value.value = row[ring.value];\n                    newData.push(value);\n                }\n                newRing.data = newData;\n                newRing.color = ring.color;\n                rings.push(newRing);\n            }\n\n            return (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <PieChart>\n                        <Tooltip />\n                        {rings.map((ring, o) => {\n                            return(\n                                <Pie key={o + 1} data={ring.data} cx=\"50%\" cy=\"50%\" innerRadius={o * 50} outerRadius={(o + 1) * 50 - 10} nameKey=\"name\" fill={ring.color} dataKey={ring.value} label={o === rings.length - 1} />\n                            );\n                        })}\n                    </PieChart>\n                </ResponsiveContainer>\n            );\n        default:\n\n            return (\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <LineChart\n\n                        data={data}>\n                        <XAxis dataKey={options.x} name={options.x}/>\n                        <YAxis/>\n                        <CartesianGrid\n                            horizontal\n                            vertical={options.xGrid} />\n                        {options.y.map((y, o) => {\n                            return(\n                                <Line key={o + 1} type=\"monotone\"\n                                    dataKey={y.key}\n                                    stroke={y.color}/>\n                            );\n                        })}\n                        <Tooltip active/>\n                        <Legend/>\n                    </LineChart>\n                </ResponsiveContainer>\n            );\n\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/components/chart-component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 753,
    "kind": "class",
    "name": "Chart",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-component.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-component.js~Chart",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/GraficaD3/components/chart-component.js",
    "importStyle": "Chart",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 754,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-component.js~Chart",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-component.js~Chart#render",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js",
    "content": "import React from \"react\";\nimport { Form, FormGroup, FormControl, ControlLabel, Col, Checkbox, Radio } from \"react-bootstrap\";\n\nimport i18n from 'i18next';\n\nexport default class ChartOptions extends React.Component {\n    constructor(props) {\n        super(props);\n        let options = this.props.options;\n        options.keys = this.props.keys;\n        options.valueKeys = this.props.valueKeys;\n        this.state = options;\n        this.typeChanged = this.typeChanged.bind(this);\n        this.colorChanged = this.colorChanged.bind(this);\n        this.yAxisChanged = this.yAxisChanged.bind(this);\n        this.xKeyChanged = this.xKeyChanged.bind(this);\n        this.xGridChanged = this.xGridChanged.bind(this);\n        this.yKeyChanged = this.yKeyChanged.bind(this);\n        this.yGridChanged = this.yGridChanged.bind(this);\n        this.ringsNumberChanged = this.ringsNumberChanged.bind(this);\n        this.ringNameChanged = this.ringNameChanged.bind(this);\n        this.ringValueChanged = this.ringValueChanged.bind(this);\n        this.ringColorChanged = this.ringColorChanged.bind(this);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n\n        if(prevState !== this.state) {\n            if (typeof this.props.optionsChanged === 'function') {\n                // console.log(this.state);\n                this.props.optionsChanged({\n                    type: this.state.type,\n                    x: this.state.x,\n                    y: this.state.y,\n                    gridX: this.state.gridX,\n                    gridY: this.state.gridY,\n                    rings: this.state.rings,\n                });\n            }\n        }\n    }\n\n    typeChanged(event) {\n        this.setState({ type: event.target.value });\n    }\n\n    colorChanged(event) {\n        let y = this.state.y;\n        y[event.target.name].color = event.target.value;\n        this.setState({ y: y });\n    }\n\n    yAxisChanged(event) {\n        let yAxis = this.state.y;\n        let number = event.target.value;\n        if(number > yAxis.length) {\n            for (let i = yAxis.length; i < number; i++) {\n                yAxis[i] = {\n                    key: \"\",\n                    color: \"#1FC8DB\",\n                };\n            }\n        } else {\n            yAxis = yAxis.slice(0, number);\n        }\n        this.setState({ y: yAxis });\n    }\n\n    xKeyChanged(event) {\n        this.setState({ x: event.target.value });\n    }\n\n    xGridChanged(event) {\n        this.setState({ gridX: event.target.checked });\n    }\n\n    yKeyChanged(event) {\n        let y = this.state.y;\n        y[event.target.name].key = event.target.value;\n        this.setState({ y: y });\n    }\n\n    yGridChanged(event) {\n        this.setState({ gridY: event.target.checked });\n    }\n\n    ringsNumberChanged(event) {\n        let rings = this.state.rings;\n        let number = event.target.value;\n        if(number > rings.length) {\n            for (let i = rings.length; i < number; i++) {\n                rings[i] = {\n                    name: this.state.keys[0],\n                    value: this.state.valueKeys[0],\n                    color: \"#1FC8DB\",\n                };\n            }\n        } else {\n            rings = rings.slice(0, number);\n        }\n        this.setState({ rings: rings });\n    }\n\n    ringNameChanged(event) {\n        let rings = this.state.rings;\n        rings[event.target.name].name = event.target.value;\n        this.setState({ rings: rings });\n    }\n\n    ringValueChanged(event) {\n        let rings = this.state.rings;\n        rings[event.target.name].value = event.target.value;\n        this.setState({ rings: rings });\n    }\n\n    ringColorChanged(event) {\n        let rings = this.state.rings;\n        rings[event.target.name].color = event.target.value;\n        this.setState({ rings: rings });\n    }\n\n    render() {\n        return (\n            <div>\n                <h4>{i18n.t(\"GraficaD3.header.options\")}</h4>\n                <div className=\"content-block\">\n                    <Form horizontal>\n                        <FormGroup>\n                            <Col xs={5}>\n                                <FormControl.Static>\n                                    {i18n.t(\"GraficaD3.chart_type\")}\n                                </FormControl.Static>\n                            </Col>\n                            <Col xs={7}>\n                                <FormControl componentClass=\"select\" placeholder=\"line\" value={this.state.type} onChange={this.typeChanged}>\n                                    <option value=\"line\">{i18n.t(\"GraficaD3.types.line\")}</option>\n                                    <option value=\"area\">{i18n.t(\"GraficaD3.types.area\")}</option>\n                                    <option value=\"bar\">{i18n.t(\"GraficaD3.types.bar\")}</option>\n                                    <option value=\"pie\">{i18n.t(\"GraficaD3.types.pie\")}</option>\n                                </FormControl>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col xs={12}>\n                                <FormControl.Static>\n                                    {i18n.t(\"GraficaD3.see_grid\")}\n                                </FormControl.Static>\n                            </Col>\n                            <Col xs={6}>\n                                <Checkbox checked={this.state.gridX} onChange={this.xGridChanged} />\n                                {i18n.t(\"GraficaD3.horizontal\")}\n                            </Col>\n                            <Col xs={6}>\n                                <Checkbox checked={this.state.gridY} onChange={this.yGridChanged} />\n                                {i18n.t(\"GraficaD3.vertical\")}\n                            </Col>\n                        </FormGroup>\n                    </Form>\n                    {this.state.type !== 'pie' &&\n                    <Form horizontal>\n                        <FormGroup>\n                            <Col xs={5}>\n                                <FormControl.Static>\n                                    {i18n.t(\"GraficaD3.axes_h\")}\n                                </FormControl.Static>\n                            </Col>\n                            <Col xs={7}>\n                                <FormControl componentClass=\"select\" placeholder={this.state.keys[0]} value={this.state.x} onChange={this.xKeyChanged}>\n                                    {this.state.keys.map((x, i) => {\n                                        return(\n                                            <option key={i + 1} value={x}>{x}</option>\n                                        );\n                                    })}\n                                </FormControl>\n                            </Col>\n                        </FormGroup>\n                        <FormGroup>\n                            <Col xs={5}>\n                                <FormControl.Static>\n                                    {i18n.t(\"GraficaD3.axes_v\")}\n                                </FormControl.Static>\n                            </Col>\n                            <Col xs={7}>\n                                <FormControl type=\"number\" value={this.state.y.length} onChange={this.yAxisChanged}/>\n                            </Col>\n                        </FormGroup>\n\n                        {this.state.y.map((y, i) => {\n                            return(\n\n                                <div key={i + 1}>\n                                    <hr />\n                                    <FormGroup>\n                                        <Col xs={12}>\n                                            <h5>\n                                                {i18n.t(\"GraficaD3.axis\") + ' ' + i}\n                                            </h5>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Col xs={5}>\n                                            <FormControl.Static>\n                                                {i18n.t(\"GraficaD3.key\") + ' ' }\n                                            </FormControl.Static>\n                                        </Col>\n                                        <Col xs={7}>\n                                            <FormControl componentClass=\"select\" placeholder={this.state.valueKeys[0]} name={i} value={y.key} onChange={this.yKeyChanged}>\n                                                {this.state.valueKeys.map((x, w) => {\n                                                    return(\n                                                        <option key={w + 1} value={x}>{x}</option>\n                                                    );\n                                                })}\n                                            </FormControl>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Col xs={5}>\n                                            <FormControl.Static>\n                                                {\"Color\"}\n                                            </FormControl.Static>\n                                        </Col>\n                                        <Col xs={7}>\n                                            <FormControl type=\"color\" name={i} value={y.color} onChange={this.colorChanged}/>\n                                        </Col>\n                                    </FormGroup>\n                                </div>\n                            );\n                        })}\n\n                    </Form>\n                    }\n                    {this.state.type === 'pie' &&\n                    <Form horizontal>\n                        <FormGroup>\n                            <Col componentClass={ControlLabel} xs={4}>\n                                <FormControl.Static>\n                                    {i18n.t(\"GraficaD3.rings\")}\n                                </FormControl.Static>\n                            </Col>\n                            <Col xs={6}>\n                                <FormControl type=\"number\" value={this.state.rings.length} onChange={this.ringsNumberChanged}/>\n                            </Col>\n\n                        </FormGroup>\n\n                        {this.state.rings.map((ring, i) => {\n                            return(\n                                <div key={i + 1}>\n                                    <FormGroup>\n                                        <Col componentClass={ControlLabel} xs={6}>\n                                            <FormControl.Static>\n                                                {i18n.t(\"GraficaD3.ring\") + ' ' + (i + 1)}\n                                            </FormControl.Static>\n                                        </Col>\n                                    </FormGroup>\n\n                                    <FormGroup>\n                                        <Col componentClass={ControlLabel} xs={6} xsOffset={3}>\n                                            {i18n.t(\"GraficaD3.name\")}\n                                        </Col>\n                                        <Col xs={6}>\n                                            <FormControl componentClass=\"select\" placeholder=\"select\" name={i} value={ring.name} onChange={this.ringNameChanged}>\n                                                {this.state.keys.map((key, n) => {\n                                                    return(\n                                                        <option key={n + 1} value={key}>{key}</option>\n                                                    );\n                                                })}\n                                            </FormControl>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Col componentClass={ControlLabel} xs={6} xsOffset={3}>\n                                            {i18n.t(\"GraficaD3.value\")}\n                                        </Col>\n                                        <Col xs={6}>\n                                            <FormControl componentClass=\"select\" placeholder={this.state.valueKeys[0]} name={i} value={ring.value} onChange={this.ringValueChanged}>\n                                                {this.state.valueKeys.map((key, r) => {\n                                                    return(\n                                                        <option key={r + 1} value={key}>{key}</option>\n                                                    );\n                                                })}\n                                            </FormControl>\n                                        </Col>\n                                    </FormGroup>\n                                    <FormGroup>\n                                        <Col componentClass={ControlLabel} xs={6} xsOffset={3}>\n                                            {i18n.t(\"GraficaD3.color\")}\n                                        </Col>\n                                        <Col xs={6}>\n                                            <FormControl type=\"color\" name={i} value={ring.color} onChange={this.ringColorChanged}/>\n                                        </Col>\n                                    </FormGroup>\n                                </div>\n                            );\n                        })}\n                    </Form>\n\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/components/chart-options.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 756,
    "kind": "class",
    "name": "ChartOptions",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/GraficaD3/components/chart-options.js",
    "importStyle": "ChartOptions",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 757,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true
  },
  {
    "__docId__": 758,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#state",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "prevProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "prevState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 771,
    "kind": "method",
    "name": "typeChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#typeChanged",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 772,
    "kind": "method",
    "name": "colorChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#colorChanged",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 773,
    "kind": "method",
    "name": "yAxisChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#yAxisChanged",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 774,
    "kind": "method",
    "name": "xKeyChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#xKeyChanged",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "xGridChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#xGridChanged",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 776,
    "kind": "method",
    "name": "yKeyChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#yKeyChanged",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 777,
    "kind": "method",
    "name": "yGridChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#yGridChanged",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 778,
    "kind": "method",
    "name": "ringsNumberChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#ringsNumberChanged",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "ringNameChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#ringNameChanged",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "ringValueChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#ringValueChanged",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "ringColorChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#ringColorChanged",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/chart-options.js~ChartOptions#render",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 783,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js",
    "content": "import React from \"react\";\nimport { Button, Col, Grid, Row } from \"react-bootstrap\";\nimport i18n from 'i18next';\nimport DataProvider from './data-provider';\nimport ChartOptions from './chart-options';\nimport Chart from './chart-component';\n\nexport default class Config extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let state = this.props.state;\n        state.base = this.props.base;\n        this.modifyState = this.modifyState.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n        this.setOptions = this.setOptions.bind(this);\n        this.optionsChanged = this.optionsChanged.bind(this);\n        this.editButtonClicked = this.editButtonClicked.bind(this);\n        this.updateChart = this.updateChart.bind(this);\n        this.state = state;\n    }\n\n    componentDidUpdate(nextProps, nextState) {\n        if (nextProps.state.editing === false) {\n            this.props.base.configModalNeedsUpdate();\n        }\n    }\n\n    componentDidMount() {\n        let { clientWidth } = this.refs.chartContainer;\n        this.setState({ chartWidth: clientWidth });\n    }\n\n    modifyState() {\n        // console.log(\"modifyState\");\n        // console.log(this.state);\n        this.state.base.setState(\"options\", this.state.options);\n        this.state.base.setState(\"data\", this.state.data);\n        this.state.base.setState(\"keys\", this.state.keys);\n        this.state.base.setState(\"valueKeys\", this.state.valueKeys);\n        this.state.base.setState(\"editing\", this.state.editing);\n    }\n\n    dataChanged(values) {\n\n        this.setState({ editing: false });\n        this.state.base.setState(\"data\", values.data);\n        this.setOptions(values.data, values.keys);\n        this.updateChart();\n\n    }\n\n    setOptions(data, keys) {\n        let nKeys = [];\n        for (let i = 0; i < keys.length; i++) {\n            let value = keys[i];\n            nKeys[i] = {};\n            nKeys[i].value = value;\n            nKeys[i].notNumber = true;\n        }\n\n        for (let o = 0; o < data.length; o++) {\n            let row = data[o];\n            for (let i = 0; i < keys.length; i++) {\n                let key = nKeys[i];\n                data[o][keys[i]] = isNaN(data[o][keys[i]]) || typeof(data[o][keys[i]]) === \"boolean\" || data[o][keys[i]] === \"\" || data[o][keys[i]] === null ? data[o][keys[i]] : parseFloat(data[o][keys[i]], 10);\n                if (key.notNumber) {\n                    nKeys[i].notNumber = isNaN(row[key.value]) || typeof(row[key.value]) === \"boolean\" || row[key.value] === \"\";\n                }\n            }\n        }\n\n        let valueKeys = [];\n        for (let key of nKeys) {\n            if (!key.notNumber) {\n                valueKeys.push(key.value);\n            }\n        }\n        let options = this.state.options;\n        options.x = keys[0];\n        options.y = [{ key: valueKeys[0], color: \"#1FC8DB\" }];\n        options.rings = [{ name: keys[0], value: valueKeys[0], color: \"#1FC8DB\" }];\n        this.setState({ data: data, keys: keys, valueKeys: valueKeys, options: options });\n    }\n\n    optionsChanged(options) {\n        // console.log(\"optionshanged\");\n        // console.log(options);\n        this.setState({ options: options });\n        this.state.base.setState(\"options\", options);\n        this.updateChart();\n    }\n\n    editButtonClicked() {\n        // console.log(\"editButton\");\n        // console.log(this.state);\n        this.setState({ editing: true });\n    }\n\n    updateChart() {\n        this.setState({ key: Math.random() });\n    }\n\n    render() {\n\n        this.modifyState();\n        return (\n            <Grid>\n                <Row>\n                    <Col lg={this.state.editing ? 12 : 5} xs={12}>\n                        <h4> {i18n.t(\"GraficaD3.header.origin\")} </h4>\n                        {!this.state.editing &&\n                        <Button onClick={this.editButtonClicked} style={{ marginTop: '0px' }}\n                            className=\"btn-primary\">{i18n.t(\"GraficaD3.edit\")}</Button>\n                        }\n                        {this.state.editing &&\n                        <DataProvider data={this.state.data} dataChanged={this.dataChanged} keys={this.state.keys}\n                            valueKeys={this.state.valueKeys}/>\n                        }\n                        {!this.state.editing &&\n                        <ChartOptions options={this.state.options} optionsChanged={this.optionsChanged}\n                            keys={this.state.keys} valueKeys={this.state.valueKeys}/>\n                        }\n                    </Col>\n                    <div className=\"col-xs-12 col-lg-7\" ref=\"chartContainer\" style={{ padding: '0px' }}>\n                        {!this.state.editing &&\n                        <div style={{ height: '300px', width: '95%' }}>\n                            <h4>Previsualización</h4>\n                            <Chart data={this.state.data} options={this.state.options} width={this.state.chartWidth}\n                                key={this.state.key}/>\n                        </div>\n                        }\n                    </div>\n                </Row>\n            </Grid>\n        );\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/components/config-component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 784,
    "kind": "class",
    "name": "Config",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/GraficaD3/components/config-component.js",
    "importStyle": "Config",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 785,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 792,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#state",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "componentDidUpdate",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#componentDidUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "nextProps",
        "types": [
          "*"
        ]
      },
      {
        "name": "nextState",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "modifyState",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#modifyState",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "dataChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#dataChanged",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "values",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "setOptions",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#setOptions",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "keys",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "optionsChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#optionsChanged",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "editButtonClicked",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#editButtonClicked",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "updateChart",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#updateChart",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 801,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/config-component.js~Config#render",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 802,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js",
    "content": "import React from \"react\";\nimport { Form, Button, FormGroup, FormControl, ControlLabel, Col } from \"react-bootstrap\";\nimport FileInput from '../../../_editor/components/common/file-input/FileInput';\nimport Alert from '../../../_editor/components/common/alert/Alert';\nimport i18n from 'i18next';\n\nexport default class DataProvider extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let rows = this.props.data.length;\n        let cols = this.props.data.length === 0 ? 2 : Object.keys(this.props.data[0]).length;\n        this.confirmButton = this.confirmButton.bind(this);\n        this.colLeft = this.colLeft.bind(this);\n        this.colLeft = this.colLeft.bind(this);\n        this.colRight = this.colRight.bind(this);\n        this.deleteCols = this.deleteCols.bind(this);\n        this.colsChanged = this.colsChanged.bind(this);\n        this.deleteRows = this.deleteRows.bind(this);\n        this.rowsChanged = this.rowsChanged.bind(this);\n        this.keyChanged = this.keyChanged.bind(this);\n        this.validateJson = this.validateJson.bind(this);\n        this.fileChanged = this.fileChanged.bind(this);\n        this.dataChanged = this.dataChanged.bind(this);\n\n        this.state = {\n            cols: cols,\n            rows: rows,\n            data: this.props.data,\n            keys: this.props.keys,\n            valueKeys: this.props.valueKeys,\n            error: false,\n        };\n    }\n    confirmButton() {\n        let empty = false;\n        outerloop:\n        for (let i = 0; i < this.state.data.length; i++) {\n            for (let o = 0; o < this.state.data.length; o++) {\n                if(this.state.data[i][o] === \"\") {\n                    let alertComp = (<Alert className=\"pageModal\" show hasHeader closeButton onClose={()=>{this.setState({ alert: null });}}>\n                        <span> {i18n.t(\"GraficaD3.alert_msg\")} </span>\n                    </Alert>);\n                    this.setState({ alert: alertComp });\n                    empty = true;\n                    break outerloop;\n                }\n            }\n        }\n        if (typeof this.props.dataChanged === 'function' && !empty) {\n            this.props.dataChanged({ data: this.state.data, keys: this.state.keys, valueKeys: this.state.valueKeys });\n        }\n    }\n    deleteCols(col) {\n        let pre = this.state.cols - 1;\n        let keys = this.state.keys;\n        let data = this.state.data;\n\n        for (let i = 0; i < data.length; i++) {\n            delete data[i][keys[col]];\n        }\n        keys.splice(col, 1);\n\n        this.setState({ cols: pre, data: data, keys: keys });\n    }\n    colLeft(col) {\n        let pre = this.state.cols;\n        let keys = this.state.keys;\n        let left = keys[col - 1];\n        let current = keys[col];\n        keys[col - 1] = current;\n        keys[col] = left;\n        // console.log(keys);\n\n        this.setState({ keys: keys });\n    }\n    colRight(col) {\n        let pre = this.state.cols;\n        let keys = this.state.keys;\n        let right = keys[col + 1];\n        let current = keys[col];\n        keys[col + 1] = current;\n        keys[col] = right;\n        // console.log(keys);\n\n        this.setState({ keys: keys });\n    }\n    colsChanged(event) {\n        let pre = this.state.cols;\n        let value = parseInt(event.target.value, 10);\n        let keys = this.state.keys;\n        let data = this.state.data;\n\n        if (value > pre) {\n            for (let o = pre; o < value; o++) {\n                keys.push(o);\n            }\n            for (let i = 0; i < data.length; i++) {\n                for (let o = pre; o < value; o++) {\n                    data[i][o] = \"\";\n                }\n            }\n\n        } else if (value < pre) {\n\n            for (let i = 0; i < data.length; i++) {\n                for (let o = value; o < pre; o++) {\n                    delete data[i][keys[o]];\n                }\n            }\n            keys = keys.slice(0, value);\n        }\n        this.setState({ cols: parseInt(value, 10), data: data, keys: keys });\n    }\n    deleteRows(row) {\n        let pre = this.state.rows - 1;\n        let data = this.state.data;\n        data.splice(row, 1);\n\n        this.setState({ rows: pre, data: data });\n    }\n    rowsChanged(event) {\n        let pre = this.state.rows;\n        let value = parseInt(event.target.value, 10);\n\n        let keys = this.state.keys;\n        let data = this.state.data;\n\n        if (value > pre) {\n            let row = {};\n            for (let i = 0; i < keys.length; i++) {\n                row[keys[i]] = \"\";\n            }\n            for (let i = pre; i < value; i++) {\n                data.push(row);\n            }\n        } else if (value < pre) {\n            data = data.slice(0, value);\n        }\n        this.setState({ rows: parseInt(value, 10), data: data });\n    }\n    keyChanged(event) {\n        let keys = this.state.keys;\n        let pre = keys[event.target.name];\n        let data = this.state.data;\n        keys[event.target.name] = event.target.value;\n        for (let i = 0; i < data.length; i++) {\n            let val = data[i][pre];\n            data[i][event.target.value] = val;\n            delete data[i][pre];\n        }\n        this.setState({ keys: keys, data: data });\n\n    }\n    csvToJSON(csv) {\n\n        let lines = csv.split(\"\\n\");\n\n        let result = [];\n\n        let headers = lines[0].split(\",\");\n\n        for(let i = 1; i < lines.length; i++) {\n\n            let obj = {};\n            let currentline = lines[i].split(\",\");\n\n            for (let j = 0; j < headers.length; j++) {\n                obj[headers[j]] = currentline[j];\n            }\n            result.push(obj);\n        }\n\n        return result;\n    }\n    validateJson(json) {\n\n        let data = {};\n        if(json.length === 0) {\n            this.setState({ error: true });\n            return false;\n        }\n        let cols = Object.keys(json[0]);\n        if(cols.length === 0) {\n            this.setState({ error: true, file: false });\n            return false;\n        }\n        for(let row of json) {\n\n            if(!this.compareKeys(cols, Object.keys(row))) {\n                this.setState({ error: true, file: false });\n                return false;\n            }\n            cols = Object.keys(row);\n        }\n        this.setState({ cols: cols.length, rows: json.length, data: json, keys: cols, x: cols[0] });\n\n        this.setState({ error: false });\n        return true;\n    }\n    compareKeys(a, b) {\n        a = a.sort().toString();\n        b = b.sort().toString();\n        return a === b;\n    }\n    fileChanged(event) {\n        let files = event.target.files;\n        let file = files[0];\n\n        let reader = new FileReader();\n        reader.onload = () => {\n            let data = reader.result;\n            if(file.name.split('.').pop() === \"csv\") {\n                data = this.csvToJSON(data);\n            } else if(file.name.split('.').pop() === \"json\") {\n                data = JSON.parse(data);\n            }\n            this.setState({ name: file.name });\n            this.validateJson(data);\n        };\n        reader.readAsText(file);\n    }\n    dataChanged(event) {\n\n        let pos = event.target.name.split(\" \");\n        let row = pos[0];\n        let col = pos[1];\n        let data = this.state.data;\n        let newvalue = isNaN(event.target.value) || (isNaN(parseFloat(event.target.value))) || event.target.value === \"\" || event.target.value === null ? event.target.value : parseFloat(event.target.value);\n        let newRow = {};\n        newRow[col] = newvalue;\n        data[row] = Object.assign({}, data[row], newRow);\n        this.setState({ data: data });\n    }\n    render() {\n        return (\n            /* jshint ignore:start */\n            <div>\n                { this.state.alert }\n                <Form horizontal style={{ padding: \"16px\" }}>\n                    <FormGroup>\n                        <FileInput onChange={this.fileChanged} className=\"fileInput\">\n                            {/* <Button className=\"btn btn-primary\" style={{ marginTop: '0px' }}>{ Dali.i18n.t('FileDialog') }</Button>*/}\n                            {/* <span style={{ marginLeft: '10px' }}>*/}\n                            {/* <label className=\"control-label\">{ Dali.i18n.t('FileDialog') + ':   ' } </label> { this.state.name || '' }</span>*/}\n                            <div className=\"fileDrag\">\n                                <span style={{ display: this.state.name ? 'none' : 'block' }}><i className=\"material-icons\">ic_file_upload</i><b>{ i18n.t('FileInput.Drag') }</b>{ i18n.t('FileInput.Drag_2') }<b>{ i18n.t('FileInput.Click') }</b>{ i18n.t('FileInput.Click_2') }</span>\n                                <span className=\"fileUploaded\" style={{ display: this.state.name ? 'block' : 'none' }}><i className=\"material-icons\">insert_drive_file</i>{ this.state.name || '' }</span>\n                            </div>\n                        </FileInput>\n                    </FormGroup>\n                    <FormGroup>\n                        <Col componentClass={ControlLabel} xs={4}>\n                            <FormControl.Static>\n                                {i18n.t(\"GraficaD3.fill_in\")}\n                            </FormControl.Static>\n                        </Col>\n                    </FormGroup>\n                    <FormGroup>\n                        <Col componentClass={ControlLabel} xs={2}>\n                            {i18n.t(\"GraficaD3.data_cols\")}\n                        </Col>\n                        <Col xs={3}>\n                            <FormControl type=\"number\" name=\"cols\" value={this.state.cols} onChange={this.colsChanged}/>\n                        </Col>\n\n                        <Col componentClass={ControlLabel} xs={1}>\n                            {i18n.t(\"GraficaD3.data_rows\")}\n                        </Col>\n                        <Col xs={3}>\n                            <FormControl type=\"number\" name=\"rows\" value={this.state.rows} onChange={this.rowsChanged}/>\n                        </Col>\n                        <Col xs={3}>\n                            <Button className=\"btn btn-primary\" onClick={this.confirmButton} style={{ marginTop: '0px' }}>{i18n.t(\"GraficaD3.confirm\")}</Button>\n                        </Col>\n                    </FormGroup>\n                    <div style={{ marginTop: '10px', overflowX: 'auto' }}>\n                        <div style={{ display: 'table', tableLayout: 'fixed', width: '100%' }}>\n                            {Array.apply(0, Array(this.state.cols)).map((x, i) => {\n                                return(\n                                    <FormControl.Static key={i + 1} style={{ display: 'table-cell', padding: '8px', textAlign: 'center' }} />\n                                );\n                            })}\n                        </div>\n                        <table className=\"table bordered hover\" >\n                            <thead>\n                                <tr>\n                                    {Array.apply(0, Array(this.state.cols)).map((x, i) => {\n                                        return(\n                                            <th key={i + 1}>\n                                                {/* i !== 0 ? <i className=\"material-icons clearCol\" onClick={(e)=>{this.colLeft(i);}}>chevron_left</i> : null */}\n                                                <i className=\"material-icons clearCol\" onClick={(e)=>{this.deleteCols(i);}}>clear</i>\n                                                {/* i !== (this.state.keys.length - 1) ? <i className=\"material-icons clearCol\" onClick={(e)=>{this.colRight(i);}}>chevron_right</i> : null*/ }\n                                                <FormControl type=\"text\" name={i} value={this.state.keys[i]} style={{ margin: '0px' }} onChange={this.keyChanged}/>\n                                            </th>\n                                        );\n                                    })}\n                                </tr>\n                            </thead>\n                            <tbody style={{ backgroundColor: '#f2f2f2' }}>\n\n                                {Array.apply(0, Array(this.state.rows)).map((x, i) => {\n\n                                    return(\n                                        <tr key={i + 1}>\n\n                                            {Array.apply(0, Array(this.state.cols)).map((q, o) => {\n                                                return(\n                                                    <td key={o + 1}>\n                                                        {o === 0 ? (<i className=\"material-icons clearRow\" onClick={()=>{this.deleteRows(i);}}>clear</i>) : null}\n\n                                                        <FormControl type=\"text\" name={i + \" \" + this.state.keys[o]} value={this.state.data[i][this.state.keys[o]]} onChange={this.dataChanged}/>\n\n                                                    </td>\n                                                );\n                                            })}\n                                        </tr>\n                                    );\n                                })}\n                            </tbody>\n                        </table>\n                    </div>\n                </Form>\n            </div>\n            /* jshint ignore:end */\n        );\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/components/data-provider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 803,
    "kind": "class",
    "name": "DataProvider",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/GraficaD3/components/data-provider.js",
    "importStyle": "DataProvider",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 804,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 817,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#state",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "{\"cols\": *, \"rows\": *, \"data\": *, \"keys\": *, \"valueKeys\": *, \"error\": *}"
      ]
    }
  },
  {
    "__docId__": 818,
    "kind": "method",
    "name": "confirmButton",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#confirmButton",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "deleteCols",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#deleteCols",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "col",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "colLeft",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#colLeft",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "col",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 821,
    "kind": "method",
    "name": "colRight",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#colRight",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [
      {
        "name": "col",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "colsChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#colsChanged",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "deleteRows",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#deleteRows",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "row",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 824,
    "kind": "method",
    "name": "rowsChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#rowsChanged",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 825,
    "kind": "method",
    "name": "keyChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#keyChanged",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "csvToJSON",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#csvToJSON",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "params": [
      {
        "name": "csv",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "validateJson",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#validateJson",
    "access": "public",
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "params": [
      {
        "name": "json",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "compareKeys",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#compareKeys",
    "access": "public",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "params": [
      {
        "name": "a",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "fileChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#fileChanged",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "dataChanged",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#dataChanged",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/GraficaD3/components/data-provider.js~DataProvider#render",
    "access": "public",
    "description": null,
    "lineNumber": 235,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 832,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/locales/en.js",
    "content": "module.exports = {\n    \"GraficaD3\": {\n        \"PluginName\": \"Chart\",\n        \"style\": \"Style\",\n        \"margin\": \"Margin\",\n        \"left\": \"Left\",\n        \"right\": \"Right\",\n        \"top\": \"Top\",\n        \"bottom\": \"Bottom\",\n        \"padding\": \"Padding\",\n        \"border_width\": \"Border Width\",\n        \"border_style\": \"Border Style\",\n        \"border_color\": \"Border Color\",\n        \"border_radius\": \"Border Radius\",\n        \"opacity\": \"Opacity\",\n        \"name\": \"Name\",\n        \"axis\": \"Axis\",\n        \"axes_v\": \"Vertical axis\",\n        \"axes_h\": \"Horizontal axis\",\n        \"ring\": \"Ring\",\n        \"rings\": \"Rings\",\n        \"title\": \"Title\",\n        \"edit\": \"Edit\",\n        \"color\": \"Color\",\n        \"grid\": \"Grid\",\n        \"see_grid\": \"See grid\",\n        \"x_grid\": \"X axis grid\",\n        \"y_grid\": \"Y axis grid\",\n        \"line_color\": \"Line color\",\n        \"file\": \"Choose File\",\n        \"or\": \"Or\",\n        \"x_axis\": \"X Axis\",\n        \"y_axis\": \"Y Axis\",\n        \"chart_type\": \"Chart Type\",\n        \"order_by\": \"Order By\",\n        \"data_rows\": \"Rows\",\n        \"data_cols\": \"Columns\",\n        \"key\": \"Key\",\n        \"value\": \"Value\",\n        \"vertical\": \"Vertical\",\n        \"horizontal\": \"Horizontal\",\n        \"alert_msg\": \"Fill in all the fields in the table\",\n        \"confirm\": \"Confirm\",\n        \"fill_in\": \"Or fill in a table\",\n        \"show\": \"Show\",\n        \"types\": {\n            \"line\": \"Line\",\n            \"area\": \"Area\",\n            \"bar\": \"Bar\",\n            \"pie\": \"Pie\",\n        },\n        \"header\": {\n            \"options\": \"Chart options\",\n            \"origin\": \"Data origin\",\n            \"preview\": \"Preview\",\n        },\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 833,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/GraficaD3/locales/es.js",
    "content": "module.exports = {\n    \"GraficaD3\": {\n        \"PluginName\": \"Gráfica\",\n        \"style\": \"Estilo\",\n        \"margin\": \"Margin\",\n        \"left\": \"Izquierda\",\n        \"right\": \"Derecha\",\n        \"top\": \"Superior\",\n        \"bottom\": \"Inferior\",\n        \"padding\": \"Padding\",\n        \"border_width\": \"Ancho de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"border_color\": \"Color de borde\",\n        \"border_radius\": \"Radio de borde\",\n        \"opacity\": \"Opacidad\",\n        \"name\": \"Nombre\",\n        \"axis\": \"Eje\",\n        \"axes_v\": \"Ejes verticales\",\n        \"axes_h\": \"Eje horizontal\",\n        \"ring\": \"Anillo\",\n        \"rings\": \"Anillos\",\n        \"title\": \"Título\",\n        \"grid\": \"Rejilla\",\n        \"see_grid\": \"Ver rejilla\",\n        \"edit\": \"Editar\",\n        \"color\": \"Color\",\n        \"x_grid\": \"Rejilla eje x\",\n        \"y_grid\": \"Rejilla eje y\",\n        \"line_color\": \"Color de línea\",\n        \"file\": \"Elegir Archivo\",\n        \"or\": \"O rellenar la tabla\",\n        \"x_axis\": \"Eje X\",\n        \"y_axis\": \"Eje Y\",\n        \"chart_type\": \"Tipo de Grafico\",\n        \"order_by\": \"Ordenar Por\",\n        \"data_rows\": \"Filas\",\n        \"data_cols\": \"Columnas\",\n        \"key\": \"Clave\",\n        \"value\": \"Valor\",\n        \"vertical\": \"Vertical\",\n        \"horizontal\": \"Horizontal\",\n        \"alert_msg\": \"Rellena todos los campos de la tabla\",\n        \"confirm\": \"Confirmar\",\n        \"fill_in\": \"O rellena una tabla\",\n        \"show\": \"Mostrar\",\n        \"types\": {\n            \"line\": \"Línea\",\n            \"area\": \"Área\",\n            \"bar\": \"Barras\",\n            \"pie\": \"Tarta\",\n        },\n        \"header\": {\n            \"options\": \"Opciones de la gráfica\",\n            \"origin\": \"Orígen de los datos\",\n            \"preview\": \"Previsualización\",\n        },\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/GraficaD3/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 834,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/HotspotImages/HotspotImages.js",
    "content": "import React from \"react\";\nimport i18n from 'i18next';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport ClickNHold from '../../_editor/components/rich_plugins/click_n_hold/ClickNHold';\n\nexport function HotspotImages(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'HotspotImages',\n                displayName: Dali.i18n.t('HotspotImages.PluginName'),\n                category: 'image',\n                needsConfigModal: false,\n                flavor: \"react\",\n                needsTextEdition: false,\n                icon: 'image',\n                // initialWidth: '25%',\n                isRich: true,\n                marksType: [{ name: i18n.t(\"HotspotImages.pos\"), key: 'value', format: '[x,y]', default: '0,0', defaultColor: '#222222' }],\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        basic: {\n                            __name: Dali.i18n.t('HotspotImages.source'),\n                            icon: 'link',\n                            buttons: {\n                                url: {\n                                    __name: 'URL',\n                                    type: 'vish_provider',\n                                    value: base.getState().url,\n                                    autoManaged: false,\n                                },\n                            },\n                        },\n                        style: {\n                            __name: Dali.i18n.t('HotspotImages.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: Dali.i18n.t('HotspotImages.padding'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                backgroundColor: {\n                                    __name: Dali.i18n.t('HotspotImages.background_color'),\n                                    type: 'color',\n                                    value: '#ffffff',\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('HotspotImages.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('HotspotImages.border_style'),\n                                    type: 'radio',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('HotspotImages.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('HotspotImages.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('HotspotImages.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.01,\n                                },\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getRichMarkInput: function(state, MarkInput) {\n            /* jshint ignore:start */\n            let div = <div><span>x,y</span><input onChange={(event)=>{MarkInput(event.target.value);}} /></div>;\n            return div;\n            /* jshint ignore:end */\n        },\n        getInitialState: function() {\n            return {\n                // url: 'http://nemanjakovacevic.net/wp-content/uploads/2013/07/placeholder.png'\n                // url:'http://www.amicus.nieruchomosci.pl/grafika/no-image.png'\n                // url: 'https://bytesizemoments.com/wp-content/uploads/2014/04/placeholder.png'\n                url: '/images/placeholder.png',\n\n            };\n        },\n        getRenderTemplate: function(state) {\n            let marks = state.__marks;\n            let Mark = ({ idKey, title, style, color }) => (\n                <ClickNHold style={style} time={1.5} mark={idKey} base={base}>\n                    <OverlayTrigger key={idKey} text={title} placement=\"top\" overlay={<Tooltip id={idKey}>{title}</Tooltip>}>\n                        <a className=\"mapMarker\" href=\"#\">\n                            <i key=\"i\" style={{ color: color }} className=\"material-icons\">room</i>\n                        </a>\n                    </OverlayTrigger>\n                </ClickNHold>);\n\n            let markElements = Object.keys(marks).map((id) =>{\n                let value = marks[id].value;\n                let title = marks[id].title;\n                let color = marks[id].color;\n\n                let position;\n                if (value && value.split(',').length === 2) {\n                    position = value.split(',');\n                } else{\n                    position = [0, 0];\n                }\n\n                return (<Mark key={id} style={{ position: 'absolute', top: position[0] + \"%\", left: position[1] + \"%\" }} color={color} idKey={id} title={title} />);\n\n                // return(<a key={id} style={{ position: 'absolute', top: position[0] + \"%\", left: position[1] + \"%\" }} href=\"#\"><i style={{ width: \"100%\", height: \"100%\", top: '-26px', position: 'absolute', left: '-12px' }} className=\"material-icons\">room</i></a>);\n            });\n\n            return (\n                <div className=\"dropableRichZone\">\n                    <img className=\"basicImageClass\" style={{ height: \"100%\", width: \"100%\" }} src={state.url}/>\n                    {markElements}\n                </div>\n            );\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n        parseRichMarkInput: function(...value) {\n            let x = (value[0] + 12) * 100 / value[2];\n            let y = (value [1] + 26) * 100 / value[3];\n            let finalValue = y.toFixed(2) + \",\" + x.toFixed(2);\n\n            return finalValue;\n        },\n        validateValueInput: function(value) {\n            let regex = /(^-*\\d+(?:\\.\\d*)?),(-*\\d+(?:\\.\\d*)?$)/g;\n            let match = regex.exec(value);\n            if(match && match.length === 3) {\n                let x = Math.round(parseFloat(match[1]) * 100) / 100;\n                let y = Math.round(parseFloat(match[2]) * 100) / 100;\n                if (isNaN(x) || isNaN(y)/* || x > 100 || y > 100 || x < -100 || y < -100*/) {\n                    return { isWrong: true, message: i18n.t(\"HotspotImages.message_mark_xy\") };\n                }\n                value = x + ',' + y;\n            } else {\n                return { isWrong: true, message: i18n.t(\"HotspotImages.message_mark_xy\") };\n            }\n            return { isWrong: false, value: value };\n        },\n\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/HotspotImages/HotspotImages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 835,
    "kind": "function",
    "name": "HotspotImages",
    "memberof": "DALI_EDITOR/plugins/HotspotImages/HotspotImages.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/HotspotImages/HotspotImages.js~HotspotImages",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/HotspotImages/HotspotImages.js",
    "importStyle": "{HotspotImages}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getRichMarkInput\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *, \"parseRichMarkInput\": *, \"validateValueInput\": *}"
      ]
    }
  },
  {
    "__docId__": 836,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/HotspotImages/locales/en.js",
    "content": "module.exports = {\r\n    \"HotspotImages\": {\r\n        \"background_color\": \"Background color\",\r\n        \"border_color\": \"Border color\",\r\n        \"border_size\": \"Border Size\",\r\n        \"border_style\": \"Border Style\",\r\n        \"box_style\": \"Box style\",\r\n        \"opacity\": \"Opacity\",\r\n        \"padding\": \"Padding\",\r\n        \"pos\": \"Position\",\r\n        \"PluginName\": \"Hotspot Images\",\r\n        \"radius\": \"Radius\",\r\n        \"source\": \"Source\",\r\n        \"message_mark_xy\": \"You've chosen an incorrect value. You must introduce two numbers separated by a comma. E.g. 4.56,90.76\",\r\n\r\n    },\r\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/HotspotImages/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 837,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/HotspotImages/locales/es.js",
    "content": "module.exports = {\r\n    \"HotspotImages\": {\r\n        \"background_color\": \"Color de fondo\",\r\n        \"PluginName\": \"Imagen enriquecida\",\r\n        \"border_color\": \"Color de borde\",\r\n        \"border_size\": \"Grosor de borde\",\r\n        \"border_style\": \"Estilo de borde\",\r\n        \"box_style\": \"Estilo caja\",\r\n        \"opacity\": \"Opacidad\",\r\n        \"padding\": \"Padding\",\r\n        \"pos\": \"Posición\",\r\n        \"radius\": \"Radio\",\r\n        \"source\": \"Fuente\",\r\n        \"message_mark_xy\": \"Ha introducido un valor incorrecto. Debe introducir dos números separados por coma. Ej. 4.56,90.76\",\r\n\r\n    },\r\n};\r\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/HotspotImages/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 838,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/HotspotImages/visor/HotspotImages.js",
    "content": "import React from \"react\";\r\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\r\n\r\nexport function HotspotImages(base) {\r\n    return {\r\n        getRenderTemplate: function(state, id) {\r\n            let marks = state.__marks;\r\n            let box_id = id;\r\n\r\n            let markElements = Object.keys(marks).map((e) =>{\r\n\r\n                let position = marks[e].value.split(',');\r\n                let title = marks[e].title;\r\n                let color = marks[e].color;\r\n\r\n                return(\r\n                    <a key={e} style={{ position: 'absolute', top: position[0] + \"%\", left: position[1] + \"%\", width: '24px', height: '26px' }} onClick={()=>{this.onMarkClicked(box_id, marks[e].value);}} href=\"#\">\r\n                        <OverlayTrigger placement=\"top\" overlay={<Tooltip positionLeft=\"-12\" id={e}>{title}</Tooltip>}>\r\n                            <i key=\"i\" style={{ width: \"100%\", height: \"100%\", position: 'absolute', top: '-26px', left: '-12px', color: color }} className=\"material-icons\">room</i>\r\n                        </OverlayTrigger>\r\n                    </a>\r\n                );\r\n            });\r\n\r\n            return(\r\n                <div>\r\n                    <img style={{ height: \"100%\", width: \"100%\" }} src={state.url}/>\r\n                    {markElements}\r\n                </div>);\r\n        },\r\n        onMarkClicked(element, value) {\r\n            base.triggerMark(element, value, false);\r\n        },\r\n    };\r\n}\r\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/HotspotImages/visor/HotspotImages.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 839,
    "kind": "function",
    "name": "HotspotImages",
    "memberof": "DALI_EDITOR/plugins/HotspotImages/visor/HotspotImages.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/HotspotImages/visor/HotspotImages.js~HotspotImages",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/HotspotImages/visor/HotspotImages.js",
    "importStyle": "{HotspotImages}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getRenderTemplate\": *, \"onMarkClicked\": function}"
      ]
    }
  },
  {
    "__docId__": 840,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/RichText/RichText.js",
    "content": "export function RichText(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'RichText',\n                displayName: Dali.i18n.t('RichText.PluginName'),\n                category: 'text',\n                needsConfigModal: false,\n                needsTextEdition: true,\n                initialWidth: 'auto',\n                initialHeight: 'auto',\n                extraTextConfig: {\n                    extraPlugins: \"daliplugin\",\n                },\n                icon: 'format_indent_increase',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        style: {\n                            __name: Dali.i18n.t('RichText.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: 'Padding',\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('RichText.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('RichText.border_style'),\n                                    type: 'select',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('RichText.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('RichText.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('RichText.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.01,\n                                },\n                            },\n                        },\n                    },\n                },\n            };\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/RichText/RichText.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 841,
    "kind": "function",
    "name": "RichText",
    "memberof": "DALI_EDITOR/plugins/RichText/RichText.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/RichText/RichText.js~RichText",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/RichText/RichText.js",
    "importStyle": "{RichText}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 842,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/RichText/locales/en.js",
    "content": "module.exports = {\n    \"RichText\": {\n        \"background_color\": \"Background color\",\n        \"border_color\": \"Border color\",\n        \"border_size\": \"Border Size\",\n        \"border_style\": \"Border Style\",\n        \"box_style\": \"Box style\",\n        \"opacity\": \"Opacity\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Rich Text\",\n        \"radius\": \"Radius\",\n        \"source\": \"Source\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/RichText/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 843,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/RichText/locales/es.js",
    "content": "module.exports = {\n    \"RichText\": {\n        \"background_color\": \"Color de fondo\",\n        \"border_color\": \"Color de borde\",\n        \"border_size\": \"Grosor de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"box_style\": \"Estilo caja\",\n        \"opacity\": \"Opacidad\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Texto Enriquecido\",\n        \"radius\": \"Radio\",\n        \"source\": \"Origen\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/RichText/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 844,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/VirtualTour/VirtualTour.js",
    "content": "import React from \"react\";\nimport i18n from 'i18next';\nimport Map from './components/Map';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport ClickNHold from '../../_editor/components/rich_plugins/click_n_hold/ClickNHold';\nrequire('./_virtualTour.scss');\nwindow.mapList = [];\nexport function VirtualTour(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'VirtualTour',\n                displayName: Dali.i18n.t('VirtualTour.PluginName'),\n                category: 'multimedia',\n                needsConfigModal: false,\n                flavor: \"react\",\n                needsTextEdition: false,\n                icon: 'map',\n                initialWidth: '25%',\n                initialHeight: '250px',\n                initialHeightSlide: '60%',\n                isRich: true,\n                marksType: [{\n                    name: i18n.t('VirtualTour.Coords'),\n                    key: 'value',\n                    format: '[Lat,Lng]',\n                    default: '40.452,-3.727',\n                    defaultColor: '#222222',\n                }],\n                needsPointerEventsAllowed: true,\n                limitToOneInstance: true,\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        style: {\n                            __name: Dali.i18n.t('VirtualTour.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: Dali.i18n.t('VirtualTour.padding'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                backgroundColor: {\n                                    __name: Dali.i18n.t('VirtualTour.background_color'),\n                                    type: 'color',\n                                    value: '#ffffff',\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('VirtualTour.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('VirtualTour.border_style'),\n                                    type: 'radio',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('VirtualTour.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('VirtualTour.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('VirtualTour.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.01,\n                                },\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getRichMarkInput: function(state, MarkInput) {\n            let div = <div><span>x,y</span><input onChange={(event) => {\n                MarkInput(event.target.value);\n            }} /></div>;\n            return div;\n        },\n        getInitialState: function() {\n            return {\n                config: {\n                    lat: 40.452,\n                    lng: -3.727,\n                    zoom: 11,\n                },\n                num: window.mapList.length,\n            };\n        },\n        getRenderTemplate: function(state) {\n\n            let id = \"map-\" + Date.now();\n            let marks = state.__marks;\n\n            if (!google) {\n                return (<div className=\"dropableRichZone noInternetConnectionBox\" style={{ width: '100%', height: '100%' }}>\n                    <div className=\"middleAlign\">\n                        <i className=\"material-icons dark\">signal_wifi_off</i><br/>\n                        {i18n.t('messages.no_internet')}\n                    </div>\n                </div>);\n            }\n\n            let Mark = ({ idKey, title, color }) => (\n                <ClickNHold time={1.5} mark={idKey} base={base}>\n                    <OverlayTrigger key={idKey} text={title} placement=\"top\" overlay={<Tooltip id={idKey}>{title}</Tooltip>}>\n                        <a className=\"mapMarker\" href=\"#\">\n                            <i style={{ color: color }} key=\"i\" className=\"material-icons\">room</i>\n                        </a>\n                    </OverlayTrigger>\n                </ClickNHold>);\n\n            let markElements = Object.keys(marks).map((idKey) => {\n                let value = marks[idKey].value;\n                let title = marks[idKey].title;\n                let color = marks[idKey].color;\n                let position;\n                if (value && value.split(',').length === 2) {\n                    position = value.split(',');\n                } else {\n                    position = [0, 0];\n                }\n                return (<Mark key={idKey} idKey={idKey} title={title} color={color} lat={position[0]} lng={position[1]}/>);\n\n            });\n\n            window.num = state.num;\n            let num = state.num;\n            return (\n                <div className=\"virtualMap\" onDragLeave={e=>{e.stopPropagation();}}>\n                    <Map placeholder={i18n.t(\"VirtualTour.Search\")}\n                        state={state}\n                        id={id}\n                        searchBox\n                        update={(lat, lng, zoom, render)=>{\n                            base.setState('config', { lat: lat, lng: lng, zoom: zoom });\n                        }}>\n                        {markElements}\n                    </Map>\n                </div>);\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n        parseRichMarkInput: function(...value) {\n            if (!google) {\n                return '0,0';\n            }\n            let state = value[5];\n            let clickX = value[0] + 12;\n            let clickY = value[1] + 26;\n            let latCenter = state.config.lat;\n            let lngCenter = state.config.lng;\n            let zoom = state.config.zoom;\n            let num = state.num;\n\n            let maps = google.maps;\n            let map = window.mapList[state.num];\n            let topRight = map.getProjection().fromLatLngToPoint(map.getBounds().getNorthEast());\n            let bottomLeft = map.getProjection().fromLatLngToPoint(map.getBounds().getSouthWest());\n            let scale = Math.pow(2, map.getZoom());\n\n            let worldPoint = new maps.Point((clickX) / scale + bottomLeft.x, (clickY) / scale + topRight.y);\n            let latLng = map.getProjection().fromPointToLatLng(worldPoint);\n            let lat = Math.round(latLng.lat() * 100000) / 100000;\n            let lng = Math.round(latLng.lng() * 100000) / 100000;\n\n            return lat + ',' + lng;\n\n        },\n\n        validateValueInput: function(value) {\n            let regex = /(^-*\\d+(?:\\.\\d*)?),(-*\\d+(?:\\.\\d*)?$)/g;\n            let match = regex.exec(value);\n            if (match && match.length === 3) {\n                let x = Math.round(parseFloat(match[1]) * 100000) / 100000;\n                let y = Math.round(parseFloat(match[2]) * 100000) / 100000;\n                if (isNaN(x) || isNaN(y)) {\n                    return { isWrong: true, message: i18n.t(\"VirtualTour.message_mark_xy\") };\n                }\n                value = x + ',' + y;\n            } else {\n                return { isWrong: true, message: i18n.t(\"VirtualTour.message_mark_xy\") };\n            }\n            return { isWrong: false, value: value };\n        },\n        pointerEventsCallback: function(bool, toolbarState) {\n            if (!google) {return;}\n            if (window.mapList[toolbarState.num || (toolbarState.state ? toolbarState.state.num : 9999)]) {\n                switch(bool) {\n                case 'mouseenter':\n                    window.mapList[toolbarState.num].setOptions({ draggable: false });\n                    return;\n                case 'mouseleave_true':\n                    window.mapList[toolbarState.num].setOptions({ draggable: true, mapTypeControl: true, zoomControl: true });\n                    return;\n                case 'mouseleave_false':\n                    window.mapList[toolbarState.num].setOptions({ draggable: false });\n                    return;\n                case 'disableAll':\n                    window.mapList[toolbarState.state.num].setOptions({ draggable: false, mapTypeControl: false, zoomControl: false });\n                    return;\n                case 'enableAll':\n                    window.mapList[toolbarState.state.num].setOptions({ draggable: true, mapTypeControl: true, zoomControl: true });\n                    return;\n                }\n            }\n        },\n\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/VirtualTour/VirtualTour.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 845,
    "kind": "function",
    "name": "VirtualTour",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/VirtualTour.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/VirtualTour/VirtualTour.js~VirtualTour",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/VirtualTour/VirtualTour.js",
    "importStyle": "{VirtualTour}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getRichMarkInput\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *, \"parseRichMarkInput\": *, \"validateValueInput\": *, \"pointerEventsCallback\": *}"
      ]
    }
  },
  {
    "__docId__": 846,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/VirtualTour/components/Map.js",
    "content": "\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport GoogleMapReact from 'google-map-react';\nimport SearchBox from './SearchBox';\nimport { Gmaps } from 'react-gmaps';\nimport { findParentBySelector } from '../../../common/utils';\n\nexport default class Map extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            draggable: true,\n            controls: false,\n            disableDoubleClickZoom: true,\n        };\n        // this.onMapCreated = this.onMapCreated.bind(this);\n    }\n\n    render() {\n        let { config, num } = this.props.state;\n        let { lat, lng, zoom } = config;\n        let center = { lat: lat, lng: lng };\n        return(\n            <div id={this.props.id} className=\"dropableRichZone\" style={{ width: '100%', height: '100%' }}>\n                <GoogleMapReact center={center}\n                    draggable={Boolean(this.state.draggable)}\n                    zoom={zoom}\n                    options={{\n                        draggable: this.state.draggable,\n                        panControl: true,\n                        disableDoubleClickZoom: this.state.disableDoubleClickZoom,\n                        scrollwheel: true,\n                        gestureHandling: 'greedy',\n                        zoomControlOptions: this.state.controls ? {\n                            position: google.maps.ControlPosition.RIGHT_CENTER,\n                            style: google.maps.ZoomControlStyle.SMALL,\n                        } : null,\n                    }}\n                    onChildMouseEnter={() => {let bool = findParentBySelector(ReactDOM.findDOMNode(this), '.pointerEventsEnabled'); this.setState({ draggable: false, disableDoubleClickZoom: true, controls: bool });}}\n                    onChildMouseLeave={() => {let bool = findParentBySelector(ReactDOM.findDOMNode(this), '.pointerEventsEnabled'); this.setState({ draggable: bool, disableDoubleClickZoom: !bool, controls: bool });}}\n                    onChange={e => {\n                        this.props.update(e.center.lat, e.center.lng, e.zoom, false);\n\n                    }}\n                    onGoogleApiLoaded={({ map, maps }) => {\n                        map.setOptions({ draggable: false, mapTypeControl: false, zoomControl: false });\n                        window.mapList[num] = map;\n                    }}\n                    resetBoundsOnResize\n                    yesIWantToUseGoogleMapApiInternals>\n                    {this.props.children}\n                </GoogleMapReact>\n                {this.props.searchBox ? <SearchBox\n                    num={num}\n                    center={center}\n                    id={this.props.id}\n                    placeholder={this.props.placeholder}\n                    onPlacesChanged={(places) => {\n                        this.props.update(places.lat, places.lng, 15, true);\n\n                    }}/> : null}\n\n            </div>\n\n        );\n    }\n    componentWillUpdate() {\n\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/VirtualTour/components/Map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 847,
    "kind": "class",
    "name": "Map",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/Map.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/VirtualTour/components/Map.js",
    "importStyle": "Map",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 848,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 849,
    "kind": "member",
    "name": "state",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map",
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map#state",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "{\"draggable\": boolean, \"controls\": *, \"disableDoubleClickZoom\": boolean}"
      ]
    }
  },
  {
    "__docId__": 850,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map#render",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 851,
    "kind": "method",
    "name": "componentWillUpdate",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/Map.js~Map#componentWillUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 852,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js",
    "content": "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { FormGroup, InputGroup, Glyphicon, FormControl } from 'react-bootstrap';\nexport default class SearchBox extends React.Component {\n    constructor(props) {\n        super(props);\n        // This binding is necessary to make `this` work in the callback\n        this.onPlacesChanged = this.onPlacesChanged.bind(this);\n    }\n    render() {\n        /* jshint ignore:start */\n        return (\n            <FormGroup id={\"map-\" + this.props.id} className=\"searchBox\">\n                <InputGroup>\n                    <FormControl type=\"text\" ref={\"input-\" + this.props.id} placeholder={this.props.placeholder}/>\n                    <InputGroup.Addon style={{ padding: \"2px 7px\" }}>\n                        <i className=\"material-icons\">search</i>\n                        {/* <Glyphicon glyph=\"search\" />*/}\n                    </InputGroup.Addon>\n                </InputGroup>\n            </FormGroup>\n        );\n        /* jshint ignore:end */\n    }\n    onPlacesChanged() {\n        if (this.props.onPlacesChanged) {\n            let places = this.searchBox.getPlaces();\n            if (places && places.length > 0) {\n                let geom = places[0].geometry.location;\n                let lat = Math.round(geom.lat() * 100000) / 100000;\n                let lng = Math.round(geom.lng() * 100000) / 100000;\n                let center = this.props.center;\n                let num = this.props.num;\n                let map = window.mapList[num];\n\n                // console.log('%cBEGIN***************' + num + '**************************', 'color: blue', 'PLACES');\n                // console.log('PRE-UPDATE STATE', 'PLACES', center.lat, center.lng, num);\n                // console.log('PRE-UPDATE STATE', 'PLACES', window.mapList[num] ? (window.mapList[num].center.lat() + ' ' + window.mapList[num].center.lng()) : '');\n                map.setCenter(new google.maps.LatLng(lat, lng));\n                // console.log('POST-UPDATE STATE', 'PLACES', center.lat, center.lng, num);\n                // console.log('POST-UPDATE STATE', 'PLACES', window.mapList[num] ? (window.mapList[num].center.lat() + ' ' + window.mapList[num].center.lng()) : '');\n                // console.log('%cEND***************' + num + '**************************', 'color: blue', 'PLACES');\n                this.props.onPlacesChanged({ map: this.props.id, lat: lat, lng: lng });\n            }\n        }\n    }\n    componentDidMount() {\n        if(!google) {\n            return;\n        }\n        let input = ReactDOM.findDOMNode(this.refs[\"input-\" + this.props.id]);\n        this.searchBox = new google.maps.places.SearchBox(input);\n        this.searchBoxListener = this.searchBox.addListener('places_changed', this.onPlacesChanged);\n\n    }\n\n    componentWillUnmount() {\n        google.maps.event.removeListener(this.searchBoxListener);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 853,
    "kind": "class",
    "name": "SearchBox",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js",
    "static": true,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js",
    "importStyle": "SearchBox",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "react~React.Component"
    ]
  },
  {
    "__docId__": 854,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "render",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox#render",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 857,
    "kind": "method",
    "name": "onPlacesChanged",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox#onPlacesChanged",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "componentDidMount",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox#componentDidMount",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 859,
    "kind": "member",
    "name": "searchBox",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox#searchBox",
    "access": "public",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 860,
    "kind": "member",
    "name": "searchBoxListener",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox#searchBoxListener",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "componentWillUnmount",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "DALI_EDITOR/plugins/VirtualTour/components/SearchBox.js~SearchBox#componentWillUnmount",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 862,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/VirtualTour/locales/en.js",
    "content": "module.exports = {\n    \"VirtualTour\": {\n        \"background_color\": \"Background color\",\n        \"border_color\": \"Border color\",\n        \"border_size\": \"Border Size\",\n        \"border_style\": \"Border Style\",\n        \"box_style\": \"Box style\",\n        \"Coords\": \"Coordinates\",\n        \"opacity\": \"Opacity\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Virtual Tour\",\n        \"radius\": \"Radius\",\n        \"center\": \"Center\",\n        \"Zoom\": \"Zoom\",\n        \"map\": \"Mapa\",\n        \"message_mark_xy\": \"You've chosen an incorrect value. You must introduce two numbers separated by a comma. E.g. 4.56,90.76\",\n        \"Search\": \"Search places...\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/VirtualTour/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 863,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/VirtualTour/locales/es.js",
    "content": "module.exports = {\n    \"VirtualTour\": {\n        \"background_color\": \"Color de fondo\",\n        \"PluginName\": \"Tour Virtual\",\n        \"border_color\": \"Color de borde\",\n        \"border_size\": \"Grosor de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"box_style\": \"Estilo caja\",\n        \"Coords\": \"Coordenadas\",\n        \"opacity\": \"Opacidad\",\n        \"padding\": \"Padding\",\n        \"radius\": \"Radio\",\n        \"map\": \"Mapa\",\n        \"center\": \"Centro\",\n        \"Zoom\": \"Zoom\",\n        \"message_mark_xy\": \"Ha introducido un valor incorrecto. Debe introducir dos números separados por coma. Ej. 4.56,90.76\",\n        \"Search\": \"Busca lugares...\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/VirtualTour/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 864,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/VirtualTour/visor/VirtualTour.js",
    "content": "import React from \"react\";\nimport GoogleMapReact from 'google-map-react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport i18n from 'i18next';\nrequire('./../_virtualTour.scss');\nwindow.mapsVisor = [];\nexport function VirtualTour(base) {\n    return {\n        getRenderTemplate: function(state, id) {\n            if (!google) {\n                return (<div className=\"dropableRichZone noInternetConnectionBox\" style={{ width: '100%', height: '100%' }}>\n                    <div className=\"middleAlign\">\n                        <i className=\"material-icons dark\">signal_wifi_off</i><br/>\n                        {i18n.t('messages.no_internet')}\n                    </div>\n                </div>);\n            }\n\n            let marks = state.__marks;\n            let box_id = id;\n\n            let markElements = Object.keys(marks).map((e) =>{\n                let Mark = ({ key, text }) => (\n                    <OverlayTrigger placement=\"top\" overlay={<Tooltip id={e}>{text}</Tooltip>}>\n                        <a className=\"mapMarker\" onClick={()=>{this.onMarkClicked(box_id, marks[e].value);}}href=\"#\">\n                            <i style={{ color: marks[e].color }} key=\"i\" className=\"material-icons\">room</i>\n                        </a>\n                    </OverlayTrigger>);\n\n                let position = marks[e].value.split(',');\n                return (<Mark key={e} text={marks[e].title} lat={position[0]} lng={position[1]}/>);\n\n            });\n            let lat = state.config.lat && parseFloat(state.config.lat) ? parseFloat(state.config.lat) : 0;\n            let lng = state.config.lng && parseFloat(state.config.lng) ? parseFloat(state.config.lng) : 0;\n            let zoom = state.config.zoom && !isNaN(parseFloat(state.config.zoom)) ? parseFloat(state.config.zoom) : 10;\n            let center = { lat: lat, lng: lng };\n            return(\n                <div className=\"virtualMap\" >\n                    <div style={{ width: '100%', height: '100%' }}>\n                        <GoogleMapReact\n                            center={center}\n                            zoom={zoom}\n                            options={{\n                                panControl: true,\n                                mapTypeControl: true,\n                                scrollwheel: true,\n                                gestureHandling: 'greedy',\n                            }}\n                            onGoogleApiLoaded={({ map, maps }) => {\n                                window.mapsVisor[state.num] = map;\n                            }}\n                            resetBoundsOnResize\n                            yesIWantToUseGoogleMapApiInternals>\n                            {markElements}\n                        </GoogleMapReact>\n                    </div>\n                </div>);\n        },\n        onMarkClicked(element, value) {\n            base.triggerMark(element, value, false);\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/VirtualTour/visor/VirtualTour.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 865,
    "kind": "function",
    "name": "VirtualTour",
    "memberof": "DALI_EDITOR/plugins/VirtualTour/visor/VirtualTour.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/VirtualTour/visor/VirtualTour.js~VirtualTour",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/VirtualTour/visor/VirtualTour.js",
    "importStyle": "{VirtualTour}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getRenderTemplate\": *, \"onMarkClicked\": function}"
      ]
    }
  },
  {
    "__docId__": 866,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Webpage/Webpage.js",
    "content": "export function Webpage(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'Webpage',\n                displayName: Dali.i18n.t('Webpage.PluginName'),\n                category: 'multimedia',\n                icon: 'public',\n                initialWidth: '70%',\n                initialHeight: \"300px\",\n                initialWidthSlide: '70%',\n                initialHeightSlide: '60%',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        basic: {\n                            __name: Dali.i18n.t('Webpage.URL'),\n                            icon: 'link',\n                            buttons: {\n                                url: {\n                                    __name: '',\n                                    type: 'text',\n                                    value: base.getState().url,\n                                    autoManaged: false,\n                                },\n                            },\n                        },\n                        style: {\n                            __name: Dali.i18n.t('Webpage.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: 'Padding',\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('Webpage.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('Webpage.border_style'),\n                                    type: 'select',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('Webpage.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('Webpage.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('Webpage.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.05,\n                                },\n\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getInitialState: function() {\n            return {\n                url: 'http://apps.thecodepost.org/trex/trex.html',\n            };\n        },\n        getRenderTemplate: function(state) {\n            return \"<iframe  class=\\\"basicImageClass\\\"  style=\\\"width: 100%; height: 100%; z-index:0;\\\" src=\\\"\" + state.url + \"\\\"></iframe>\";\n        },\n        handleToolbar: function(name, value) {\n            base.setState(name, value);\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Webpage/Webpage.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 867,
    "kind": "function",
    "name": "Webpage",
    "memberof": "DALI_EDITOR/plugins/Webpage/Webpage.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/Webpage/Webpage.js~Webpage",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/Webpage/Webpage.js",
    "importStyle": "{Webpage}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *}"
      ]
    }
  },
  {
    "__docId__": 868,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Webpage/locales/en.js",
    "content": "module.exports = {\n    \"Webpage\": {\n        \"background_color\": \"Background color\",\n        \"border_color\": \"Border color\",\n        \"border_size\": \"Border Size\",\n        \"border_style\": \"Border Style\",\n        \"box_style\": \"Box style\",\n        \"opacity\": \"Opacity\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Web Page\",\n        \"radius\": \"Radius\",\n        \"source\": \"Source\",\n        \"URL\": \"URL\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Webpage/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 869,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Webpage/locales/es.js",
    "content": "module.exports = {\n    \"Webpage\": {\n        \"background_color\": \"Color de fondo\",\n        \"border_color\": \"Color de borde\",\n        \"border_size\": \"Grosor de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"box_style\": \"Estilo caja\",\n        \"opacity\": \"Opacidad\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Página Web\",\n        \"radius\": \"Radio\",\n        \"source\": \"Origen\",\n        \"URL\": \"URL\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Webpage/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 870,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Youtube/Youtube.js",
    "content": "export function Youtube(base) {\n    return {\n        getConfig: function() {\n            return {\n                name: 'Youtube',\n                displayName: Dali.i18n.t('Youtube.PluginName'),\n                category: 'multimedia',\n                initialWidth: '350px',\n                initialHeight: '200px',\n                aspectRatioButtonConfig: {\n                    location: [\"main\", \"__sortable\"],\n                    defaultValue: true,\n                },\n                icon: 'slideshow',\n            };\n        },\n        getToolbar: function() {\n            return {\n                main: {\n                    __name: \"Main\",\n                    accordions: {\n                        basic: {\n                            __name: Dali.i18n.t('Youtube.Video'),\n                            icon: 'link',\n                            buttons: {\n                                url: {\n                                    __name: Dali.i18n.t('Youtube.URL'),\n                                    type: 'text',\n                                    value: base.getState().url,\n                                    autoManaged: false,\n                                },\n                            },\n                        },\n                        style: {\n                            __name: Dali.i18n.t('Youtube.box_style'),\n                            icon: 'palette',\n                            buttons: {\n                                padding: {\n                                    __name: Dali.i18n.t('Youtube.padding'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 100,\n                                },\n                                borderWidth: {\n                                    __name: Dali.i18n.t('Youtube.border_size'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 10,\n                                },\n                                borderStyle: {\n                                    __name: Dali.i18n.t('Youtube.border_style'),\n                                    type: 'select',\n                                    value: 'solid',\n                                    options: ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset', 'initial', 'inherit'],\n                                },\n                                borderColor: {\n                                    __name: Dali.i18n.t('Youtube.border_color'),\n                                    type: 'color',\n                                    value: '#000000',\n                                },\n                                borderRadius: {\n                                    __name: Dali.i18n.t('Youtube.radius'),\n                                    type: 'number',\n                                    value: 0,\n                                    min: 0,\n                                    max: 50,\n                                },\n                                opacity: {\n                                    __name: Dali.i18n.t('Youtube.opacity'),\n                                    type: 'range',\n                                    value: 1,\n                                    min: 0,\n                                    max: 1,\n                                    step: 0.05,\n                                },\n\n                            },\n                        },\n                    },\n                },\n            };\n        },\n        getInitialState: function() {\n            return {\n                url: 'https://www.youtube.com/watch?v=3zUvnRg3zao',\n            };\n        },\n        getRenderTemplate: function(state) {\n            return \"<iframe  class=\\\"basicImageClass\\\"  style=\\\"width: 100%; height: 100%; z-index:0;\\\" src=\\\"\" + this.parseURL(state.url) + \"\\\" frameBorder=\\\"0\\\" allowFullScreen ></iframe>\";\n        },\n        handleToolbar: function(name, value) {\n            if (name === 'url') {\n                base.setState(name, base.parseURL(value));\n            } else {\n                base.setState(name, value);\n            }\n        },\n        parseURL: function(url) {\n            if (url === '') {\n                return url;\n            }\n            let patt1 = /youtube.com\\/watch\\?v=(.*)/;\n            let patt2 = /youtube.com\\/embed\\/(.*)/;\n            let patt3 = /youtu.be\\/(.*)/;\n            if (patt2.exec(url)) {\n                return url;\n            }\n            let code = patt1.exec(url);\n            if (code) {\n                return 'https://www.youtube.com/embed/' + code[1];\n            }\n            let code2 = patt3.exec(url);\n            if (code2) {\n                return 'https://www.youtube.com/embed/' + code2[1];\n            }\n            alert('No es un video de youtube.');\n            return '';\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Youtube/Youtube.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 871,
    "kind": "function",
    "name": "Youtube",
    "memberof": "DALI_EDITOR/plugins/Youtube/Youtube.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/plugins/Youtube/Youtube.js~Youtube",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/plugins/Youtube/Youtube.js",
    "importStyle": "{Youtube}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "base",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"getConfig\": *, \"getToolbar\": *, \"getInitialState\": *, \"getRenderTemplate\": *, \"handleToolbar\": *, \"parseURL\": *}"
      ]
    }
  },
  {
    "__docId__": 872,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Youtube/locales/en.js",
    "content": "module.exports = {\n    \"Youtube\": {\n        \"Allow_fullscreen\": \"Allow fullscreen\",\n        \"Show_controls\": \"Show Controls\",\n        \"URL\": \"URL\",\n        \"Video\": \"Video\",\n        \"background_color\": \"Background color\",\n        \"border_color\": \"Border color\",\n        \"border_size\": \"Border Size\",\n        \"border_style\": \"Border Style\",\n        \"box_style\": \"Box style\",\n        \"opacity\": \"Opacity\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Youtube\",\n        \"radius\": \"Radius\",\n        \"source\": \"Source\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Youtube/locales/en.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 873,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/Youtube/locales/es.js",
    "content": "module.exports = {\n    \"Youtube\": {\n        \"Allow_fullscreen\": \"Permitir pantalla completa\",\n        \"Show_controls\": \"Mostrar controles\",\n        \"URL\": \"URL\",\n        \"Video\": \"Vídeo\",\n        \"background_color\": \"Color de fondo\",\n        \"border_color\": \"Color de borde\",\n        \"border_size\": \"Grosor de borde\",\n        \"border_style\": \"Estilo de borde\",\n        \"box_style\": \"Estilo caja\",\n        \"opacity\": \"Opacidad\",\n        \"padding\": \"Padding\",\n        \"PluginName\": \"Youtube\",\n        \"radius\": \"Radio\",\n        \"source\": \"Origen\",\n    },\n};\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/Youtube/locales/es.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 874,
    "kind": "file",
    "name": "DALI_EDITOR/plugins/plugin_dependencies_loader.js",
    "content": "module.exports = { requireAll: function() { } };\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/plugins/plugin_dependencies_loader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 875,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/__tests__/test_helper.js",
    "content": "import { ID_PREFIX_BOX, ID_PREFIX_PAGE, ID_PREFIX_SECTION, ID_PREFIX_SORTABLE_BOX, ID_PREFIX_CONTAINED_VIEW, ID_PREFIX_SORTABLE_CONTAINER, PAGE_TYPES } from '../../common/constants';\n\nexport default function(initialState, reducer) {\n    return {\n        state: initialState,\n        call: function(action) {\n            this.state = reducer(this.state, action);\n        },\n        clean: function() {\n            this.state = initialState;\n        },\n        set: function(state) {\n            this.state = state;\n        },\n        getBox: function(id) {\n            if(id) {\n                return ID_PREFIX_BOX + id;\n            }\n            return ID_PREFIX_BOX + this.getRandomInt(10000, 100000);\n        },\n        getSortableBox: function(id) {\n            if(id) {\n                return ID_PREFIX_SORTABLE_BOX + id;\n            }\n            return ID_PREFIX_SORTABLE_BOX + this.getRandomInt(10000, 100000);\n        },\n        getSortableContainer: function(id) {\n            if(id) {\n                return ID_PREFIX_SORTABLE_CONTAINER + id;\n            }\n            return ID_PREFIX_SORTABLE_CONTAINER + this.getRandomInt(10000, 100000);\n        },\n        getContainedView: function(id) {\n            if(id) {\n                return ID_PREFIX_CONTAINED_VIEW + id;\n            }\n            return ID_PREFIX_CONTAINED_VIEW + this.getRandomInt(10000, 100000);\n        },\n        getRandomInt: function(min, max) {\n            return Math.floor(Math.random() * (max - min + 1)) + min;\n        },\n    };\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/__tests__/test_helper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 876,
    "kind": "function",
    "name": "test_helper",
    "memberof": "DALI_EDITOR/reducers/__tests__/test_helper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/__tests__/test_helper.js~test_helper",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/__tests__/test_helper.js",
    "importStyle": "test_helper",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "initialState",
        "types": [
          "*"
        ]
      },
      {
        "name": "reducer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"state\": *, \"call\": *, \"clean\": *, \"set\": *, \"getBox\": *, \"getSortableBox\": *, \"getSortableContainer\": *, \"getContainedView\": *, \"getRandomInt\": *}"
      ]
    }
  },
  {
    "__docId__": 877,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/box_level_selected.es6",
    "content": "import { ADD_BOX, INCREASE_LEVEL, SELECT_BOX, SELECT_NAV_ITEM, DELETE_NAV_ITEM } from '../common/actions';\nimport { isSortableBox } from '../common/utils';\n\nexport default function(state = 0, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        return 0;\n    case INCREASE_LEVEL:\n        return state + 1;\n    case DELETE_NAV_ITEM:\n        return 0;\n    case SELECT_BOX:\n        if (action.payload.id === -1) {\n            return 0;\n        }\n        if (isSortableBox(action.payload.id)) {\n            return -1;\n        }\n        // If level is -1 because a DaliBoxSortable was selected previously, we want to return 0, otherwise, return current\n        return Math.max(state, 0);\n    case SELECT_NAV_ITEM:\n        return 0;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/box_level_selected.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 878,
    "kind": "function",
    "name": "box_level_selected",
    "memberof": "DALI_EDITOR/reducers/box_level_selected.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/box_level_selected.es6~box_level_selected",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/box_level_selected.es6",
    "importStyle": "box_level_selected",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/box_selected.es6",
    "content": "import { ADD_BOX, ADD_NAV_ITEM, DELETE_BOX, DELETE_SORTABLE_CONTAINER, DUPLICATE_BOX, DELETE_NAV_ITEM, SELECT_BOX, DELETE_CONTAINED_VIEW,\n    SELECT_CONTAINED_VIEW, SELECT_NAV_ITEM, IMPORT_STATE } from '../common/actions';\nimport { ID_PREFIX_BOX } from '../common/constants';\nimport { isBox, isSortableBox, isContainedView } from '../common/utils';\n\nexport default function(state = -1, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        // When we create a new document, new DaliBoxSortable is created aswell; we don't want it to be selected\n        if (isSortableBox(action.payload.ids.id)) {\n            if (isContainedView(action.payload.ids.parent)) {\n                return state;\n            }\n            return -1;\n        }\n        // When we create a new box with default plugins, we don't want them to be selected\n        if (action.payload.initialParams && action.payload.initialParams.isDefaultPlugin) {\n            return state;\n        }\n        // Just normal situation\n        return action.payload.ids.id;\n\n    case ADD_NAV_ITEM:\n        return -1;\n    case DELETE_BOX:\n        // If box is in contained view, it has a box as a parent -> we need to check this and select none\n        if (isContainedView(action.payload.container)) {\n            return -1;\n        }\n        // When we delete a box inside another one, we want it's parent to be selected\n        if (isBox(action.payload.parent)) {\n            return action.payload.parent;\n        }\n        return -1;\n    case DELETE_SORTABLE_CONTAINER:\n        return -1;\n    case DUPLICATE_BOX:\n        return ID_PREFIX_BOX + action.payload.newId;\n    case DELETE_NAV_ITEM:\n        return -1;\n    case DELETE_CONTAINED_VIEW:\n        return -1;\n    case SELECT_BOX:\n        return action.payload.id;\n    case SELECT_CONTAINED_VIEW:\n        return -1;\n    case SELECT_NAV_ITEM:\n        return -1;\n    case IMPORT_STATE:\n        return action.payload.present.boxSelected || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/box_selected.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 880,
    "kind": "function",
    "name": "box_selected",
    "memberof": "DALI_EDITOR/reducers/box_selected.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/box_selected.es6~box_selected",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/box_selected.es6",
    "importStyle": "box_selected",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 881,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/boxes_by_id.es6",
    "content": "import Utils, { changeProp, changeProps, deleteProp, deleteProps, isSortableBox, isContainedView, isSortableContainer } from '../common/utils';\nimport { ADD_BOX, MOVE_BOX, DUPLICATE_BOX, UPDATE_BOX, DELETE_BOX, REORDER_SORTABLE_CONTAINER, DROP_BOX, ADD_RICH_MARK,\n    RESIZE_SORTABLE_CONTAINER, DELETE_SORTABLE_CONTAINER, CHANGE_COLS, CHANGE_ROWS, CHANGE_SORTABLE_PROPS, REORDER_BOXES,\n    DELETE_NAV_ITEM, DELETE_CONTAINED_VIEW, IMPORT_STATE } from '../common/actions';\nimport { ID_PREFIX_BOX } from '../common/constants';\n\nfunction boxCreator(state, action) {\n    let position;\n    let level = 0;\n    if (state[action.payload.ids.parent] && !isContainedView(action.payload.ids.container)) {\n        level = state[action.payload.ids.parent].level + 1;\n    }\n\n    if (isSortableBox(action.payload.ids.id)) {\n        position = { x: 0, y: 0, type: 'relative' };\n        level = -1;\n    } else {\n        position = {\n            x: 0,\n            y: 0,\n            type: 'absolute',\n        };\n    }\n    if (isSortableContainer(action.payload.ids.container)) {\n        position = {\n            x: 0,\n            y: 0,\n            type: 'relative',\n        };\n    }\n    let col = 0;\n    let row = 0;\n    if (action.payload.initialParams) {\n        if (action.payload.initialParams.position) {\n            position = action.payload.initialParams.position;\n        }\n        if (action.payload.initialParams.col) {\n            col = action.payload.initialParams.col;\n        }\n        if (action.payload.initialParams.row) {\n            row = action.payload.initialParams.row;\n        }\n        if (action.payload.initialParams.width) {\n            // width = action.payload.initialParams.width;\n        }\n    }\n\n    // sortableContainers for boxes inside this box (this is not DaliBoxSortable)\n    let children = [];\n    let sortableContainers = {};\n    if (action.payload.state) {\n        let pluginContainers = action.payload.state.__pluginContainerIds;\n        if (pluginContainers) {\n            for (let key in pluginContainers) {\n                children.push(pluginContainers[key].id);\n                sortableContainers[pluginContainers[key].id] = sortableContainerCreator(key, [], pluginContainers[key].height);\n            }\n        }\n    }\n\n    return {\n        id: action.payload.ids.id,\n        parent: action.payload.ids.parent,\n        container: action.payload.ids.container,\n        level: level,\n        col: col,\n        row: row,\n        position: position,\n        // width: width,\n        // height: height,\n        content: action.payload.content,\n        draggable: action.payload.draggable,\n        resizable: action.payload.resizable,\n        showTextEditor: false,\n        fragment: {},\n        children: children,\n        sortableContainers: sortableContainers,\n        containedViews: [],\n    };\n}\n\nfunction sortableContainerCreator(key = \"\", children = [], height = \"auto\") {\n    return {\n        children: children,\n        style: {\n            padding: '0px',\n            borderColor: '#ffffff',\n            borderWidth: '0px',\n            borderStyle: 'solid',\n            opacity: '1',\n            textAlign: 'center',\n            className: '',\n        },\n        height: height,\n        key: key,\n        colDistribution: [100],\n        cols: [\n            [100],\n        ],\n    };\n}\n\nfunction boxReducer(state = {}, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        return changeProps(\n            state,\n            [\n                \"children\",\n                \"sortableContainers\",\n            ], [\n                (state.children.indexOf(action.payload.ids.container) !== -1) ? // if parent box contains container indicated\n                state.children : // nothing changes\n                    [...state.children, action.payload.ids.container], // adds container to children\n                sortableContainersReducer(state.sortableContainers, action),\n            ]\n        );\n    case ADD_RICH_MARK:\n        return changeProp(state, \"containedViews\", [...state.containedViews, action.payload.mark.connection.id]);\n    case CHANGE_COLS:\n        if (action.payload.parent === state.id) {\n            return changeProp(state, \"sortableContainers\", sortableContainersReducer(state.sortableContainers, action));\n        }\n        return changeProps(\n            state,\n            [\n                \"col\",\n                \"row\",\n            ], [\n                state.col >= action.payload.distribution.length ? action.payload.distribution.length - 1 : state.col,\n                state.col >= action.payload.distribution.length ? 0 : state.row,\n            ]\n        );\n    case CHANGE_SORTABLE_PROPS:\n        return changeProp(state, \"sortableContainers\", sortableContainersReducer(state.sortableContainers, action));\n    case CHANGE_ROWS:\n        if (action.payload.parent === state.id) {\n            return changeProp(state, \"sortableContainers\", sortableContainersReducer(state.sortableContainers, action));\n        }\n        return changeProp(\n            state,\n            \"row\",\n            state.row >= action.payload.distribution.length ?\n                action.payload.distribution.length - 1 :\n                state.row\n        );\n    case DELETE_BOX:\n        return changeProp(state, \"sortableContainers\", sortableContainersReducer(state.sortableContainers, action));\n    case DELETE_SORTABLE_CONTAINER:\n        return changeProps(\n            state,\n            [\n                \"children\",\n                \"sortableContainers\",\n            ], [\n                state.children.filter(id => id !== action.payload.id),\n                sortableContainersReducer(state.sortableContainers, action),\n            ]\n        );\n    case DROP_BOX:\n        return changeProps(\n            state,\n            [\n                \"row\",\n                \"col\",\n            ], [\n                action.payload.row,\n                action.payload.col,\n            ]\n        );\n    case MOVE_BOX:\n        return changeProp(state, \"position\",\n            {\n                x: action.payload.x,\n                y: action.payload.y,\n                type: action.payload.position,\n            }\n        );\n    case REORDER_SORTABLE_CONTAINER:\n        return changeProp(state, \"children\", action.payload.ids);\n    case REORDER_BOXES:\n        return changeProp(state, \"sortableContainers\", sortableContainersReducer(state.sortableContainers, action));\n    case RESIZE_SORTABLE_CONTAINER:\n        return changeProp(state, \"sortableContainers\", sortableContainersReducer(state.sortableContainers, action));\n    case UPDATE_BOX:\n        // sortableContainers for boxes inside this box (this is not DaliBoxSortable)\n        let sortableContainers = {};\n        let children = [];\n        if (action.payload.state.__pluginContainerIds) {\n            for (let containerKey in action.payload.state.__pluginContainerIds) {\n                let container = action.payload.state.__pluginContainerIds[containerKey];\n                // if not found -> create new one; otherwise copy existing\n                if (!state.sortableContainers[container.id]) {\n                    sortableContainers[container.id] = sortableContainerCreator(containerKey, [], container.height);\n                } else {\n                    sortableContainers[container.id] = Utils.deepClone(state.sortableContainers[container.id]);\n                }\n                children.push(container.id);\n            }\n        }\n\n        return changeProps(\n            state,\n            [\n                \"content\",\n                \"children\",\n                \"sortableContainers\",\n            ], [\n                action.payload.content,\n                children,\n                sortableContainers,\n            ]\n        );\n    default:\n        return state;\n    }\n}\n\nfunction singleSortableContainerReducer(state = {}, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        return changeProp(state, \"children\", [...state.children, action.payload.ids.id]);\n    case CHANGE_COLS:\n        let cols = state.cols;\n        let distributionLength = action.payload.distribution.length;\n        if (distributionLength < cols.length) {\n            cols = cols.slice(0, distributionLength);\n        }\n        let reduced = action.payload.distribution.reduce(function(prev, curr) {\n            return prev + curr;\n        });\n        if (reduced > 99 || reduced <= 101) {\n            if (distributionLength > cols.length) {\n                let difference = distributionLength - cols.length;\n                for (let i = 0; i < difference; i++) {\n                    cols.push([100]);\n                }\n            }\n        }\n\n        return changeProps(\n            state,\n            [\n                \"colDistribution\",\n                \"cols\",\n            ], [\n                action.payload.distribution,\n                cols,\n            ]\n        );\n    case CHANGE_ROWS:\n        let newCols = state.cols.slice();\n        newCols[action.payload.column] = action.payload.distribution;\n\n        return changeProp(state, \"cols\", newCols);\n    case CHANGE_SORTABLE_PROPS:\n        return changeProp(state, \"style\", changeProp(state.style, action.payload.prop, action.payload.value));\n    case DELETE_BOX:\n        return changeProp(state, \"children\", state.children.filter(id => id !== action.payload.id));\n    case REORDER_BOXES:\n        return changeProp(state, \"children\", action.payload.order);\n    case RESIZE_SORTABLE_CONTAINER:\n        return changeProp(state, \"height\", action.payload.height);\n    default:\n        return state;\n    }\n}\n\nfunction sortableContainersReducer(state = {}, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        return changeProp(\n            state,\n            action.payload.ids.container,\n            state[action.payload.ids.container] ?\n                singleSortableContainerReducer(state[action.payload.ids.container], action) :\n                sortableContainerCreator(\"\", [action.payload.ids.id])\n        );\n    case CHANGE_COLS:\n        return changeProp(state, action.payload.id, singleSortableContainerReducer(state[action.payload.id], action));\n    case CHANGE_ROWS:\n        return changeProp(state, action.payload.id, singleSortableContainerReducer(state[action.payload.id], action));\n    case CHANGE_SORTABLE_PROPS:\n        return changeProp(state, action.payload.id, singleSortableContainerReducer(state[action.payload.id], action));\n    case DELETE_BOX:\n        return changeProp(state, action.payload.container, singleSortableContainerReducer(state[action.payload.container], action));\n    case DELETE_SORTABLE_CONTAINER:\n        return deleteProp(state, action.payload.id);\n    case REORDER_BOXES:\n        return changeProp(state, action.payload.container, singleSortableContainerReducer(state[action.payload.container], action));\n    case RESIZE_SORTABLE_CONTAINER:\n        return changeProp(state, action.payload.id, singleSortableContainerReducer(state[action.payload.id], action));\n    default:\n        return state;\n    }\n}\n\nexport default function(state = {}, action = {}) {\n    let newState;\n    let temp;\n    switch (action.type) {\n    case ADD_BOX:\n        // if box is contained in sortableContainer, add it as well to its children\n        if (isSortableContainer(action.payload.ids.container)) {\n            return changeProps(\n                state,\n                [\n                    action.payload.ids.id,\n                    action.payload.ids.parent,\n                ], [\n                    boxCreator(state, action),\n                    boxReducer(state[action.payload.ids.parent], action),\n                ]\n            );\n        }\n        return changeProp(state, action.payload.ids.id, boxCreator(state, action));\n    case MOVE_BOX:\n        return changeProp(state, action.payload.id, boxReducer(state[action.payload.id], action));\n    case DUPLICATE_BOX:\n        // TODO\n        newState = Object.assign({}, state);\n        let replaced = Object.assign({}, state);\n        let newIds = action.payload.newIds;\n        let newId = ID_PREFIX_BOX + action.payload.newId;\n        // let count = 0;\n        Object.keys(newIds).map(box => {\n            replaced = Object.replaceAll(replaced, box, newIds[box]);\n        });\n        replaced = Object.replaceAll(replaced, action.payload.id.substr(3), action.payload.newId);// split -\n        let defState = Object.assign({}, newState, replaced);\n        if (action.payload.container !== 0) {\n            replaced[action.payload.parent].sortableContainers[action.payload.container].children.push(action.payload.id);\n        }\n\n        return Object.assign({}, defState, {\n            [newId]: Object.assign({}, defState[newId], { position: { x: 0, y: 0, position: 'absolute' } }),\n        });\n    case RESIZE_SORTABLE_CONTAINER:\n        return changeProp(state, action.payload.parent, boxReducer(state[action.payload.parent], action));\n    case UPDATE_BOX:\n        return changeProp(state, action.payload.id, boxReducer(state[action.payload.id], action));\n    case ADD_RICH_MARK:\n        // If rich mark is connected to a new contained view, mark.connection will include this information;\n        // otherwise, it's just the id/url and we're not interested\n        if (action.payload.mark.connection.id) {\n            return changeProp(state, action.payload.parent, boxReducer(state[action.payload.parent], action));\n        }\n        return state;\n    case REORDER_BOXES:\n        return changeProp(state, action.payload.parent, boxReducer(state[action.payload.parent], action));\n    case CHANGE_SORTABLE_PROPS:\n        return changeProp(state, action.payload.parent, boxReducer(state[action.payload.parent], action));\n    case DROP_BOX:\n        return changeProp(state, action.payload.id, boxReducer(state[action.payload.id], action));\n    case CHANGE_COLS:\n        newState = changeProp(state, action.payload.parent, boxReducer(state[action.payload.parent], action));\n        action.payload.boxesAffected.forEach(id => {\n            newState = changeProp(newState, id, boxReducer(newState[id], action));\n        });\n        return newState;\n    case CHANGE_ROWS:\n        newState = changeProp(state, action.payload.parent, boxReducer(state[action.payload.parent], action));\n        action.payload.boxesAffected.forEach(id => {\n            newState = changeProp(newState, id, boxReducer(newState[id], action));\n        });\n        return newState;\n    case DELETE_BOX:\n        let children = action.payload.children ? action.payload.children : [];\n        let which_children = children.concat(action.payload.id);\n        temp = deleteProps(state, children.concat(action.payload.id));\n\n        // If box is in sortableContainer, delete from its children aswell\n        if (isSortableContainer(action.payload.container)) {\n            return changeProp(temp, action.payload.parent, boxReducer(state[action.payload.parent], action));\n        }\n        return temp;\n    case DELETE_CONTAINED_VIEW:\n        let newBoxes = Object.assign({}, state);\n        Object.keys(action.payload.parent).forEach((el)=>{\n            if(newBoxes[el] && newBoxes[el].containedViews) {\n                let index = newBoxes[el].containedViews.indexOf(action.payload.ids[0]);\n                if(index > -1) {\n                    newBoxes[el].containedViews.splice(index, 1);\n                }\n            }\n        });\n        return deleteProps(newBoxes, action.payload.boxes);\n    case DELETE_SORTABLE_CONTAINER:\n        temp = deleteProps(state, action.payload.children);\n        return changeProp(temp, action.payload.parent, boxReducer(state[action.payload.parent], action));\n    case DELETE_NAV_ITEM:\n        // TODO: Delete linked marks\n        return deleteProps(state, action.payload.boxes);\n    case REORDER_SORTABLE_CONTAINER:\n        return changeProp(state, action.payload.parent, boxReducer(state[action.payload.parent], action));\n    case IMPORT_STATE:\n        return action.payload.present.boxesById || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/boxes_by_id.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 882,
    "kind": "function",
    "name": "boxCreator",
    "memberof": "DALI_EDITOR/reducers/boxes_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/boxes_by_id.es6~boxCreator",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/boxes_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"id\": *, \"parent\": *, \"container\": *, \"level\": *, \"col\": *, \"row\": *, \"position\": *, \"content\": *, \"draggable\": *, \"resizable\": *, \"showTextEditor\": *, \"fragment\": *, \"children\": *, \"sortableContainers\": *, \"containedViews\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 883,
    "kind": "function",
    "name": "sortableContainerCreator",
    "memberof": "DALI_EDITOR/reducers/boxes_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/boxes_by_id.es6~sortableContainerCreator",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/boxes_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "key",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "children",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "height",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "auto",
        "defaultValue": "auto"
      }
    ],
    "return": {
      "types": [
        "{\"children\": *, \"style\": *, \"height\": *, \"key\": *, \"colDistribution\": *, \"cols\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 884,
    "kind": "function",
    "name": "boxReducer",
    "memberof": "DALI_EDITOR/reducers/boxes_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/boxes_by_id.es6~boxReducer",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/boxes_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 885,
    "kind": "function",
    "name": "singleSortableContainerReducer",
    "memberof": "DALI_EDITOR/reducers/boxes_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/boxes_by_id.es6~singleSortableContainerReducer",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/boxes_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 886,
    "kind": "function",
    "name": "sortableContainersReducer",
    "memberof": "DALI_EDITOR/reducers/boxes_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/boxes_by_id.es6~sortableContainersReducer",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/boxes_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 887,
    "kind": "function",
    "name": "boxes_by_id",
    "memberof": "DALI_EDITOR/reducers/boxes_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/boxes_by_id.es6~boxes_by_id",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/boxes_by_id.es6",
    "importStyle": "boxes_by_id",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 888,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/contained_view_selected.es6",
    "content": "import { ADD_NAV_ITEM, DELETE_NAV_ITEM, DELETE_CONTAINED_VIEW, SELECT_CONTAINED_VIEW, SELECT_NAV_ITEM, IMPORT_STATE } from '../common/actions';\n\nexport default function(state = 0, action = {}) {\n    switch (action.type) {\n    case ADD_NAV_ITEM:\n        return 0;\n        // case DELETE_NAV_ITEM:\n        //     return 0;\n    case SELECT_CONTAINED_VIEW:\n        return action.payload.id;\n    case DELETE_CONTAINED_VIEW:\n        return 0;\n    case SELECT_NAV_ITEM:\n        return 0;\n    case IMPORT_STATE:\n        return action.payload.present.containedViewSelected || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/contained_view_selected.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 889,
    "kind": "function",
    "name": "contained_view_selected",
    "memberof": "DALI_EDITOR/reducers/contained_view_selected.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/contained_view_selected.es6~contained_view_selected",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/contained_view_selected.es6",
    "importStyle": "contained_view_selected",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 890,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/contained_views_by_id.es6",
    "content": "import { ADD_BOX, ADD_CONTAINED_VIEW, ADD_RICH_MARK, DELETE_RICH_MARK, EDIT_RICH_MARK, DELETE_BOX, DELETE_CONTAINED_VIEW, CHANGE_CONTAINED_VIEW_NAME, TOGGLE_TITLE_MODE, DELETE_NAV_ITEM, DELETE_SORTABLE_CONTAINER, IMPORT_STATE } from '../common/actions';\nimport { changeProp, deleteProps, isContainedView, findNavItemContainingBox } from '../common/utils';\n\nfunction singleContainedViewReducer(state = {}, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        return changeProp(state, \"boxes\", [...state.boxes, action.payload.ids.id]);\n    case ADD_RICH_MARK:\n        // only fired when new mark is connected to existing cv\n        let oldParents = Object.assign({}, state.parent);\n        if (!oldParents || Object.keys(oldParents).indexOf(action.payload.parent) === -1) {\n            oldParents[action.payload.parent] = [action.payload.mark.id];\n        } else {\n            oldParents[action.payload.parent].push(action.payload.mark.id);\n        }\n        return changeProp(state, \"parent\", oldParents);\n        // return state;\n    case DELETE_RICH_MARK:\n        let previousParents = Object.assign({}, state.parent);\n        let oldMarks = previousParents[action.payload.parent];\n        let ind = oldMarks.indexOf(action.payload.id);\n        if (ind > -1) {\n            oldMarks.splice(ind, 1);\n            if (oldMarks.length === 0) {\n                delete previousParents[action.payload.parent];\n            } else {\n                previousParents[action.payload.parent] = oldMarks;\n            }\n        }\n        return changeProp(state, \"parent\", previousParents);\n    case DELETE_BOX:\n        // TODO: Borrar parent boxes borradas\n        return changeProp(state, \"boxes\", state.boxes.filter(id => action.payload.id !== id));\n    case TOGGLE_TITLE_MODE:\n        return changeProp(state, \"header\", action.payload.titles);\n    case CHANGE_CONTAINED_VIEW_NAME:\n        return changeProp(state, \"name\", action.payload.title);\n    default:\n        return state;\n    }\n}\n\nexport default function(state = {}, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        if (isContainedView(action.payload.ids.parent)) {\n            return changeProp(\n                state,\n                action.payload.ids.parent,\n                singleContainedViewReducer(state[action.payload.ids.parent], action));\n        }\n        return state;\n    case EDIT_RICH_MARK:\n        let editState = Object.assign({}, state);\n        if (isContainedView(action.payload.oldConnection)) {\n            if (editState[action.payload.oldConnection] && editState[action.payload.oldConnection].parent[action.payload.parent]) {\n                let ind = editState[action.payload.oldConnection].parent[action.payload.parent].indexOf(action.payload.mark);\n                if (ind > -1) {\n                    editState[action.payload.oldConnection].parent[action.payload.parent].splice(ind, 1);\n                    if (editState[action.payload.oldConnection].parent[action.payload.parent].length === 0) {\n                        delete editState[action.payload.oldConnection].parent[action.payload.parent];\n                    }\n\n                }\n            }\n        }\n        if (isContainedView(action.payload.newConnection)) {\n            if (editState[action.payload.newConnection]) {\n                if(Object.keys(editState[action.payload.newConnection].parent).indexOf(action.payload.parent) === -1) {\n                    editState[action.payload.newConnection].parent[action.payload.parent] = [action.payload.mark];\n                } else {\n                    editState[action.payload.newConnection].parent[action.payload.parent].push(action.payload.mark);\n                }\n            }\n        }\n        return editState;\n    case DELETE_RICH_MARK:\n        if(isContainedView(action.payload.cvid)) {\n            return changeProp(state, action.payload.cvid, singleContainedViewReducer(state[action.payload.cvid], action));\n        }\n        return state;\n    case ADD_RICH_MARK:\n        // If rich mark is connected to a new contained view, mark.connection will include this information;\n        // otherwise, it's just the id/url and we're not interested\n        if (action.payload.mark.connectMode === 'existing' && isContainedView(action.payload.mark.connection)) {\n            return changeProp(state, action.payload.mark.connection, singleContainedViewReducer(state[action.payload.mark.connection], action));\n        }\n        if (action.payload.mark.connection.id) {\n            return changeProp(state, action.payload.mark.connection.id, action.payload.mark.connection);\n        }\n        return state;\n        /*  case DELETE_BOX:\n            let stateWithViewsDeleted = deleteProps(state, action.payload.childrenViews);\n            if (isContainedView(action.payload.parent)) {\n                stateWithViewsDeleted = changeProp(\n                    stateWithViewsDeleted,\n                    action.payload.parent,\n                    singleContainedViewReducer(stateWithViewsDeleted[action.payload.parent], action));\n            }\n            return stateWithViewsDeleted;*/\n    case CHANGE_CONTAINED_VIEW_NAME:\n        return changeProp(state, action.payload.id, singleContainedViewReducer(state[action.payload.id], action));\n    case DELETE_CONTAINED_VIEW:\n        return deleteProps(state, action.payload.ids);\n\n        /* case DELETE_SORTABLE_CONTAINER:\n            let item = findNavItemContainingBox(state,action.payload.parent);\n            if(item) {\n                if(item.extraFiles.length !== 0) {\n                    return Object.assign({}, state,\n                                    Object.assign({},\n                                        {\n                                            [findNavItemContainingBox(state, action.payload.parent).id]:\n                                            Object.assign(\n                                                {},\n                                                findNavItemContainingBox(state, action.payload.parent),\n                                                {extraFiles: {}\n                                                }\n                                            )\n                                        }\n                                    )\n                        );\n                }\n            }\n            return state;*/\n        // return deleteProps(state, action.payload.childrenViews);\n    case TOGGLE_TITLE_MODE:\n        if (isContainedView(action.payload.id)) {\n            return changeProp(state, action.payload.id, singleContainedViewReducer(state[action.payload.id], action));\n        }\n        return state;\n    case IMPORT_STATE:\n        return action.payload.present.containedViewsById || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/contained_views_by_id.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 891,
    "kind": "function",
    "name": "singleContainedViewReducer",
    "memberof": "DALI_EDITOR/reducers/contained_views_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/contained_views_by_id.es6~singleContainedViewReducer",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/contained_views_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 892,
    "kind": "function",
    "name": "contained_views_by_id",
    "memberof": "DALI_EDITOR/reducers/contained_views_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/contained_views_by_id.es6~contained_views_by_id",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/contained_views_by_id.es6",
    "importStyle": "contained_views_by_id",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/global_config.es6",
    "content": "import { CHANGE_GLOBAL_CONFIG } from '../common/actions';\nimport { changeProp } from '../common/utils';\n\nexport default function(state = 0, action = {}) {\n    switch (action.type) {\n    case CHANGE_GLOBAL_CONFIG:\n        if(action.payload.prop === 'STATE') {\n            return action.payload.value;\n        }\n        return changeProp(state, action.payload.prop, action.payload.value);\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/global_config.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 894,
    "kind": "function",
    "name": "global_config",
    "memberof": "DALI_EDITOR/reducers/global_config.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/global_config.es6~global_config",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/global_config.es6",
    "importStyle": "global_config",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/index_selected.es6",
    "content": "import { ADD_NAV_ITEM, DELETE_NAV_ITEM, INDEX_SELECT, SELECT_NAV_ITEM, IMPORT_STATE } from '../common/actions';\n\nexport default function(state = 0, action = {}) {\n    switch (action.type) {\n    case ADD_NAV_ITEM:\n        return action.payload.id;\n    case DELETE_NAV_ITEM:\n        return 0;\n    case SELECT_NAV_ITEM:\n        return state;\n    case INDEX_SELECT:\n        return action.payload.id;\n    case IMPORT_STATE:\n        return action.payload.present.indexSelected || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/index_selected.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 896,
    "kind": "function",
    "name": "index_selected",
    "memberof": "DALI_EDITOR/reducers/index_selected.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/index_selected.es6~index_selected",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/index_selected.es6",
    "importStyle": "index_selected",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 897,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/nav_item_selected.es6",
    "content": "import { ADD_NAV_ITEM, DELETE_NAV_ITEM, SELECT_NAV_ITEM, IMPORT_STATE } from '../common/actions';\n\nexport default function(state = 0, action = {}) {\n    switch (action.type) {\n    case ADD_NAV_ITEM:\n        if(action.payload.hasContent) {\n            return action.payload.id;\n        }\n        return state;\n    case DELETE_NAV_ITEM:\n        if (action.payload.ids && action.payload.ids.length > 0 && action.payload.ids.includes(state)) {\n            return 0;\n        }\n        return state;\n    case SELECT_NAV_ITEM:\n        return action.payload.id;\n    case IMPORT_STATE:\n        return action.payload.present.navItemSelected || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/nav_item_selected.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 898,
    "kind": "function",
    "name": "nav_item_selected",
    "memberof": "DALI_EDITOR/reducers/nav_item_selected.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/nav_item_selected.es6~nav_item_selected",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/nav_item_selected.es6",
    "importStyle": "nav_item_selected",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 899,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/nav_items_by_id.es6",
    "content": "import { ADD_BOX, MOVE_BOX, ADD_NAV_ITEM, CHANGE_NAV_ITEM_NAME, CHANGE_UNIT_NUMBER, DELETE_BOX, DUPLICATE_BOX, EXPAND_NAV_ITEM,\n    REORDER_NAV_ITEM, DELETE_NAV_ITEM, TOGGLE_NAV_ITEM, TOGGLE_TITLE_MODE, UPDATE_NAV_ITEM_EXTRA_FILES, DELETE_SORTABLE_CONTAINER,\n    ADD_RICH_MARK, EDIT_RICH_MARK, DELETE_RICH_MARK,\n    IMPORT_STATE } from '../common/actions';\nimport { ID_PREFIX_BOX } from '../common/constants';\nimport { changeProp, changeProps, deleteProp, deleteProps, isView, isSlide, isDocument, findNavItemContainingBox, findDescendantNavItems, isContainedView } from '../common/utils';\n\nfunction navItemCreator(state = {}, action = {}) {\n    return {\n        id: action.payload.id,\n        name: action.payload.name,\n        isExpanded: true,\n        parent: action.payload.parent,\n        children: [],\n        boxes: [],\n        linkedBoxes: {},\n        level: state[action.payload.parent].level + 1,\n        type: action.payload.type,\n        unitNumber: (action.payload.parent === 0 ?\n            state[action.payload.parent].children.length + 1 :\n            state[action.payload.parent].unitNumber),\n        hidden: state[action.payload.parent].hidden,\n        extraFiles: {},\n        header: {\n            elementContent: { documentTitle: '', documentSubTitle: '', numPage: '' },\n            display: { courseTitle: 'hidden', documentTitle: 'expanded', documentSubTitle: 'hidden', breadcrumb: \"reduced\", pageNumber: \"hidden\" },\n        },\n        // titleMode: isSlide(action.payload.type) ? 'hidden' : 'expanded'\n    };\n}\n\nfunction singleNavItemReducer(state = {}, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        return changeProp(state, \"boxes\", [...state.boxes, action.payload.ids.id]);\n    case MOVE_BOX:\n        let children = Object.assign([], state.boxes);\n        for(let x in children) {\n            if (children[x] === action.payload.id) {\n                children.push(children.splice(x, 1)[0]);\n            }\n        }\n        return changeProp(state, \"boxes\", children);\n    case ADD_NAV_ITEM:\n        return changeProps(\n            state,\n            [\n                \"children\",\n                \"isExpanded\",\n            ], [\n                [...state.children, action.payload.id],\n                true,\n            ]\n        );\n    case CHANGE_NAV_ITEM_NAME:\n        return changeProp(state, \"name\", action.payload.title);\n    case CHANGE_UNIT_NUMBER:\n        let finalValue;\n        if(isNaN(parseInt(action.payload.value, 10))) {\n            finalValue = \"\";\n        } else {\n            finalValue = action.payload.value;\n        }\n        return changeProp(state, \"unitNumber\", finalValue);\n    case DELETE_BOX:\n        let stateWithoutBox = changeProp(state, \"boxes\", state.boxes.filter(id => id !== action.payload.id));\n        if(stateWithoutBox.extraFiles[action.payload.id]) {\n            return changeProp(\n                stateWithoutBox,\n                \"extraFiles\",\n                deleteProp(stateWithoutBox, action.payload.id)\n            );\n        }\n        return stateWithoutBox;\n    case DELETE_RICH_MARK:\n        let previousParents = Object.assign({}, state.linkedBoxes);\n        let oldMarks = previousParents[action.payload.parent];\n        let ind = oldMarks.indexOf(action.payload.id);\n        if (ind > -1) {\n            oldMarks.splice(ind, 1);\n            if (oldMarks.length === 0) {\n                delete previousParents[action.payload.parent];\n            } else {\n                previousParents[action.payload.parent] = oldMarks;\n            }\n        }\n        return changeProp(state, \"linkedBoxes\", previousParents);\n    case EXPAND_NAV_ITEM:\n        return changeProp(state, \"isExpanded\", action.payload.value);\n    case DELETE_NAV_ITEM:\n        return changeProp(state, \"children\", state.children.filter(id => id !== action.payload.ids[0]));\n    case REORDER_NAV_ITEM:\n        if (state.id === action.payload.id) {\n            // Action was replaced, payload is different\n            return changeProps(\n                state,\n                [\n                    \"parent\",\n                    \"hidden\",\n                    \"level\",\n                    \"unitNumber\",\n                ], [\n                    action.payload.newParent.id,\n                    state.hidden, // action.payload.newParent.hidden,\n                    action.payload.newParent.level + 1,\n                    // If navItem is going to be level 1, unitNumber should not change\n                    action.payload.newParent.level === 0 ?\n                        state.unitNumber :\n                        action.payload.newParent.unitNumber,\n                ]\n            );\n        }\n        // This order is important!!\n        // If checked the other way round, when newParent and oldParent are equal, item moved will be deleted from children\n        if (state.id === action.payload.newParent) {\n            return changeProp(state, \"children\", action.payload.childrenInOrder);\n        }\n        if (state.id === action.payload.oldParent) {\n            return changeProp(state, \"children\", state.children.filter(id => id !== action.payload.id));\n        }\n\n        return state;\n    case TOGGLE_NAV_ITEM:\n        return changeProp(state, \"hidden\", action.payload.value);\n    case TOGGLE_TITLE_MODE:\n        return changeProp(state, \"header\", action.payload.titles);\n    case ADD_RICH_MARK:\n        let oldParents = Object.assign({}, state.linkedBoxes);\n        if(Object.keys(oldParents).indexOf(action.payload.parent) === -1) {\n            oldParents[action.payload.parent] = [action.payload.mark.id];\n        } else {\n            oldParents[action.payload.parent].push(action.payload.mark.id);\n        }\n        return changeProp(state, \"linkedBoxes\", oldParents);\n        // return changeProp(state, \"linkedBoxes\", [...(state.linkedBoxes || []), action.payload.parent]);\n    case UPDATE_NAV_ITEM_EXTRA_FILES:\n        return changeProp(\n            state,\n            \"extraFiles\",\n            changeProp(state.extraFiles, action.payload.box, action.payload.xml_path)\n        );\n    default:\n        return state;\n    }\n}\n\nexport default function(state = {}, action = {}) {\n    switch (action.type) {\n    case ADD_BOX:\n        if (isView(action.payload.ids.parent)) {\n            return changeProp(state, action.payload.ids.parent, singleNavItemReducer(state[action.payload.ids.parent], action));\n        }\n        return state;\n    case MOVE_BOX:\n        if (action.payload.container === 0 && action.payload.position === 'absolute') {\n            return changeProp(state, action.payload.parent, singleNavItemReducer(state[action.payload.parent], action));\n        }\n        return state;\n    case ADD_NAV_ITEM:\n        return changeProps(\n            state,\n            [\n                action.payload.id,\n                action.payload.parent,\n            ], [\n                navItemCreator(state, action),\n                singleNavItemReducer(state[action.payload.parent], action),\n            ]\n        );\n    case CHANGE_NAV_ITEM_NAME:\n        return changeProp(state, action.payload.id, singleNavItemReducer(state[action.payload.id], action));\n    case CHANGE_UNIT_NUMBER:\n        let itemsToChange = findDescendantNavItems(state, action.payload.id);\n        let newValues = [];\n        itemsToChange.forEach(item => {\n            newValues.push(singleNavItemReducer(state[item], action));\n        });\n        return changeProps(state, itemsToChange, newValues);\n    case DELETE_BOX:\n        if (isView(action.payload.parent) && action.payload.parent !== 0) {\n            /* if(findNavItemContainingBox(state,action.payload.parent).extraFiles.length !== 0){\n                    return changeProp(Object.assign({}, state,\n                                    Object.assign(\n                                        {},\n                                        {\n                                            [findNavItemContainingBox(state, action.payload.parent).id]:\n                                            Object.assign(\n                                                {},\n                                                findNavItemContainingBox(state, action.payload.parent),\n                                                {extraFiles: {}\n                                                }\n                                            )\n                                        }\n                                    )\n                        ),\n                    action.payload.parent, singleNavItemReducer(state[action.payload.parent], action));\n                }*/\n            return changeProp(state, action.payload.parent, singleNavItemReducer(state[action.payload.parent], action));\n        }\n\n        if(typeof findNavItemContainingBox(state, action.payload.parent) !== 'undefined' && findNavItemContainingBox(state, action.payload.parent).extraFiles.length !== 0) {\n            return Object.assign({}, state,\n                Object.assign({},\n                    {\n                        [findNavItemContainingBox(state, action.payload.parent).id]:\n                        Object.assign(\n                            {},\n                            findNavItemContainingBox(state, action.payload.parent),\n                            { extraFiles: {},\n                            }\n                        ),\n                    }\n                )\n            );\n        }\n\n        return state;\n    case DELETE_SORTABLE_CONTAINER:\n        let item = findNavItemContainingBox(state, action.payload.parent);\n        if(item) {\n            if(item.extraFiles.length !== 0) {\n                return Object.assign({}, state,\n                    Object.assign({},\n                        {\n                            [findNavItemContainingBox(state, action.payload.parent).id]:\n                            Object.assign(\n                                {},\n                                findNavItemContainingBox(state, action.payload.parent),\n                                { extraFiles: {},\n                                }\n                            ),\n                        }\n                    )\n                );\n            }\n        }\n        return state;\n    case DUPLICATE_BOX:\n        if (isView(action.payload.parent)) {\n            let newBoxes = state[action.payload.parent].boxes;\n            newBoxes.push(ID_PREFIX_BOX + action.payload.newId);\n\n            if (action.payload.parent !== 0) {\n                return Object.assign({}, state, {\n                    [action.payload.parent]: Object.assign({}, state[action.payload.parent], {\n                        boxes: newBoxes,\n                    }),\n                });\n            }\n        }\n        return state;\n    case EXPAND_NAV_ITEM:\n        return changeProp(state, action.payload.id, singleNavItemReducer(state[action.payload.id], action));\n    case REORDER_NAV_ITEM:\n        let itemsReordered = changeProps(\n            state,\n            [\n                action.payload.id,\n                action.payload.oldParent,\n                action.payload.newParent,\n\n            ], [\n                // Cheaty sneaky, action is replaced\n                singleNavItemReducer(state[action.payload.id], {\n                    type: REORDER_NAV_ITEM,\n                    payload: {\n                        id: action.payload.id,\n                        oldParent: action.payload.oldParent,\n                        newParent: state[action.payload.newParent],\n                    },\n                }),\n                singleNavItemReducer(state[action.payload.oldParent], action),\n                singleNavItemReducer(state[action.payload.newParent], action),\n            ]\n        );\n\n            // Some properties are inherited from parent (level, hidden, unitNumber, etc.)\n            // We should update item's children with new inherited value\n        let descendantsToUpdate = findDescendantNavItems(itemsReordered, action.payload.id);\n        // We remove the first element (the item we moved)\n        descendantsToUpdate.shift();\n        let newDescendants = [];\n        descendantsToUpdate.forEach(it => {\n            // Cheaty sneaky, action is replaced here aswell\n            newDescendants.push(singleNavItemReducer(state[it], {\n                type: REORDER_NAV_ITEM,\n                payload: {\n                    id: it,\n                    newParent: itemsReordered[itemsReordered[it].parent],\n                },\n            }));\n        });\n        return changeProps(itemsReordered, descendantsToUpdate, newDescendants);\n    case DELETE_NAV_ITEM:\n        let stateWithNavItemsDeleted = deleteProps(state, action.payload.ids);\n        return changeProp(stateWithNavItemsDeleted, action.payload.parent, singleNavItemReducer(state[action.payload.parent], action));\n    case TOGGLE_NAV_ITEM:\n        // If parent is already hidden, do nothing\n        if (state[state[action.payload.id].parent].hidden) {\n            return state;\n        }\n        let itemsToToggle = findDescendantNavItems(state, action.payload.id);\n        let itemsToggled = [];\n        itemsToToggle.forEach(it => {\n            // This is \"cheaty\"; we're replacing the original action\n            itemsToggled.push(singleNavItemReducer(state[it], {\n                type: TOGGLE_NAV_ITEM,\n                payload: { value: (!state[action.payload.id].hidden) },\n            }));\n        });\n        return changeProps(state, itemsToToggle, itemsToggled);\n    case TOGGLE_TITLE_MODE:\n        return changeProp(state, action.payload.id, singleNavItemReducer(state[action.payload.id], action));\n    case ADD_RICH_MARK:\n        if (action.payload && action.payload.mark && action.payload.mark.connectMode === 'existing' && action.payload.mark.connection) {\n            if (!isContainedView(action.payload.mark.connection)) {\n                return changeProp(state, action.payload.mark.connection, singleNavItemReducer(state[action.payload.mark.connection], action));\n\n            }\n        }\n        return state;\n    case EDIT_RICH_MARK:\n        let editState = Object.assign({}, state);\n        if (!isContainedView(action.payload.oldConnection) && action.payload.oldConnection !== 0) {\n            if (editState[action.payload.oldConnection] && editState[action.payload.oldConnection].linkedBoxes[action.payload.parent]) {\n                let ind = editState[action.payload.oldConnection].linkedBoxes[action.payload.parent].indexOf(action.payload.mark);\n                if (ind > -1) {\n                    editState[action.payload.oldConnection].linkedBoxes[action.payload.parent].splice(ind, 1);\n                    if (editState[action.payload.oldConnection].linkedBoxes[action.payload.parent].length === 0) {\n                        delete editState[action.payload.oldConnection].linkedBoxes[action.payload.parent];\n                    }\n\n                }\n            }\n        }\n        if (!isContainedView(action.payload.newConnection) && action.payload.oldConnection !== 0) {\n            if (editState[action.payload.newConnection]) {\n                if(Object.keys(editState[action.payload.newConnection].linkedBoxes).indexOf(action.payload.parent) === -1) {\n                    editState[action.payload.newConnection].linkedBoxes[action.payload.parent] = [action.payload.mark];\n                } else {\n                    editState[action.payload.newConnection].linkedBoxes[action.payload.parent].push(action.payload.mark);\n                }\n            }\n        }\n        return editState;\n    case DELETE_RICH_MARK:\n        if(!isContainedView(action.payload.cvid)) {\n            return changeProp(state, action.payload.cvid, singleNavItemReducer(state[action.payload.cvid], action));\n        }\n        return state;\n    case UPDATE_NAV_ITEM_EXTRA_FILES:\n        return changeProp(state, action.payload.id, singleNavItemReducer(state[action.payload.id], action));\n    case IMPORT_STATE:\n        return action.payload.present.navItemsById || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/nav_items_by_id.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 900,
    "kind": "function",
    "name": "navItemCreator",
    "memberof": "DALI_EDITOR/reducers/nav_items_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/nav_items_by_id.es6~navItemCreator",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/nav_items_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "{\"id\": *, \"name\": *, \"isExpanded\": boolean, \"parent\": *, \"children\": *, \"boxes\": *, \"linkedBoxes\": *, \"level\": *, \"type\": *, \"unitNumber\": *, \"hidden\": *, \"extraFiles\": *, \"header\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 901,
    "kind": "function",
    "name": "singleNavItemReducer",
    "memberof": "DALI_EDITOR/reducers/nav_items_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/nav_items_by_id.es6~singleNavItemReducer",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/nav_items_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 902,
    "kind": "function",
    "name": "nav_items_by_id",
    "memberof": "DALI_EDITOR/reducers/nav_items_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/nav_items_by_id.es6~nav_items_by_id",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/nav_items_by_id.es6",
    "importStyle": "nav_items_by_id",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 903,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/nav_items_ids.es6",
    "content": "import { ADD_NAV_ITEM, REORDER_NAV_ITEM, DELETE_NAV_ITEM, IMPORT_STATE } from '../common/actions';\n\nexport default function(state = [], action = {}) {\n    switch (action.type) {\n    case ADD_NAV_ITEM:\n        let temp = state.slice();\n        temp.splice(action.payload.position, 0, action.payload.id);\n        return temp;\n    case DELETE_NAV_ITEM:\n        return state.filter(id => action.payload.ids.indexOf(id) === -1);\n    case REORDER_NAV_ITEM:\n        return action.payload.idsInOrder;\n    case IMPORT_STATE:\n        return action.payload.present.navItemsIds || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/nav_items_ids.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 904,
    "kind": "function",
    "name": "nav_items_ids",
    "memberof": "DALI_EDITOR/reducers/nav_items_ids.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/nav_items_ids.es6~nav_items_ids",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/nav_items_ids.es6",
    "importStyle": "nav_items_ids",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 905,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/reducers.jsx",
    "content": "import { combineReducers } from 'redux';\nimport undoable from 'redux-undo';\nimport { ADD_BOX, SELECT_BOX, INCREASE_LEVEL, INDEX_SELECT, SELECT_NAV_ITEM, EXPAND_NAV_ITEM, UPDATE_NAV_ITEM_EXTRA_FILES, TOGGLE_TEXT_EDITOR,\n    DELETE_RICH_MARK, ADD_RICH_MARK, DELETE_CONTAINED_VIEW,\n    TOGGLE_TITLE_MODE, CHANGE_DISPLAY_MODE, SET_BUSY, IMPORT_STATE, FETCH_VISH_RESOURCES_SUCCESS, UPDATE_BOX, UPLOAD_IMAGE } from '../common/actions';\nimport { isSortableBox } from '../common/utils';\nimport boxesById from './boxes_by_id';\nimport boxLevelSelected from './box_level_selected';\nimport boxSelected from './box_selected';\nimport containedViewsById from './contained_views_by_id';\nimport containedViewSelected from './contained_view_selected';\nimport indexSelected from './index_selected';\nimport navItemsById from './nav_items_by_id';\nimport navItemsIds from './nav_items_ids';\nimport navItemSelected from './nav_item_selected';\nimport toolbarsById from './toolbars_by_id';\nimport globalConfig from './global_config';\n\nfunction changeDisplayMode(state = \"\", action = {}) {\n    switch (action.type) {\n    case CHANGE_DISPLAY_MODE:\n        return action.payload.mode;\n    case IMPORT_STATE:\n        return action.payload.present.displayMode || state;\n    default:\n        return state;\n    }\n}\n\nfunction isBusy(state = \"\", action = {}) {\n    switch (action.type) {\n    case SET_BUSY:\n        return action.payload;\n    case IMPORT_STATE:\n        return action.payload.present.isBusy || state;\n    default:\n        return state;\n    }\n}\n\nfunction fetchVishResults(state = { results: [] }, action = {}) {\n    switch (action.type) {\n    case FETCH_VISH_RESOURCES_SUCCESS:\n        return action.payload.result;\n    default:\n        return state;\n    }\n}\n\nfunction imagesUploaded(state = [], action = {}) {\n    switch(action.type) {\n    case UPLOAD_IMAGE:\n        return state.concat(action.payload.url);\n    default:\n        return state;\n    }\n}\n\nconst GlobalState = undoable(combineReducers({\n    globalConfig: globalConfig,\n    imagesUploaded: imagesUploaded, // [img0, img1]\n    boxesById: boxesById, // {0: box0, 1: box1}\n    boxSelected: boxSelected, // 0\n    boxLevelSelected: boxLevelSelected, // 0\n    indexSelected: indexSelected,\n    navItemsIds: navItemsIds, // [0, 1]\n    navItemSelected: navItemSelected, // 0\n    navItemsById: navItemsById, // {0: navItem0, 1: navItem1}\n    containedViewsById: containedViewsById, // {0: containedView0, 1: containedView1}\n    containedViewSelected: containedViewSelected, // 0\n    displayMode: changeDisplayMode, // \"list\",\n    toolbarsById: toolbarsById, // {0: toolbar0, 1: toolbar1}\n    isBusy: isBusy,\n    fetchVishResults: fetchVishResults,\n}), {\n    filter: (action, currentState, previousState) => {\n        switch (action.type) {\n        case CHANGE_DISPLAY_MODE:\n        case EXPAND_NAV_ITEM:\n        case IMPORT_STATE:\n        case INCREASE_LEVEL:\n        case INDEX_SELECT:\n        case SELECT_BOX:\n        case SELECT_NAV_ITEM:\n        case SET_BUSY:\n        case TOGGLE_TEXT_EDITOR:\n        case TOGGLE_TITLE_MODE:\n        case UPDATE_NAV_ITEM_EXTRA_FILES:\n        case UPDATE_BOX:\n            /* case DELETE_RICH_MARK:\n             case ADD_RICH_MARK:*/\n            return false;\n        }\n\n        if(action.type === ADD_BOX) {\n            if(action.payload.initialParams && action.payload.initialParams.isDefaultPlugin) {\n                return false;\n            }else if (isSortableBox(action.payload.ids.id)) {\n                return false;\n            }\n        }\n\n        return currentState !== previousState; // only add to history if state changed\n    },\n});\n\nexport default GlobalState;\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/reducers.jsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 906,
    "kind": "function",
    "name": "changeDisplayMode",
    "memberof": "DALI_EDITOR/reducers/reducers.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/reducers.jsx~changeDisplayMode",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/reducers.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 907,
    "kind": "function",
    "name": "isBusy",
    "memberof": "DALI_EDITOR/reducers/reducers.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/reducers.jsx~isBusy",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/reducers.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 908,
    "kind": "function",
    "name": "fetchVishResults",
    "memberof": "DALI_EDITOR/reducers/reducers.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/reducers.jsx~fetchVishResults",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/reducers.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{\"results\": undefined}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 909,
    "kind": "function",
    "name": "imagesUploaded",
    "memberof": "DALI_EDITOR/reducers/reducers.jsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/reducers.jsx~imagesUploaded",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/reducers.jsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 910,
    "kind": "variable",
    "name": "GlobalState",
    "memberof": "DALI_EDITOR/reducers/reducers.jsx",
    "static": true,
    "longname": "DALI_EDITOR/reducers/reducers.jsx~GlobalState",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/reducers.jsx",
    "importStyle": "GlobalState",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 911,
    "kind": "file",
    "name": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "content": "import { ADD_BOX, ADD_RICH_MARK, CHANGE_NAV_ITEM_NAME, DELETE_BOX, DELETE_RICH_MARK, DELETE_CONTAINED_VIEW, ADD_NAV_ITEM, DELETE_NAV_ITEM, DELETE_SORTABLE_CONTAINER, DUPLICATE_BOX,\n    EDIT_RICH_MARK, RESIZE_BOX, RESIZE_SORTABLE_CONTAINER, TOGGLE_TEXT_EDITOR, UPDATE_BOX, UPDATE_TOOLBAR, CHANGE_CONTAINED_VIEW_NAME,\n    VERTICALLY_ALIGN_BOX, IMPORT_STATE } from '../common/actions';\nimport Utils, { changeProp, changeProps, deleteProps, isSortableBox, isSortableContainer, isPage, isSlide, isDocument, nextToolbarAvailName } from '../common/utils';\nimport i18n from 'i18next';\n\nfunction createAspectRatioButton(controls, config) {\n    let arb = config.aspectRatioButtonConfig;\n    let button = {\n        __name: arb.name,\n        type: \"checkbox\",\n        checked: arb.defaultValue,\n        autoManaged: true,\n    };\n    if (arb.location.length === 2) {\n        controls[arb.location[0]].accordions[arb.location[1]].buttons.__aspectRatio = button;\n    } else {\n        controls[arb.location[0]].accordions[arb.location[1]].accordions[arb.location[2]].buttons.__aspectRatio = button;\n    }\n}\n\nfunction createRichAccordions(controls) {\n    if (!controls.main) {\n        controls.main = {\n            __name: \"Main\",\n            accordions: {\n                __marks_list: {\n                    key: 'marks_list',\n                    __name: i18n.t(\"marks.marks_list\"),\n                    icon: 'room',\n                    buttons: {},\n                }, /* ,\n                __content_list: {\n                    key: 'content_list',\n                    __name: 'Content List',\n                    icon: 'border_all',\n                    buttons: {}\n                }*/\n            },\n        };\n    }\n    if (!controls.main.accordions.__marks_list) {\n        controls.main.accordions.__marks_list = {\n            key: 'marks_list',\n            __name: i18n.t(\"marks.marks_list\"),\n            icon: 'room',\n            buttons: {},\n        };\n    }\n    /* if (!controls.main.accordions.__content_list) {\n        controls.main.accordions.__content_list = {\n            key: 'content_list',\n            __name: 'Content List',\n            icon: 'border_all',\n            buttons: {}\n        };\n    }*/\n}\n\nfunction createAliasButton(controls, state) {\n    if (!controls.main) {\n        controls.main = {\n            __name: \"Alias\",\n            icon: 'rate_review',\n            accordions: {\n                z__extra: {\n                    __name: \"Alias\",\n                    buttons: {},\n                },\n            },\n        };\n    } else if (!controls.main.accordions.z__extra) {\n        controls.main.accordions.z__extra = {\n            __name: \"Alias\",\n            icon: 'rate_review',\n            buttons: {},\n        };\n    }\n    if (!controls.main.accordions.z__extra.buttons.alias) {\n        if(state === null) {\n            controls.main.accordions.z__extra.buttons.alias = {\n                __name: 'Alias',\n                type: 'text',\n                value: \"\",\n                autoManaged: true,\n                isAttribute: true,\n            };\n        }else{\n            controls.main.accordions.z__extra.buttons.alias = Object.assign({}, state.controls.main.accordions.z__extra.buttons.alias);\n        }\n    }\n}\n\nfunction createSizeButtons(controls, state, action, floatingBox) {\n    if (!controls.main) {\n        controls.main = {\n            __name: \"Main\",\n            accordions: {\n                __sortable: {\n                    key: 'structure',\n                    __name: i18n.t('Structure'),\n                    icon: 'border_all',\n                    buttons: {},\n                },\n            },\n        };\n    } else if (!controls.main.accordions.__sortable) {\n        controls.main.accordions.__sortable = {\n            key: 'structure',\n            __name: i18n.t('Structure'),\n            icon: 'border_all',\n            buttons: {},\n        };\n    }\n    let displayValue;\n    let value;\n    let units;\n    let type;\n\n    // It means we are creating a new one, initial params can come\n    if (state === null) {\n        if (floatingBox) {\n            displayValue = 25;\n            value = 25;\n            units = \"%\";\n        } else {\n            displayValue = 25;\n            value = 25;\n            units = \"%\";\n        }\n        type = \"number\";\n\n        if (isSortableContainer(action.payload.ids.container) &&\n            isSortableBox(action.payload.ids.parent) && !action.payload.config.needsTextEdition) {\n\n            displayValue = 25;\n            value = 25;\n            units = '%';\n        }\n\n        let initialWidth = action.payload.initialParams.width;\n        if (initialWidth) {\n            if (initialWidth === \"auto\") {\n                displayValue = \"auto\";\n                units = \"%\";\n                type = \"text\";\n            } else {\n                displayValue = parseInt(initialWidth, 10);\n                value = parseInt(initialWidth, 10);\n                if (initialWidth.indexOf(\"px\") !== -1) {\n                    units = \"px\";\n                } else {\n                    units = \"%\";\n                }\n            }\n        }\n\n    } else {\n        let width = state.controls.main.accordions.__sortable.buttons.__width;\n        displayValue = width.displayValue;\n        value = width.value;\n        units = width.units;\n        type = width.type;\n    }\n    controls.main.accordions.__sortable.buttons.__width = {\n        __name: i18n.t('Width'),\n        type: type,\n        displayValue: displayValue,\n        value: value,\n        step: 5,\n        units: units,\n        auto: displayValue === \"auto\",\n        autoManaged: true,\n    };\n    if (state === null) {\n        let initialHeight = action.payload.initialParams.height;\n        if (initialHeight) {\n            if (initialHeight === \"auto\") {\n                displayValue = \"auto\";\n                units = \"%\";\n                type = \"text\";\n            } else {\n                displayValue = parseInt(initialHeight, 10);\n                value = parseInt(initialHeight, 10);\n                if (initialHeight.indexOf(\"px\") !== -1) {\n                    units = \"px\";\n                } else {\n                    units = \"%\";\n                }\n            }\n        } else {\n            value = \"20\";\n            displayValue = \"auto\";\n            units = \"%\";\n            type = \"text\";\n        }\n\n    } else {\n        let height = state.controls.main.accordions.__sortable.buttons.__height;\n        type = height.type;\n        displayValue = height.displayValue;\n        value = height.value;\n        units = height.units;\n        /* controls.main.accordions.__sortable.buttons.__height = {\n         __name: i18n.t('Height'),\n         type: height.type,\n         displayValue: height.displayValue,\n         value: height.value,\n         step: 5,\n         units: height.units,\n         auto: height.displayValue === \"auto\",\n         autoManaged: true\n         };*/\n    }\n    controls.main.accordions.__sortable.buttons.__height = {\n        __name: i18n.t('Height'),\n        type: type,\n        displayValue: displayValue,\n        value: value,\n        step: 5,\n        units: units,\n        auto: displayValue === \"auto\",\n        autoManaged: true,\n    };\n\n    if (state === null) {\n        controls.main.accordions.__sortable.buttons.__rotate = {\n            __name: i18n.t('Rotate'),\n            type: 'range',\n            value: 0,\n            min: 0,\n            max: 360,\n            autoManaged: false,\n        };\n\n    } else {\n        // let hasPositionButton = action.payload.toolbar && action.payload.toolbar.main && action.payload.toolbar.main.accordions && action.payload.toolbar.main.accordions.__sortable && action.payload.toolbar.main.accordions.__sortable.buttons && action.payload.toolbar.main.accordions.__sortable.buttons.__position;\n        let hasButton = state.controls && state.controls.main && state.controls.main.accordions && state.controls.main.accordions.__sortable && state.controls.main.accordions.__sortable.buttons && state.controls.main.accordions.__sortable.buttons.__rotate;\n\n        if (hasButton) {\n            controls.main.accordions.__sortable.buttons.__rotate = {\n                __name: i18n.t('Rotate'),\n                type: 'range',\n                value: state.controls.main.accordions.__sortable.buttons.__rotate.value,\n                min: 0,\n                max: 360,\n                autoManaged: true,\n            };\n        }\n\n    }\n\n    // This will be commented until it's working correctly\n    if (state === null) {\n        if (!floatingBox) {\n            controls.main.accordions.__sortable.buttons.__position = {\n                __name: i18n.t('Position'),\n                type: 'radio',\n                value: 'relative',\n                options: ['absolute', 'relative'],\n                autoManaged: true,\n            };\n        }\n\n    } else {\n        // let hasPositionButton = action.payload.toolbar && action.payload.toolbar.main && action.payload.toolbar.main.accordions && action.payload.toolbar.main.accordions.__sortable && action.payload.toolbar.main.accordions.__sortable.buttons && action.payload.toolbar.main.accordions.__sortable.buttons.__position;\n        let hasPositionButton = state.controls && state.controls.main && state.controls.main.accordions && state.controls.main.accordions.__sortable && state.controls.main.accordions.__sortable.buttons && state.controls.main.accordions.__sortable.buttons.__position;\n\n        if (!floatingBox && hasPositionButton) {\n            controls.main.accordions.__sortable.buttons.__position = {\n                __name: i18n.t('Position'),\n                type: 'radio',\n                value: state.controls.main.accordions.__sortable.buttons.__position.value,\n                options: ['absolute', 'relative'],\n                autoManaged: true,\n            };\n        }\n\n    }\n\n    /*\n       controls.main.accordions.__sortable.buttons.__verticalAlign = {\n       __name: i18n.t('Vertical_align'),\n       type: 'fancy_radio',\n       value: 'middle',\n       options: ['top', 'middle', 'bottom'],\n       tooltips: [i18n.t('messages.align_top'), i18n.t('messages.align_middle'), i18n.t('messages.align_bottom')],\n       icons: ['vertical_align_top', 'vertical_align_center', 'vertical_align_bottom'],\n       autoManaged: true\n       };\n       */\n\n}\n\nfunction toolbarCreator(state, action) {\n    let toolbar = {\n        id: action.payload.ids.id,\n        controls: action.payload.toolbar || {\n            main: {\n                __name: \"Main\",\n                accordions: {},\n            },\n        },\n        config: action.payload.config || {},\n        state: action.payload.state || {},\n        showTextEditor: false,\n    };\n    if (isSortableBox(action.payload.ids.id)) {\n        toolbar.config.displayName = i18n.t('Container_');\n    }\n    if(!isSortableBox(action.payload.ids.id)) {\n        createSizeButtons(toolbar.controls, null, action, !isSortableContainer(action.payload.ids.container));\n        createAliasButton(toolbar.controls, null);\n    }\n    if (toolbar.config && toolbar.config.aspectRatioButtonConfig) {\n        createAspectRatioButton(toolbar.controls, toolbar.config);\n    }\n    if (toolbar.config && toolbar.config.isRich) {\n        createRichAccordions(toolbar.controls);\n    }\n\n    return toolbar;\n}\n\nfunction toolbarSectionCreator(state, action, isContainedView = false) {\n    let doc_type;\n    let id = isContainedView ? action.payload.mark.connection.id : action.payload.id;\n    let type = isContainedView ? action.payload.mark.connection.type : action.payload.type;\n    if (isPage(id)) {\n        doc_type = i18n.t('page');\n    }\n    if(isSlide(type)) {\n        doc_type = i18n.t('slide');\n    }\n\n    if(isDocument(type)) {\n        doc_type = i18n.t('document');\n    }\n    let pagetitle = i18n.t('Title') + doc_type;\n    let toolbar = {\n        id: id,\n        controls: action.payload.toolbar || {\n            main: {\n                __name: \"Main\",\n                accordions: { // define accordions for section\n                    basic: {\n                        __name: \"Generales\",\n                        icon: 'settings',\n                        buttons: {\n                            page_display: {\n                                __name: i18n.t('display_page'),\n                                type: 'checkbox',\n                                checked: true,\n                                autoManaged: false,\n                            },\n                            navitem_name: {\n                                __name: i18n.t('NavItem_name'),\n                                type: 'text',\n                                value: isContainedView ? action.payload.mark.connection.name /* nextToolbarAvailName(i18n.t('contained_view'), state)*/ : doc_type,\n                                autoManaged: false,\n                            },\n                        },\n                    },\n                    header: {\n                        __name: i18n.t('Header'),\n                        icon: 'format_color_text',\n                        buttons: {\n                            display_title: {\n                                __name: i18n.t('course_title'),\n                                type: 'checkbox',\n                                checked: false,\n                                autoManaged: false,\n                            },\n                            display_pagetitle: {\n                                __name: pagetitle,\n                                type: 'checkbox',\n                                checked: true,\n                                autoManaged: false,\n                            },\n                            pagetitle_name: {\n                                __name: \"custom_title\",\n                                type: 'conditionalText',\n                                associatedKey: 'display_pagetitle',\n                                value: \"\",\n                                autoManaged: false,\n                                display: true,\n                            },\n                            display_pagesubtitle: {\n                                __name: i18n.t('subtitle'),\n                                type: 'checkbox',\n                                checked: false,\n                                autoManaged: false,\n                            },\n                            pagesubtitle_name: {\n                                __name: \"custom_subtitle\",\n                                type: 'conditionalText',\n                                associatedKey: 'display_pagesubtitle',\n                                value: \"\",\n                                autoManaged: false,\n                                display: true,\n                            },\n\n                        },\n\n                    },\n                },\n            },\n        },\n        config: action.payload.config || {},\n        state: action.payload.state || {},\n\n    };\n\n    if (!isContainedView && toolbar.controls && toolbar.controls.main && toolbar.controls.main.accordions.header && toolbar.controls.main.accordions.header.buttons) {\n        toolbar.controls.main.accordions.header.buttons.display_breadcrumb = {\n            __name: i18n.t('Breadcrumb'),\n            type: 'checkbox',\n            checked: true,\n            autoManaged: false,\n        };\n        toolbar.controls.main.accordions.header.buttons.display_pagenumber = {\n            __name: i18n.t('pagenumber'),\n            type: 'checkbox',\n            checked: false,\n            autoManaged: false,\n        };\n        toolbar.controls.main.accordions.header.buttons.pagenumber_name = {\n            __name: \"custom_pagenum\",\n            type: 'conditionalText',\n            associatedKey: 'display_pagenumber',\n            value: \"\",\n            autoManaged: false,\n            display: true,\n        };\n    }\n    toolbar.config.displayName = isContainedView ? doc_type + ': ' + i18n.t(\"contained_view\") : doc_type;\n\n    createAliasButton(toolbar.controls, null);\n\n    return toolbar;\n}\n\nfunction toolbarReducer(state, action) {\n    let newState;\n    switch (action.type) {\n    case ADD_RICH_MARK:\n        return changeProp(state, \"state\", action.payload.state);\n    case CHANGE_NAV_ITEM_NAME:\n        newState = Utils.deepClone(state);\n        newState.controls.main.accordions.basic.buttons.navitem_name.value = action.payload.title;\n        return newState;\n    case CHANGE_CONTAINED_VIEW_NAME:\n        newState = Utils.deepClone(state);\n        newState.controls.main.accordions.basic.buttons.navitem_name.value = action.payload.title;\n        return newState;\n    case EDIT_RICH_MARK:\n        return changeProp(state, \"state\", action.payload.state);\n    case RESIZE_BOX:\n        newState = Utils.deepClone(state);\n        if (newState.controls.main.accordions.__sortable) {\n            let buttons = newState.controls.main.accordions.__sortable.buttons;\n            if (buttons.__height && buttons.__width) {\n                if (action.payload.heightButton) {\n                    newState.controls.main.accordions.__sortable.buttons.__height = action.payload.heightButton;\n                }\n                if (action.payload.widthButton) {\n                    newState.controls.main.accordions.__sortable.buttons.__width = action.payload.widthButton;\n                }\n            }\n        }\n\n        // Rebind callback functions because from not automanaged buttons\n        for (let tabKey in newState.controls) {\n            for (let accordionKey in newState.controls[tabKey].accordions) {\n                let button;\n                for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].buttons) {\n                    button = newState.controls[tabKey].accordions[accordionKey].buttons[buttonKey];\n                    if (!button.autoManaged) {\n                        button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                    }\n                }\n                if (newState.controls[tabKey].accordions[accordionKey].accordions) {\n                    for (let accordionKey2 in newState.controls[tabKey].accordions[accordionKey].accordions) {\n                        for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons) {\n                            button = newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons[buttonKey];\n                            if (!button.autoManaged) {\n                                button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return newState;\n    case RESIZE_SORTABLE_CONTAINER:\n        newState = Utils.deepClone(state);\n        let sortableContainers = newState.state.__pluginContainerIds;\n        for (let key in sortableContainers) {\n            if (sortableContainers[key].id === action.payload.id) {\n                sortableContainers[key].height = action.payload.height;\n                break;\n            }\n        }\n\n        // Rebind callback functions because from not automanaged buttons\n        for (let tabKey in newState.controls) {\n            for (let accordionKey in newState.controls[tabKey].accordions) {\n                let button;\n                for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].buttons) {\n                    button = newState.controls[tabKey].accordions[accordionKey].buttons[buttonKey];\n                    if (!button.autoManaged) {\n                        button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                    }\n                }\n                if (newState.controls[tabKey].accordions[accordionKey].accordions) {\n                    for (let accordionKey2 in newState.controls[tabKey].accordions[accordionKey].accordions) {\n                        for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons) {\n                            button = newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons[buttonKey];\n                            if (!button.autoManaged) {\n                                button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return newState;\n\n    case TOGGLE_TEXT_EDITOR:\n        return changeProp(state, \"showTextEditor\", action.payload.value);\n    case UPDATE_BOX:\n        /* let controls = action.payload.toolbar;\n            if (!isSortableBox(action.payload.id)) {\n                createSizeButtons(controls, state, action);\n                createAliasButton(controls, state);\n            }\n\n            if (state.config && state.config.isRich) {\n                createRichAccordions(controls);\n            }\n            if (state.config && state.config.aspectRatioButtonConfig) {\n                createAspectRatioButton(controls, state.config);\n            }*/\n        return changeProps(\n            state,\n            [\n                \"state\",\n            ], [\n                action.payload.state,\n            ]\n        );\n    case UPDATE_TOOLBAR:\n        newState = Utils.deepClone(state);\n        let pl = action.payload;\n\n        if (pl.value.__name) {\n            if (pl.accordions.length > 1) {\n                newState.controls[pl.tab].accordions[pl.accordions[0]].accordions[pl.accordions[1]].buttons[pl.name] = pl.value;\n            } else {\n                newState.controls[pl.tab].accordions[pl.accordions[0]].buttons[pl.name] = pl.value;\n            }\n        } else if (pl.accordions.length > 1) {\n            newState.controls[pl.tab].accordions[pl.accordions[0]].accordions[pl.accordions[1]]\n                .buttons[pl.name][typeof pl.value === \"boolean\" ? \"checked\" : \"value\"] = pl.value;\n        } else {\n            newState.controls[pl.tab].accordions[pl.accordions[0]]\n                .buttons[pl.name][typeof pl.value === \"boolean\" ? \"checked\" : \"value\"] = pl.value;\n        }\n\n        // Rebind callback functions because from not automanaged buttons\n        for (let tabKey in newState.controls) {\n            for (let accordionKey in newState.controls[tabKey].accordions) {\n                let button;\n                for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].buttons) {\n                    button = newState.controls[tabKey].accordions[accordionKey].buttons[buttonKey];\n                    if (!button.autoManaged) {\n                        button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                    }\n                }\n                if (newState.controls[tabKey].accordions[accordionKey].accordions) {\n                    for (let accordionKey2 in newState.controls[tabKey].accordions[accordionKey].accordions) {\n                        for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons) {\n                            button = newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons[buttonKey];\n                            if (!button.autoManaged) {\n                                button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return newState;\n    case DELETE_RICH_MARK:\n        return changeProp(state, \"state\", action.payload.state);\n    case VERTICALLY_ALIGN_BOX:\n        newState = Utils.deepClone(state);\n        newState.controls.main.accordions.__sortable.buttons.__verticalAlign.value = action.payload.verticalAlign;\n\n        // Rebind callback functions because from not automanaged buttons\n        for (let tabKey in newState.controls) {\n            for (let accordionKey in newState.controls[tabKey].accordions) {\n                let button;\n                for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].buttons) {\n                    button = newState.controls[tabKey].accordions[accordionKey].buttons[buttonKey];\n                    if (!button.autoManaged) {\n                        button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                    }\n                }\n                if (newState.controls[tabKey].accordions[accordionKey].accordions) {\n                    for (let accordionKey2 in newState.controls[tabKey].accordions[accordionKey].accordions) {\n                        for (let buttonKey in newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons) {\n                            button = newState.controls[tabKey].accordions[accordionKey].accordions[accordionKey2].buttons[buttonKey];\n                            if (!button.autoManaged) {\n                                button.callback = state.controls[tabKey].accordions[accordionKey].buttons[buttonKey].callback;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return newState;\n    default:\n        return state;\n    }\n}\n\nexport default function(state = {}, action = {}) {\n    let newState;\n    switch (action.type) {\n    case ADD_BOX:\n        return changeProp(state, action.payload.ids.id, toolbarCreator(state, action));\n    case ADD_NAV_ITEM:\n        return changeProp(state, action.payload.id, toolbarSectionCreator(state, action));\n    case ADD_RICH_MARK:\n        newState = state;\n        if(action.payload.mark.connectMode === \"new\") {\n            let modState = changeProp(state, action.payload.mark.connection.id || action.payload.mark.connection, toolbarSectionCreator(state, action, true));\n            newState = changeProp(modState, action.payload.parent, toolbarReducer(modState[action.payload.parent], action));\n        }\n        return newState;\n    case CHANGE_NAV_ITEM_NAME:\n        return changeProp(state, action.payload.id, toolbarReducer(state[action.payload.id], action));\n        // return state;\n    case CHANGE_CONTAINED_VIEW_NAME:\n        return changeProp(state, action.payload.id, toolbarReducer(state[action.payload.id], action));\n    case DELETE_BOX:\n        let children = action.payload.children ? action.payload.children : [];\n        return deleteProps(state, children.concat(action.payload.id));\n    case DELETE_CONTAINED_VIEW:\n        let boxesCV = action.payload.boxes ? action.payload.boxes : [];\n        let newToolbarCV = Object.assign({}, state);\n        let parents = action.payload.parent ? action.payload.parent : [];\n        // Delete all related marks\n        Object.keys(parents).forEach((el)=>{\n            if (newToolbarCV[el] && newToolbarCV[el].state && newToolbarCV[el].state.__marks) {\n                parents[el].forEach((mark)=>{\n                    if (newToolbarCV[el].state.__marks[mark] && newToolbarCV[el].state.__marks[mark].connection === action.payload.ids[0]) {\n                        delete newToolbarCV[el].state.__marks[mark];\n                    }\n                });\n            }\n        });\n        return deleteProps(newToolbarCV, boxesCV.concat(action.payload.ids[0]));\n    case DELETE_NAV_ITEM:\n        let boxes = action.payload.boxes ? action.payload.boxes : [];\n        let linkedBoxes = action.payload.linkedBoxes ? action.payload.linkedBoxes : {};\n        let newToolbar = Object.assign({}, state);\n        Object.keys(linkedBoxes).forEach((el)=>{\n            if (newToolbar[el] && newToolbar[el].state && newToolbar[el].state.__marks) {\n                for (let markId in linkedBoxes[el]) {\n                    let mark = linkedBoxes[el][markId];\n                    action.payload.ids.forEach((id)=>{\n                        if (newToolbar[el].state.__marks[mark] && newToolbar[el].state.__marks[mark].connection === id) {\n                            delete newToolbar[el].state.__marks[mark];\n                        }\n                    });\n\n                }\n            }\n        });\n        return deleteProps(newToolbar, boxes.concat(action.payload.ids));\n    case DELETE_SORTABLE_CONTAINER:\n        return deleteProps(state, action.payload.children);\n    case DUPLICATE_BOX:\n        newState = Object.assign({}, state);\n        let replaced = Object.assign({}, state);\n        let newIds = action.payload.newIds;\n        // let count = 0;\n        Object.keys(newIds).map((box)=> {\n            replaced = Object.assign({}, Object.replaceAll(replaced, box, newIds[box]));\n        });\n        replaced = Object.assign({}, Object.replaceAll(replaced, action.payload.id.substr(3), action.payload.newId));\n        return Object.assign({}, newState, replaced);\n    case EDIT_RICH_MARK:\n        return state;\n        // return changeProp(state, action.payload.parent, toolbarReducer(state[action.payload.parent], action));\n    case DELETE_RICH_MARK:\n        // if (state[action.payload.parent] && state[action.payload.parent].state.__marks && state[action.payload.parent].state.__marks[action.payload.id]) {\n        // return changeProp(state, action.payload.parent, toolbarReducer(state[action.payload.parent], action));\n        // }\n        return state;\n    case RESIZE_BOX:\n        return changeProp(state, action.payload.id, toolbarReducer(state[action.payload.id], action));\n    case RESIZE_SORTABLE_CONTAINER:\n        return changeProp(state, action.payload.parent, toolbarReducer(state[action.payload.parent], action));\n    case TOGGLE_TEXT_EDITOR:\n        return changeProp(state, action.payload.caller, toolbarReducer(state[action.payload.caller], action));\n    case UPDATE_BOX:\n        return changeProp(state, action.payload.id, toolbarReducer(state[action.payload.id], action));\n    case UPDATE_TOOLBAR:\n        return changeProp(state, action.payload.id, toolbarReducer(state[action.payload.id], action));\n    case VERTICALLY_ALIGN_BOX:\n        return changeProp(state, action.payload.id, toolbarReducer(state[action.payload.id], action));\n    case IMPORT_STATE:\n        return action.payload.present.toolbarsById || state;\n    default:\n        return state;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lou/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 912,
    "kind": "function",
    "name": "createAspectRatioButton",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~createAspectRatioButton",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "controls",
        "types": [
          "*"
        ]
      },
      {
        "name": "config",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 913,
    "kind": "function",
    "name": "createRichAccordions",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~createRichAccordions",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "controls",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 914,
    "kind": "function",
    "name": "createAliasButton",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~createAliasButton",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "controls",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 915,
    "kind": "function",
    "name": "createSizeButtons",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~createSizeButtons",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [
      {
        "name": "controls",
        "types": [
          "*"
        ]
      },
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "floatingBox",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 916,
    "kind": "function",
    "name": "toolbarCreator",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~toolbarCreator",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 295,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 917,
    "kind": "function",
    "name": "toolbarSectionCreator",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~toolbarSectionCreator",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      },
      {
        "name": "isContainedView",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 918,
    "kind": "function",
    "name": "toolbarReducer",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~toolbarReducer",
    "access": "public",
    "export": false,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": null,
    "description": null,
    "lineNumber": 443,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "types": [
          "*"
        ]
      },
      {
        "name": "action",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 919,
    "kind": "function",
    "name": "toolbars_by_id",
    "memberof": "DALI_EDITOR/reducers/toolbars_by_id.es6",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "DALI_EDITOR/reducers/toolbars_by_id.es6~toolbars_by_id",
    "access": "public",
    "export": true,
    "importPath": "dali_editor/DALI_EDITOR/reducers/toolbars_by_id.es6",
    "importStyle": "toolbars_by_id",
    "description": null,
    "lineNumber": 631,
    "undocument": true,
    "params": [
      {
        "name": "state",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "action",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Dali Editor\r\n\r\n**Dali Editor** is an open source e-learning authoring tool to create different types of resources (web documents, slides and more coming up soon).\r\n\r\nThis software is written in Javascript (ES6), making use of React and Redux.\r\n\r\n## Installation and manual\r\n\r\nVisit our wiki to see all the available Dali Editor instructions.\r\n\r\nIn order to install this project you will need `node` 6.x.x (latest), `npm` and  git.\r\nFirst clone the repo and then install the dependencies like so:\r\n\r\n```bash\r\ngit clone https://github.com/ging/dali_editor.git\r\ncd dali_editor\r\nnpm install\r\n```\r\nOnce everything is installed, you can run the application with the following line:\r\n\r\n```bash\r\nnpm start\r\n```\r\n\r\n## Code quality and documentation\r\n\r\nWe use ESDoc in order to generate our documentation.\r\nTo regenerate it after a change you need to run:\r\n\r\n```bash\r\nnpm run doc\r\n```\r\nWe also make use of ESLint in order to guarantee a certain code quality. With the following line you will fix all the formatting errors and view those that can't be automatically fixed:\r\n\r\n```bash\r\nnpm run eslint\r\n```\r\n\r\n## Discussion and contribution\r\n\r\nFeel free to raise an issue or send us a message at github.\r\n\r\n## Copyright\r\n\r\nCopyright 2016 Universidad Politécnica de Madrid\r\n\r\nDali Editor is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\r\n\r\nDali Editor is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Affero General Public License along with Dali Editor. If not, see http://www.gnu.org/licenses.",
    "longname": "/Users/lou/DALI_EDITOR/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]